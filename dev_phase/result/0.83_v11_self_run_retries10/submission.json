[
  {
    "id": 1,
    "response": "class Pair:\n    def __init__(self, start, end):\n        self.start = start\n        self.end = end\n\ndef max_chain_length(lst, n):\n    lst.sort(key=lambda x: x.end)\n    count = 1\n    last_end = lst[0].end\n    for i in range(1, n):\n        if lst[i].start > last_end:\n            count += 1\n            last_end = lst[i].end\n    return count"
  },
  {
    "id": 2,
    "response": "def first_repeated_char(s):\n    seen = set()\n    for char in s:\n        if char in seen:\n            return char\n        seen.add(char)\n    return \"None\""
  },
  {
    "id": 3,
    "response": ""
  },
  {
    "id": 4,
    "response": "def reverse_words(s):\n    return ' '.join(s.split()[::-1])"
  },
  {
    "id": 5,
    "response": "def prime_num(n):\n    if n <= 1:\n        return False\n    if n <= 3:\n        return True\n    if n % 2 == 0 or n % 3 == 0:\n        return False\n    i = 5\n    while i * i <= n:\n        if n % i == 0 or n % (i + 2) == 0:\n            return False\n        i += 6\n    return True"
  },
  {
    "id": 6,
    "response": "import math\n\ndef radian_degree(n):\n    return n * math.pi / 180"
  },
  {
    "id": 7,
    "response": "import re\n\ndef find_literals(s, s2):\n    match = re.search(s2, s)\n    if match:\n        start = match.start()\n        end = start + len(s2)\n        return (s2, start, end)\n    else:\n        return None"
  },
  {
    "id": 8,
    "response": "def bell_Number(n):\n    if n == 0:\n        return 1\n    bell_triangle = [[0] * (n) for _ in range(n)]\n    bell_triangle[0][0] = 1\n    for i in range(1, n):\n        bell_triangle[i][0] = bell_triangle[i-1][i-1]\n        for j in range(1, i+1):\n            bell_triangle[i][j] = bell_triangle[i][j-1] + bell_triangle[i-1][j-1]\n    return bell_triangle[n-1][n-1]"
  },
  {
    "id": 9,
    "response": ""
  },
  {
    "id": 10,
    "response": "def remove_kth_element(lst, n):\n    if n <= 0 or n > len(lst):\n        return lst\n    return lst[:n-1] + lst[n:]"
  },
  {
    "id": 11,
    "response": "def max_of_nth(lst, n):\n    if not lst:\n        return None\n    max_val = lst[0][n]\n    for t in lst:\n        if t[n] > max_val:\n            max_val = t[n]\n    return max_val"
  },
  {
    "id": 12,
    "response": "def merge(lst):\n    first = []\n    last = []\n    for sub in lst:\n        first.append(sub[0])\n        last.append(sub[-1])\n    return [first, last]"
  },
  {
    "id": 13,
    "response": "def maximum_value(lst):\n    result = []\n    for key, values in lst:\n        max_val = max(values)\n        result.append((key, max_val))\n    return result"
  },
  {
    "id": 14,
    "response": "def cummulative_sum(lst):\n    total = 0\n    for t in lst:\n        total += sum(t)\n    return total"
  },
  {
    "id": 15,
    "response": "def average_tuple(tup):\n    return [sum(inner) / len(inner) for inner in tup]"
  },
  {
    "id": 16,
    "response": "def tuple_modulo(tup, tup2):\n    if len(tup) != len(tup2):\n        raise ValueError(\"Tuples must be of the same length\")\n    result = []\n    for a, b in zip(tup, tup2):\n        if b == 0:\n            raise ValueError(\"Division by zero is not allowed\")\n        result.append(a % b)\n    return tuple(result)"
  },
  {
    "id": 17,
    "response": ""
  },
  {
    "id": 18,
    "response": "def div_list(lst, lst2):\n    return [x / y for x, y in zip(lst, lst2)]"
  },
  {
    "id": 19,
    "response": "def move_num(s):\n    digits = []\n    non_digits = []\n    for char in s:\n        if char.isdigit():\n            digits.append(char)\n        else:\n            non_digits.append(char)\n    return ''.join(non_digits) + ''.join(digits)"
  },
  {
    "id": 20,
    "response": "def largest_subset(lst, n):\n    lst.sort()\n    max_len = 1\n    current_len = 1\n    for i in range(1, len(lst)):\n        if lst[i] % lst[i-1] == 0:\n            current_len += 1\n            if current_len > max_len:\n                max_len = current_len\n        else:\n            current_len = 1\n    return max_len"
  },
  {
    "id": 21,
    "response": "def increment_numerics(lst, n):\n    result = []\n    for s in lst:\n        if s.isdigit():\n            num = int(s)\n            result.append(str(num + n))\n        else:\n            result.append(s)\n    return result"
  },
  {
    "id": 22,
    "response": "def get_median(lst, lst2, n):\n    merged = lst + lst2\n    merged.sort()\n    total = 2 * n\n    mid = total // 2\n    if total % 2 == 1:\n        return merged[mid]\n    else:\n        return (merged[mid - 1] + merged[mid]) / 2"
  },
  {
    "id": 23,
    "response": "def nth_nums(lst, n):\n    return list(map(lambda x: x ** n, lst))"
  },
  {
    "id": 24,
    "response": "def is_upper(s):\n    return s.upper()"
  },
  {
    "id": 25,
    "response": "def swap_List(lst):\n    if len(lst) <= 1:\n        return lst\n    return [lst[-1]] + lst[1:-1] + [lst[0]]"
  },
  {
    "id": 26,
    "response": "def triangle_area(n):\n    if n < 0:\n        return -1\n    return n * n"
  },
  {
    "id": 27,
    "response": "def find_First_Missing(lst, n, n2):\n    s = set(lst)\n    i = 0\n    while True:\n        if i not in s:\n            return i\n        i += 1"
  },
  {
    "id": 28,
    "response": "def replace_spaces(s):\n    return s.replace(' ', '%20')"
  },
  {
    "id": 29,
    "response": "def Split(lst):\n    return [x for x in lst if x % 2 == 0]"
  },
  {
    "id": 30,
    "response": "import itertools\n\ndef get_coordinates(tup):\n    a, b = tup\n    x_values = range(a-1, b+1)\n    y_values = range(a, b+2)\n    coordinates = [list(pair) for pair in itertools.product(x_values, y_values)]\n    return coordinates"
  },
  {
    "id": 31,
    "response": "import re\n\ndef replace_spaces(s):\n    return re.sub(r'\\s', '_', s)"
  },
  {
    "id": 32,
    "response": "def move_zero(lst):\n    non_zeros = [x for x in lst if x != 0]\n    zeros = [x for x in lst if x == 0]\n    return non_zeros + zeros"
  },
  {
    "id": 33,
    "response": "def pair_OR_Sum(lst, n):\n    total = 0\n    for i in range(n):\n        for j in range(i + 1, n):\n            total += lst[i] ^ lst[j]\n    return total"
  },
  {
    "id": 34,
    "response": "def even_Power_Sum(n):\n    sum_k4 = n * (n + 1) * (2 * n + 1) * (3 * n * n + 3 * n - 1) // 30\n    return 16 * sum_k4"
  },
  {
    "id": 35,
    "response": "def heap_sort(lst):\n    n = len(lst)\n    \n    # Build max heap\n    for i in range(n // 2 - 1, -1, -1):\n        heapify(lst, n, i)\n    \n    # Extract elements one by one\n    for i in range(n - 1, 0, -1):\n        lst[i], lst[0] = lst[0], lst[i]  # Swap\n        heapify(lst, i, 0)\n    \n    return lst\n\ndef heapify(arr, n, i):\n    largest = i\n    left = 2 * i + 1\n    right = 2 * i + 2\n    \n    if left < n and arr[left] > arr[largest]:\n        largest = left\n    if right < n and arr[right] > arr[largest]:\n        largest = right\n    \n    if largest != i:\n        arr[i], arr[largest] = arr[largest], arr[i]\n        heapify(arr, n, largest)"
  },
  {
    "id": 36,
    "response": "def Check_Solution(n, n2, n3):\n    if n3 == n:\n        return \"Yes\"\n    else:\n        return \"No\""
  },
  {
    "id": 37,
    "response": "def noprofit_noloss(n, n2):\n    return n == n2"
  },
  {
    "id": 38,
    "response": "def wind_chill(n, n2):\n    return (-11/45)*n + (34/45)*n2 + 386/9"
  },
  {
    "id": 39,
    "response": "def sample_nam(lst):\n    total = 0\n    for name in lst:\n        if len(name) > 0 and name[0].islower():\n            total += len(name)\n    return total"
  },
  {
    "id": 40,
    "response": "def remove_parenthesis(lst):\n    s = lst[0]\n    start = s.find('(')\n    if start == -1:\n        return s\n    count = 1\n    end = start + 1\n    while count > 0:\n        if s[end] == '(':\n            count += 1\n        elif s[end] == ')':\n            count -= 1\n        end += 1\n    return s[:start] + s[end:]"
  },
  {
    "id": 41,
    "response": "def is_nonagonal(n):\n    return n * (3 * n - 1) // 2"
  },
  {
    "id": 42,
    "response": "def remove_similar_row(lst):\n    seen = set()\n    result = set()\n    for row in lst:\n        sorted_row = tuple(sorted(row))\n        if sorted_row not in seen:\n            seen.add(sorted_row)\n            result.add(sorted_row)\n    return result"
  },
  {
    "id": 43,
    "response": "import re\n\ndef text_match_wordz_middle(s):\n    if re.search(r'(?<!^)z(?!$)', s):\n        return 'Found a match!'\n    else:\n        return 'Not matched!'"
  },
  {
    "id": 44,
    "response": "def reverse_Array_Upto_K(lst, n):\n    return lst[:n][::-1] + lst[n:]"
  },
  {
    "id": 45,
    "response": "def find_k_product(lst, n):\n    product = 1\n    for t in lst:\n        product *= t[n]\n    return product"
  },
  {
    "id": 46,
    "response": "def No_of_cubes(n, k):\n    return (n - k + 1) ** 3"
  },
  {
    "id": 47,
    "response": "def split_upperstring(s):\n    result = []\n    current_word = ''\n    for char in s:\n        if char.isupper():\n            if current_word:\n                result.append(current_word)\n                current_word = ''\n            current_word = char\n        else:\n            current_word += char\n    if current_word:\n        result.append(current_word)\n    return result"
  },
  {
    "id": 48,
    "response": "def exchange_elements(lst):\n    lst = lst.copy()\n    for i in range(0, len(lst), 2):\n        lst[i], lst[i+1] = lst[i+1], lst[i]\n    return lst"
  },
  {
    "id": 49,
    "response": "def sum_Range_list(lst, n, n2):\n    if n > n2:\n        return 0\n    if n < 0 or n2 >= len(lst):\n        return 0\n    return sum(lst[n:n2+1])"
  },
  {
    "id": 50,
    "response": "def are_Equal(lst, lst2, n, n2):\n    if n != n2:\n        return False\n    for i in range(n):\n        if lst[i] != lst2[i]:\n            return False\n    return True"
  },
  {
    "id": 51,
    "response": "def check_subset(tup, tup2):\n    return set(tup2).issubset(set(tup))"
  },
  {
    "id": 52,
    "response": "def matrix_to_list(lst):\n    transposed = [tuple(row) for row in zip(*lst)]\n    return str(transposed)"
  },
  {
    "id": 53,
    "response": "from collections import defaultdict\n\ndef grouping_dictionary(lst):\n    grouped = defaultdict(list)\n    for key, value in lst:\n        grouped[key].append(value)\n    return dict(grouped)"
  },
  {
    "id": 54,
    "response": "def rectangle_perimeter(n, n2):\n    return 2 * (n + n2)"
  },
  {
    "id": 55,
    "response": "def fifth_Power_Sum(n):\n    total = 0\n    for i in range(1, n+1):\n        total += i ** 5\n    return total"
  },
  {
    "id": 56,
    "response": "def find_Min_Sum(lst, lst2, n):\n    lst.sort()\n    lst2.sort()\n    total = 0\n    for i in range(n):\n        total += abs(lst[i] - lst2[i])\n    return total"
  },
  {
    "id": 57,
    "response": "def first_Digit(n):\n    factorial = 1\n    for i in range(1, n+1):\n        factorial *= i\n    return int(str(factorial)[0])"
  },
  {
    "id": 58,
    "response": "def max_occurrences(lst):\n    counts = {}\n    for item in lst:\n        counts[item] = counts.get(item, 0) + 1\n    max_count = max(counts.values())\n    for item in lst:\n        if counts[item] == max_count:\n            return item"
  },
  {
    "id": 59,
    "response": "def Repeat(lst):\n    count = {}\n    for num in lst:\n        count[num] = count.get(num, 0) + 1\n    result = []\n    seen = set()\n    for num in lst:\n        if count[num] > 1 and num not in seen:\n            result.append(num)\n            seen.add(num)\n    return result"
  },
  {
    "id": 60,
    "response": "def find_Points(n, n2, n3, n4):\n    a = min(n, n2)\n    b = max(n, n2)\n    c = min(n3, n4)\n    d = max(n3, n4)\n    return (min(a, c), max(b, d))"
  },
  {
    "id": 61,
    "response": ""
  },
  {
    "id": 62,
    "response": "def sorted_dict(dct):\n    sorted_dct = {}\n    for key in dct:\n        sorted_list = sorted(dct[key])\n        sorted_dct[key] = sorted_list\n    return sorted_dct"
  },
  {
    "id": 63,
    "response": "def find_max_val(n, n2, n3):\n    x = n2\n    y = n3\n    if y >= x:\n        return -1\n    if n < y:\n        return -1\n    remainder = (n - y) % x\n    return n - remainder"
  },
  {
    "id": 64,
    "response": "def average_Even(n):\n    if n < 2:\n        return 0\n    count = n // 2\n    sum_even = count * (count + 1)\n    return sum_even // count"
  },
  {
    "id": 65,
    "response": "def move_last(lst):\n    if not lst:\n        return lst\n    return lst[1:] + [lst[0]]"
  },
  {
    "id": 66,
    "response": "def count_char(s, s2):\n    if not s2:\n        return 0\n    return s.count(s2)"
  },
  {
    "id": 67,
    "response": "def Check_Vow(s, s2):\n    count = 0\n    for char in s:\n        if char in s2:\n            count += 1\n    return count"
  },
  {
    "id": 68,
    "response": "import re\n\ndef replace(s, s2):\n    return re.sub(r'(?:' + re.escape(s2) + ')+', s2, s)"
  },
  {
    "id": 69,
    "response": "import re\n\ndef check_IP(s):\n    pattern = r'^((25[0-5]|2[0-4][0-9]|1[0-9]{2}|[1-9][0-9]|[0-9])\\.){3}(25[0-5]|2[0-4][0-9]|1[0-9]{2}|[1-9][0-9]|[0-9])$'\n    if re.fullmatch(pattern, s):\n        return 'Valid IP address'\n    else:\n        return 'Invalid IP address'"
  },
  {
    "id": 70,
    "response": "def decreasing_trend(lst):\n    for i in range(len(lst) - 1):\n        if lst[i] > lst[i+1]:\n            return False\n    return True"
  },
  {
    "id": 71,
    "response": "def set_Right_most_Unset_Bit(n):\n    return n + (n & -n)"
  },
  {
    "id": 72,
    "response": "def max_of_three(n, n2, n3):\n    return max(n, n2, n3)"
  },
  {
    "id": 73,
    "response": "def convert(lst):\n    return int(''.join(map(str, lst)))"
  },
  {
    "id": 74,
    "response": "def remove_duplicate(s):\n    words = s.split()\n    seen = set()\n    result = []\n    for word in words:\n        if word not in seen:\n            seen.add(word)\n            result.append(word)\n    return ' '.join(result)"
  },
  {
    "id": 75,
    "response": "def sum_nums(n, n2, n3, n4):\n    total = n + n2\n    if n3 <= total <= n4:\n        return 20\n    return total"
  },
  {
    "id": 76,
    "response": "import re\n\ndef remove_extra_char(s):\n    return re.sub(r'[^a-zA-Z0-9]', '', s)"
  },
  {
    "id": 77,
    "response": "def validity_triangle(n, n2, n3):\n    if n <= 0 or n2 <= 0 or n3 <= 0:\n        return False\n    return (n + n2 > n3) and (n + n3 > n2) and (n2 + n3 > n)"
  },
  {
    "id": 78,
    "response": "def remove_spaces(s):\n    return s.replace(\" \", \"\")"
  },
  {
    "id": 79,
    "response": "def access_key(dct, n):\n    keys = sorted(dct.keys())\n    return keys[n]"
  },
  {
    "id": 80,
    "response": "def increasing_trend(lst):\n    for i in range(len(lst) - 1):\n        if lst[i] >= lst[i+1]:\n            return False\n    return True"
  },
  {
    "id": 81,
    "response": "def smallest_Divisor(n):\n    if n <= 1:\n        return 1\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return i\n    return n"
  },
  {
    "id": 82,
    "response": "def mul_list(lst, lst2):\n    return list(map(lambda x, y: x * y, lst, lst2))"
  },
  {
    "id": 83,
    "response": "import math\n\ndef sum_Square(n):\n    for a in range(int(math.isqrt(n)) + 1):\n        b_squared = n - a*a\n        if b_squared < 0:\n            continue\n        b = math.isqrt(b_squared)\n        if b*b == b_squared:\n            return True\n    return False"
  },
  {
    "id": 84,
    "response": ""
  },
  {
    "id": 85,
    "response": "def sum_Of_Primes(n):\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num**0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n    \n    total = 0\n    for i in range(2, n + 1):\n        if is_prime(i):\n            total += i\n    return total"
  },
  {
    "id": 86,
    "response": "def freq_element(tup):\n    freq = {}\n    for element in tup:\n        if element in freq:\n            freq[element] += 1\n        else:\n            freq[element] = 1\n    return str(freq)"
  },
  {
    "id": 87,
    "response": "def recur_gcd(n, n2):\n    if n2 == 0:\n        return n\n    else:\n        return recur_gcd(n2, n % n2)"
  },
  {
    "id": 88,
    "response": "import math\n\ndef len_complex(n, n2):\n    return math.sqrt(n**2 + n2**2)"
  },
  {
    "id": 89,
    "response": "def min_jumps(lst, n):\n    if n <= 1:\n        return 0\n    if lst[0] == 0:\n        return -1\n    jumps = 0\n    current_end = 0\n    farthest = 0\n    for i in range(n):\n        farthest = max(farthest, i + lst[i])\n        if i == current_end and i != n - 1:\n            jumps += 1\n            current_end = farthest\n            if current_end >= n - 1:\n                break\n    return jumps if farthest >= n - 1 else -1"
  },
  {
    "id": 90,
    "response": "def mul_consecutive_nums(lst):\n    result = []\n    for i in range(len(lst) - 1):\n        result.append(lst[i] * lst[i + 1])\n    return result"
  },
  {
    "id": 91,
    "response": "def group_element(lst):\n    grouped = {}\n    for item in lst:\n        key = item[1]\n        value = item[0]\n        if key not in grouped:\n            grouped[key] = [value]\n        else:\n            grouped[key].append(value)\n    return grouped"
  },
  {
    "id": 92,
    "response": "def last_Two_Digits(n):\n    if n >= 20:\n        return 0\n    result = 1\n    for i in range(1, n+1):\n        result *= i\n    return result % 100"
  },
  {
    "id": 93,
    "response": "import re\n\ndef remove_multiple_spaces(s):\n    return re.sub(r'\\\\s+', ' ', s).strip()"
  },
  {
    "id": 94,
    "response": "def extract_unique(dct):\n    seen = set()\n    result = []\n    for lst in dct.values():\n        for item in lst:\n            if item not in seen:\n                seen.add(item)\n                result.append(item)\n    return result"
  },
  {
    "id": 95,
    "response": "def check_greater(tup, tup2):\n    for a, b in zip(tup, tup2):\n        if b <= a:\n            return False\n    return True"
  },
  {
    "id": 96,
    "response": "def zip_list(lst, lst2):\n    result = []\n    for i in range(min(len(lst), len(lst2))):\n        combined = lst[i] + lst2[i]\n        result.append(combined)\n    return result"
  },
  {
    "id": 97,
    "response": "def count_even(lst):\n    return len(list(filter(lambda x: x % 2 == 0, lst)))"
  },
  {
    "id": 98,
    "response": "def sort_dict_item(dct):\n    sorted_items = sorted(dct.items(), key=lambda x: x[0])\n    return dict(sorted_items)"
  },
  {
    "id": 99,
    "response": "def min_Swaps(s, s2):\n    if len(s) != len(s2):\n        return \"Not Possible\"\n    diff = 0\n    for a, b in zip(s, s2):\n        if a != b:\n            diff += 1\n    if diff % 2 != 0:\n        return \"Not Possible\"\n    return diff // 2"
  },
  {
    "id": 100,
    "response": "def count_range_in_list(lst, n, n2):\n    count = 0\n    for element in lst:\n        if n <= element <= n2:\n            count += 1\n    return count"
  },
  {
    "id": 101,
    "response": "def equilibrium_index(lst):\n    total_sum = sum(lst)\n    left_sum = 0\n    for i in range(len(lst)):\n        if left_sum == total_sum - left_sum - lst[i]:\n            return i\n        left_sum += lst[i]\n    return -1"
  },
  {
    "id": 102,
    "response": "def removals(lst, n, n2):\n    count = 0\n    for num in lst:\n        if num < n or num > n2:\n            count += 1\n    return count"
  },
  {
    "id": 103,
    "response": "def is_key_present(dct, n):\n    return n in dct"
  },
  {
    "id": 104,
    "response": "def harmonic_sum(n):\n    total = 0.0\n    for i in range(1, n):\n        total += 1.0 / i\n    return total"
  },
  {
    "id": 105,
    "response": "def sort_sublists(lst):\n    return sorted(lst, key=lambda x: (len(x), x))"
  },
  {
    "id": 106,
    "response": "def is_subset(lst, n, lst2, n2):\n    set_lst = set(lst)\n    for element in lst2:\n        if element not in set_lst:\n            return False\n    return True"
  },
  {
    "id": 107,
    "response": "def count_Set_Bits(n):\n    count = 0\n    k = 0\n    while (1 << k) <= n:\n        power = 1 << k\n        next_power = 1 << (k + 1)\n        full_cycles = (n + 1) // next_power\n        count += full_cycles * power\n        remainder = (n + 1) % next_power\n        count += max(0, remainder - power)\n        k += 1\n    return count"
  },
  {
    "id": 108,
    "response": "def Convert(s):\n    return s.split()"
  },
  {
    "id": 109,
    "response": "def get_unique(lst):\n    counts = {}\n    for t in lst:\n        for item in t:\n            if item in counts:\n                counts[item] += 1\n            else:\n                counts[item] = 1\n    return counts"
  },
  {
    "id": 110,
    "response": "def front_and_rear(tup):\n    return (tup[0], tup[-1])"
  },
  {
    "id": 111,
    "response": "def product_Equal(n):\n    digits = list(map(int, str(n)))\n    product = 1\n    for d in digits:\n        product *= d\n    sum_digits = sum(digits)\n    return product % 2 == 0 and sum_digits % 2 == 1"
  },
  {
    "id": 112,
    "response": "def remove_duplicate(lst):\n    seen = set()\n    result = []\n    for item in lst:\n        if isinstance(item, list):\n            item_tuple = tuple(item)\n            if item_tuple not in seen:\n                seen.add(item_tuple)\n                result.append(item)\n        else:\n            if item not in seen:\n                seen.add(item)\n                result.append(item)\n    return result"
  },
  {
    "id": 113,
    "response": "def check_valid(tup):\n    for element in tup:\n        if not isinstance(element, bool):\n            return False\n    return True"
  },
  {
    "id": 114,
    "response": "def count_Fac(n):\n    if n == 1:\n        return 0\n    count = 0\n    while n % 2 == 0:\n        count += 1\n        n //= 2\n    i = 3\n    while i * i <= n:\n        while n % i == 0:\n            count += 1\n            n //= i\n        i += 2\n    if n > 1:\n        count += 1\n    return count - 1"
  },
  {
    "id": 115,
    "response": "def str_to_tuple(s):\n    s = s.strip('\\\"')\n    elements = s.split(',')\n    numbers = [int(num.strip()) for num in elements]\n    return tuple(numbers)"
  },
  {
    "id": 116,
    "response": "def rombus_perimeter(n):\n    return 4 * n"
  },
  {
    "id": 117,
    "response": "import math\n\ndef sd_calc(lst):\n    if len(lst) == 0:\n        return 0\n    mean = sum(lst) / len(lst)\n    squared_diffs = [(x - mean) ** 2 for x in lst]\n    variance = sum(squared_diffs) / len(lst)\n    return math.sqrt(variance)"
  },
  {
    "id": 118,
    "response": "def alternate_elements(lst):\n    return lst[::2]"
  },
  {
    "id": 119,
    "response": "import re\n\ndef text_match(s):\n    pattern = r'ab*'\n    if re.search(pattern, s):\n        return 'Found a match!'\n    else:\n        return 'Not matched!'"
  },
  {
    "id": 120,
    "response": "def add_dict_to_tuple(tup, dct):\n    return tup + (dct,)"
  },
  {
    "id": 121,
    "response": "def maxAverageOfPath(lst, n):\n    dp = [[0]*n for _ in range(n)]\n    dp[0][0] = lst[0][0]\n    \n    for j in range(1, n):\n        dp[0][j] = dp[0][j-1] + lst[0][j]\n    \n    for i in range(1, n):\n        dp[i][0] = dp[i-1][0] + lst[i][0]\n    \n    for i in range(1, n):\n        for j in range(1, n):\n            dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + lst[i][j]\n    \n    max_sum = dp[n-1][n-1]\n    average = max_sum / (2 * n - 1)\n    return average"
  },
  {
    "id": 122,
    "response": "def filter_data(dct, n, n2):\n    return {k: v for k, v in dct.items() if v[0] >= n and v[1] >= n2}"
  },
  {
    "id": 123,
    "response": "def count_same_pair(lst1, lst2):\n    count = 0\n    for i in range(min(len(lst1), len(lst2))):\n        if lst1[i] == lst2[i]:\n            count += 1\n    return count"
  },
  {
    "id": 124,
    "response": "def power_base_sum(n, n2):\n    result = n ** n2\n    return sum(int(digit) for digit in str(result))"
  },
  {
    "id": 125,
    "response": "import re\n\ndef extract_quotation(s):\n    # Use regex to find all quoted strings, either single or double quotes\n    # The pattern matches either \"...\" or '...' and captures the content inside\n    matches = re.findall(r'[\"\\']([^\"\\']*)[\"\\']', s)\n    return matches"
  },
  {
    "id": 126,
    "response": "def multiply_elements(tup):\n    result = []\n    for i in range(len(tup) - 1):\n        result.append(tup[i] * tup[i+1])\n    return tuple(result)"
  },
  {
    "id": 127,
    "response": "import re\n\ndef remove_char(s):\n    return re.sub(r'[^a-zA-Z0-9]', '', s)"
  },
  {
    "id": 128,
    "response": "def sum_list(lst, lst2):\n    if len(lst) != len(lst2):\n        raise ValueError(\"Both lists must have the same length.\")\n    return [x + y for x, y in zip(lst, lst2)]"
  },
  {
    "id": 129,
    "response": "def add_list(lst, lst2):\n    return list(map(lambda pair: pair[0] + pair[1], zip(lst, lst2)))"
  },
  {
    "id": 130,
    "response": "def consecutive_duplicates(lst):\n    if not lst:\n        return []\n    result = [lst[0]]\n    for item in lst[1:]:\n        if item != result[-1]:\n            result.append(item)\n    return result"
  },
  {
    "id": 131,
    "response": "import math\n\ndef lateralsurface_cone(n, n2):\n    radius = n\n    height = n2\n    slant_height = math.sqrt(radius**2 + height**2)\n    return math.pi * radius * slant_height"
  },
  {
    "id": 132,
    "response": "def replace_specialchar(s):\n    result = \"\"\n    for char in s:\n        if char in [' ', ',', '.']:\n            result += ':'\n        else:\n            result += char\n    return result"
  },
  {
    "id": 133,
    "response": "def find_first_occurrence(lst, n):\n    for i in range(len(lst)):\n        if lst[i] == n:\n            return i\n    return -1"
  },
  {
    "id": 134,
    "response": "def sum_Of_Subarray_Prod(lst, n):\n    total = 0\n    for i in range(n):\n        product = 1\n        for j in range(i, n):\n            product *= lst[j]\n            total += product\n    return total"
  },
  {
    "id": 135,
    "response": "def toggle_middle_bits(n):\n    bits = n.bit_length()\n    if bits < 2:\n        return n\n    mask = ((1 << (bits - 2)) - 1) << 1\n    return n ^ mask"
  },
  {
    "id": 136,
    "response": "def left_insertion(lst, n):\n    for i in range(len(lst)):\n        if lst[i] >= n:\n            return i\n    return len(lst)"
  },
  {
    "id": 137,
    "response": "def check_str(s):\n    if not s:\n        return \"Invalid\"\n    first_char = s[0]\n    vowels = {'a', 'e', 'i', 'o', 'u'}\n    if first_char.lower() in vowels:\n        return \"Valid\"\n    else:\n        return \"Invalid\""
  },
  {
    "id": 138,
    "response": "def geometric_sum(n):\n    return 2 * (1 - (1/2)**(n-1))"
  },
  {
    "id": 139,
    "response": "import math\n\ndef find_Index(n):\n    def triangular(k):\n        return k * (k + 1) // 2\n\n    def count_digits(x):\n        if x == 0:\n            return 1\n        return math.floor(math.log10(x)) + 1\n\n    low = 1\n    high = 10**n\n    while low < high:\n        mid = (low + high) // 2\n        t = triangular(mid)\n        digits = count_digits(t)\n        if digits < n:\n            low = mid + 1\n        elif digits > n:\n            high = mid\n        else:\n            high = mid\n    return low"
  },
  {
    "id": 140,
    "response": "def tuple_to_dict(tup):\n    result = {}\n    for i in range(0, len(tup), 2):\n        if i + 1 < len(tup):\n            result[tup[i]] = tup[i + 1]\n    return result"
  },
  {
    "id": 141,
    "response": "def all_Characters_Same(s):\n    if not s:\n        return True\n    first_char = s[0]\n    for char in s[1:]:\n        if char != first_char:\n            return False\n    return True"
  },
  {
    "id": 142,
    "response": "import math\n\ndef area_tetrahedron(n):\n    return math.sqrt(3) * (n ** 2)"
  },
  {
    "id": 143,
    "response": ""
  },
  {
    "id": 144,
    "response": "def check_none(tup):\n    for element in tup:\n        if element is None:\n            return True\n    return False"
  },
  {
    "id": 145,
    "response": "def divisible_by_digits(n, n2):\n    result = []\n    if n > n2:\n        return result\n    for num in range(n, n2 + 1):\n        if '0' in str(num):\n            continue\n        divisible = True\n        for digit in str(num):\n            if num % int(digit) != 0:\n                divisible = False\n                break\n        if divisible:\n            result.append(num)\n    return result"
  },
  {
    "id": 146,
    "response": "def sector_area(n, n2):\n    if n2 == 360:\n        return None\n    pi = 22 / 7\n    return (n**2 * n2 * pi) / 360"
  },
  {
    "id": 147,
    "response": "def lcs_of_three(s, s2, s3, n, n2, n3):\n    dp = [[[0]*(n3+1) for _ in range(n2+1)] for _ in range(n+1)]\n    \n    for i in range(1, n+1):\n        for j in range(1, n2+1):\n            for k in range(1, n3+1):\n                if s[i-1] == s2[j-1] == s3[k-1]:\n                    dp[i][j][k] = 1 + dp[i-1][j-1][k-1]\n                else:\n                    dp[i][j][k] = max(dp[i-1][j][k], dp[i][j-1][k], dp[i][j][k-1])\n    \n    return dp[n][n2][n3]"
  },
  {
    "id": 148,
    "response": "def capital_words_spaces(s):\n    if not s:\n        return s\n    result = [s[0]]\n    for char in s[1:]:\n        if char.isupper():\n            result.append(' ')\n            result.append(char)\n        else:\n            result.append(char)\n    return ''.join(result)"
  },
  {
    "id": 149,
    "response": "def sort_numeric_strings(lst):\n    numeric_list = [int(s) for s in lst]\n    numeric_list.sort()\n    return numeric_list"
  },
  {
    "id": 150,
    "response": "def add_tuple(lst, tup):\n    lst.extend(tup)\n    return lst"
  },
  {
    "id": 151,
    "response": "def check_min_heap(lst, n):\n    if n <= 1:\n        return True\n    for i in range(n // 2):\n        left = 2 * i + 1\n        right = 2 * i + 2\n        if left < n and lst[i] > lst[left]:\n            return False\n        if right < n and lst[i] > lst[right]:\n            return False\n    return True"
  },
  {
    "id": 152,
    "response": "def jacobsthal_num(n):\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    jacobsthal = [0, 1]\n    for i in range(2, n + 1):\n        jacobsthal.append(jacobsthal[i-1] + 2 * jacobsthal[i-2])\n    return jacobsthal[n]"
  },
  {
    "id": 153,
    "response": "def min_k(lst, n):\n    sorted_lst = sorted(lst, key=lambda x: x[1])\n    return sorted_lst[:n]"
  },
  {
    "id": 154,
    "response": "def extract_index_list(lst, lst2, lst3):\n    common_elements = set(lst) & set(lst2) & set(lst3)\n    indices = []\n    for i, val in enumerate(lst):\n        if val in common_elements:\n            indices.append(i)\n    return indices"
  },
  {
    "id": 155,
    "response": "def second_smallest(lst):\n    if len(lst) < 2:\n        return None\n    unique = sorted(set(lst))\n    if len(unique) < 2:\n        return None\n    return unique[1]"
  },
  {
    "id": 156,
    "response": "def text_match_zero_one(s):\n    for char in s:\n        if char == '0' or char == 'b':\n            return 'Found a match!'\n    return 'Not matched!'"
  },
  {
    "id": 157,
    "response": "def count_reverse_pairs(lst):\n    seen = set()\n    count = 0\n    for s in lst:\n        reversed_s = s[::-1]\n        if reversed_s in seen:\n            count +=1\n        seen.add(s)\n    return str(count)"
  },
  {
    "id": 158,
    "response": "def unique_sublists(lst):\n    count = {}\n    for sublist in lst:\n        key = tuple(sublist)\n        if key in count:\n            count[key] += 1\n        else:\n            count[key] = 1\n    return count"
  },
  {
    "id": 159,
    "response": "import re\n\ndef is_decimal(s):\n    s = s.strip()\n    pattern = r'^[+-]?\\d+\\.\\d{2}$'\n    return bool(re.match(pattern, s))"
  },
  {
    "id": 160,
    "response": "from collections import Counter\n\ndef unique_Element(lst, n):\n    freq = Counter(lst)\n    unique_count = sum(1 for count in freq.values() if count == 1)\n    return 'YES' if unique_count == 1 else 'NO'"
  },
  {
    "id": 161,
    "response": "import math\n\ndef arc_length(n, n2):\n    if n2 < 0 or n2 >= 360:\n        return None\n    return (n2 / 360) * math.pi * n"
  },
  {
    "id": 162,
    "response": "def check_monthnumber_number(n):\n    return n in {4, 6, 9, 11}"
  },
  {
    "id": 163,
    "response": "def find_Min_Diff(tup, n):\n    sorted_tup = sorted(tup)\n    min_diff = float('inf')\n    for i in range(n - 1):\n        diff = sorted_tup[i + 1] - sorted_tup[i]\n        if diff < min_diff:\n            min_diff = diff\n    return min_diff"
  },
  {
    "id": 164,
    "response": "def number_ctr(s):\n    count = 0\n    for char in s:\n        if char.isdigit():\n            count += 1\n    return count"
  },
  {
    "id": 165,
    "response": "def is_polite(n):\n    count = 0\n    m = 1\n    while True:\n        if not (m > 0 and (m & (m - 1)) == 0):\n            count += 1\n            if count == n:\n                return m\n        m += 1"
  },
  {
    "id": 166,
    "response": "def pair_wise(lst):\n    result = []\n    for i in range(len(lst) - 1):\n        result.append((lst[i], lst[i+1]))\n    return result"
  },
  {
    "id": 167,
    "response": "def get_Pairs_Count(lst, n, n2):\n    count = 0\n    for i in range(len(lst)):\n        for j in range(i + 1, len(lst)):\n            if lst[i] + lst[j] == n or lst[i] + lst[j] == n2:\n                count += 1\n    return count"
  },
  {
    "id": 168,
    "response": "def check_Odd_Parity(n):\n    ones_count = bin(n).count('1')\n    return ones_count % 2 == 1"
  },
  {
    "id": 169,
    "response": "def Diff(lst, lst2):\n    set2 = set(lst2)\n    result = []\n    for item in lst:\n        if item not in set2:\n            result.append(item)\n    for item in lst2:\n        if item not in set(lst):\n            result.append(item)\n    return result"
  },
  {
    "id": 170,
    "response": "def odd_Num_Sum(n):\n    total = 0\n    for i in range(1, n + 1):\n        odd_num = 2 * i - 1\n        total += odd_num ** 4\n    return total"
  },
  {
    "id": 171,
    "response": "def check_expression(s):\n    stack = []\n    brackets = {'(': ')', '[': ']', '{': '}'}\n    for char in s:\n        if char in brackets:\n            stack.append(char)\n        elif char in brackets.values():\n            if not stack:\n                return False\n            top = stack.pop()\n            if brackets.get(top) != char:\n                return False\n    return not stack"
  },
  {
    "id": 172,
    "response": "def remove_length(s, n):\n    words = s.split()\n    filtered = [word for word in words if len(word) != n]\n    return ' '.join(filtered)"
  },
  {
    "id": 173,
    "response": "def occurance_substring(s, s2):\n    start = s.find(s2)\n    if start == -1:\n        return None\n    end = start + len(s2)\n    return (s2, start, end)"
  },
  {
    "id": 174,
    "response": "def check_email(s):\n    if not s:\n        return 'Invalid Email'\n    if s.count('@') != 1:\n        return 'Invalid Email'\n    local, domain = s.split('@')\n    if ' ' in local or ' ' in domain:\n        return 'Invalid Email'\n    if '.' not in domain:\n        return 'Invalid Email'\n    if domain.startswith('.') or domain.endswith('.'):\n        return 'Invalid Email'\n    return 'Valid Email'"
  },
  {
    "id": 175,
    "response": "def odd_position(lst):\n    for index, value in enumerate(lst):\n        if index % 2 == 1 and value % 2 == 1:\n            return True\n    return False"
  },
  {
    "id": 176,
    "response": "def count_vowels(s):\n    vowels = {'a', 'e', 'i', 'o', 'u'}\n    count = 0\n    for char in s:\n        if char in vowels:\n            count += 1\n    return count"
  },
  {
    "id": 177,
    "response": "def find_Sum(lst, n):\n    freq = {}\n    for num in lst:\n        freq[num] = freq.get(num, 0) + 1\n    total = 0\n    for num in lst:\n        if freq[num] == 1:\n            total += num\n    return total"
  },
  {
    "id": 178,
    "response": "def pack_consecutive_duplicates(lst):\n    if not lst:\n        return []\n    result = []\n    current_group = [lst[0]]\n    for element in lst[1:]:\n        if element == current_group[-1]:\n            current_group.append(element)\n        else:\n            result.append(current_group)\n            current_group = [element]\n    result.append(current_group)\n    return result"
  },
  {
    "id": 179,
    "response": "def unique_sublists(lst):\n    count = {}\n    for sublist in lst:\n        tuple_sublist = tuple(sublist)\n        if tuple_sublist in count:\n            count[tuple_sublist] += 1\n        else:\n            count[tuple_sublist] = 1\n    return count"
  },
  {
    "id": 180,
    "response": "import itertools\n\ndef find_combinations(lst):\n    result = []\n    for pair in itertools.combinations(lst, 2):\n        summed = tuple(a + b for a, b in zip(pair[0], pair[1]))\n        result.append(summed)\n    return result"
  },
  {
    "id": 181,
    "response": "import math\n\ndef count_Divisors(n):\n    sqrt_n = math.isqrt(n)\n    if sqrt_n * sqrt_n == n:\n        return \"Odd\"\n    else:\n        return \"Even\""
  },
  {
    "id": 182,
    "response": "def Odd_Length_Sum(lst):\n    total = 0\n    n = len(lst)\n    for i in range(n):\n        for j in range(i, n):\n            length = j - i + 1\n            if length % 2 == 1:\n                sub_sum = sum(lst[i:j+1])\n                total += sub_sum\n    return total"
  },
  {
    "id": 183,
    "response": "def rgb_to_hsv(r, g, b):\n    r_norm = r / 255.0\n    g_norm = g / 255.0\n    b_norm = b / 255.0\n\n    max_val = max(r_norm, g_norm, b_norm)\n    min_val = min(r_norm, g_norm, b_norm)\n    delta = max_val - min_val\n\n    value = max_val * 100\n\n    if max_val == 0:\n        saturation = 0.0\n    else:\n        saturation = (delta / max_val) * 100\n\n    if delta == 0:\n        hue = 0.0\n    else:\n        if max_val == r_norm:\n            hue = ((g_norm - b_norm) / delta) % 6\n        elif max_val == g_norm:\n            hue = ((b_norm - r_norm) / delta) + 2\n        else:\n            hue = ((r_norm - g_norm) / delta) + 4\n        hue *= 60\n\n    hue = hue % 360\n\n    return (hue, saturation, value)"
  },
  {
    "id": 184,
    "response": "def mul_even_odd(lst):\n    first_even = None\n    first_odd = None\n    for num in lst:\n        if num % 2 == 0:\n            if first_even is None:\n                first_even = num\n        else:\n            if first_odd is None:\n                first_odd = num\n        if first_even is not None and first_odd is not None:\n            break\n    if first_even is None or first_odd is None:\n        return 0\n    return first_even * first_odd"
  },
  {
    "id": 185,
    "response": "def tuple_str_int(s):\n    s = s.strip('()')\n    elements = [e.strip() for e in s.split(',')]\n    return tuple(int(e) for e in elements)"
  },
  {
    "id": 186,
    "response": "def right_insertion(lst, n):\n    for i in range(len(lst)):\n        if lst[i] > n:\n            return i\n    return len(lst)"
  },
  {
    "id": 187,
    "response": "import re\n\ndef text_match_three(s):\n    pattern = r'ab{3}'\n    if re.search(pattern, s):\n        return 'Found a match!'\n    else:\n        return 'Not matched!'"
  },
  {
    "id": 188,
    "response": "def new_tuple(lst, s):\n    return tuple(lst) + (s,)"
  },
  {
    "id": 189,
    "response": "def perimeter_polygon(n, n2):\n    return n * n2"
  },
  {
    "id": 190,
    "response": "def even_position(lst):\n    for i in range(len(lst)):\n        if i % 2 == 0 and lst[i] % 2 != 0:\n            return False\n    return True"
  },
  {
    "id": 191,
    "response": "def remove_nested(tup):\n    result = []\n    for element in tup:\n        if isinstance(element, tuple):\n            result.append(remove_nested(element))\n        else:\n            result.append(element)\n    return tuple(result)"
  },
  {
    "id": 192,
    "response": "def count_list(lst):\n    return len(lst)"
  },
  {
    "id": 193,
    "response": "def last(lst, n, n2):\n    for i in reversed(range(len(lst))):\n        if lst[i] == n:\n            return i\n    return -1"
  },
  {
    "id": 194,
    "response": "import re\n\ndef text_starta_endb(s):\n    pattern = r'^.*a.*b$'\n    if re.search(pattern, s):\n        return 'Found a match!'\n    else:\n        return 'Not matched!'"
  },
  {
    "id": 195,
    "response": "def cheap_items(lst, n):\n    if not lst or n <= 0:\n        return []\n    sorted_items = sorted(lst, key=lambda x: x['price'])\n    return sorted_items[:n]"
  },
  {
    "id": 196,
    "response": "def return_sum(dct):\n    return sum(dct.values())"
  },
  {
    "id": 197,
    "response": "def sum_in_Range(l, r):\n    start = min(l, r)\n    end = max(l, r)\n    total = 0\n    for num in range(start, end + 1):\n        if num % 2 != 0:\n            total += num\n    return total"
  },
  {
    "id": 198,
    "response": "def _sum(lst):\n    return sum(lst)"
  },
  {
    "id": 199,
    "response": "def left_Rotate(n, n2):\n    return n << n2"
  },
  {
    "id": 200,
    "response": "def remove_all_spaces(s):\n    return s.replace(' ', '')"
  },
  {
    "id": 201,
    "response": "def test_three_equal(n, n2, n3):\n    if n == n2 == n3:\n        return 3\n    elif n == n2 or n == n3 or n2 == n3:\n        return 2\n    else:\n        return 0"
  },
  {
    "id": 202,
    "response": "def count_Rotation(lst, n):\n    if n == 0:\n        return 0\n    for i in range(n):\n        if lst[i] > lst[i+1]:\n            return i + 1\n    return 0"
  },
  {
    "id": 203,
    "response": "import math\n\ndef is_Perfect_Square(n):\n    if n < 0:\n        return False\n    root = math.isqrt(n)\n    return root * root == n"
  },
  {
    "id": 204,
    "response": "def is_Product_Even(lst, n):\n    if n == 0:\n        return False\n    for i in range(n):\n        if lst[i] % 2 == 0:\n            return True\n    return False"
  },
  {
    "id": 205,
    "response": "def max_sum_list(lst):\n    if not lst:\n        return []\n    max_sum = sum(lst[0])\n    result = lst[0]\n    for sublist in lst[1:]:\n        current_sum = sum(sublist)\n        if current_sum > max_sum:\n            max_sum = current_sum\n            result = sublist\n    return result"
  },
  {
    "id": 206,
    "response": "def max_run_uppercase(s):\n    max_count = 0\n    current_count = 0\n    for char in s:\n        if char.isupper():\n            current_count += 1\n            if current_count > max_count:\n                max_count = current_count\n        else:\n            current_count = 0\n    return max_count"
  },
  {
    "id": 207,
    "response": "def first_odd(lst):\n    for num in lst:\n        if num % 2 != 0:\n            return num\n    return None"
  },
  {
    "id": 208,
    "response": "def check_K(tup, n):\n    return n in tup"
  },
  {
    "id": 209,
    "response": "def check_smaller(tup, tup2):\n    for t, t2 in zip(tup, tup2):\n        if t2 >= t:\n            return False\n    return True"
  },
  {
    "id": 210,
    "response": "def count_variable(n, n2, n3, n4):\n    result = []\n    if n > 0:\n        result.extend(['p'] * n)\n    if n2 > 0:\n        result.extend(['q'] * n2)\n    if n3 > 0:\n        result.extend(['r'] * n3)\n    if n4 > 0:\n        result.extend(['s'] * n4)\n    return result"
  },
  {
    "id": 211,
    "response": "def check_identical(lst, lst2):\n    if len(lst) != len(lst2):\n        return False\n    for t1, t2 in zip(lst, lst2):\n        if t1 != t2:\n            return False\n    return True"
  },
  {
    "id": 212,
    "response": "def road_rd(s):\n    return s.replace('Road', 'Rd.').replace('road', 'Rd.')"
  },
  {
    "id": 213,
    "response": "def string_length(s):\n    return len(s)"
  },
  {
    "id": 214,
    "response": "def rombus_area(n, n2):\n    return (n * n2) // 2"
  },
  {
    "id": 215,
    "response": "def sort_by_dnf(lst, n):\n    count_0 = lst.count(0)\n    count_1 = lst.count(1)\n    count_2 = lst.count(2)\n    result = [0] * count_0 + [1] * count_1 + [2] * count_2\n    return result"
  },
  {
    "id": 216,
    "response": "def clear_tuple(tup):\n    return ()"
  },
  {
    "id": 217,
    "response": "def div_of_nums(lst, n, n2):\n    return list(filter(lambda x: x % n == 0 or x % n2 == 0, lst))"
  },
  {
    "id": 218,
    "response": "def lower_ctr(s):\n    count = 0\n    for char in s:\n        if char.islower():\n            count += 1\n    return count"
  },
  {
    "id": 219,
    "response": "def count_duplic(lst):\n    if not lst:\n        return ([], [])\n    result = []\n    counts = []\n    current = lst[0]\n    count = 1\n    for num in lst[1:]:\n        if num == current:\n            count += 1\n        else:\n            result.append(current)\n            counts.append(count)\n            current = num\n            count = 1\n    result.append(current)\n    counts.append(count)\n    return (result, counts)"
  },
  {
    "id": 220,
    "response": "def check_monthnum_number(n):\n    return n == 2"
  },
  {
    "id": 221,
    "response": "def merge_dictionaries(dct, dct2):\n    return {**dct, **dct2}"
  },
  {
    "id": 222,
    "response": "def pass_validity(s):\n    if len(s) < 8:\n        return False\n    has_upper = any(c.isupper() for c in s)\n    has_lower = any(c.islower() for c in s)\n    has_digit = any(c.isdigit() for c in s)\n    has_special = any(c in '!@#$%^&*()-_=+[]{}|;:,.<>?/' for c in s)\n    if not (has_upper and has_lower and has_digit and has_special):\n        return False\n    return True"
  },
  {
    "id": 223,
    "response": "def check_substring(s, s2):\n    if s.startswith(s2):\n        return 'string starts with the given substring'\n    else:\n        return 'string doesnt start with the given substring'"
  },
  {
    "id": 224,
    "response": "def remove_even(lst):\n    return [x for x in lst if x % 2 != 0]"
  },
  {
    "id": 225,
    "response": "def access_elements(lst, lst2):\n    return [lst[i] for i in lst2]"
  },
  {
    "id": 226,
    "response": "def check_Type_Of_Triangle(n, n2, n3):\n    sides = sorted([n, n2, n3])\n    a, b, c = sides\n    a_sq = a**2\n    b_sq = b**2\n    c_sq = c**2\n    if c_sq == a_sq + b_sq:\n        return \"Right-angled Triangle\"\n    elif c_sq < a_sq + b_sq:\n        return \"Acute-angled Triangle\"\n    else:\n        return \"Obtuse-angled Triangle\""
  },
  {
    "id": 227,
    "response": "def sum_column(lst, n):\n    total = 0\n    for row in lst:\n        total += row[n]\n    return total"
  },
  {
    "id": 228,
    "response": "def count_alpha_dig_spl(s):\n    alpha_count = 0\n    dig_count = 0\n    spl_count = 0\n    for char in s:\n        if char.isalpha():\n            alpha_count += 1\n        elif char.isdigit():\n            dig_count += 1\n        else:\n            spl_count += 1\n    return (alpha_count, dig_count, spl_count)"
  },
  {
    "id": 229,
    "response": "from collections import defaultdict\n\ndef second_frequent(lst):\n    frequency = defaultdict(int)\n    first_occurrence = {}\n    for index, string in enumerate(lst):\n        if string not in first_occurrence:\n            first_occurrence[string] = index\n        frequency[string] += 1\n    items = [(frequency[string], first_occurrence[string], string) for string in frequency]\n    items.sort(key=lambda x: (-x[0], x[1]))\n    return items[1][2]"
  },
  {
    "id": 230,
    "response": "import math\n\ndef round_up(n, n2):\n    factor = 10 ** n2\n    return math.ceil(n * factor) / factor"
  },
  {
    "id": 231,
    "response": "def count_Pairs(lst, n):\n    from collections import Counter\n    freq = Counter(lst)\n    total_pairs = 0\n    for count in freq.values():\n        total_pairs += count * (count - 1) // 2\n    return total_pairs"
  },
  {
    "id": 232,
    "response": "import re\n\ndef extract_max(s):\n    numbers = re.findall(r'\\d+', s)\n    return max(int(num) for num in numbers) if numbers else 0"
  },
  {
    "id": 233,
    "response": "def get_key(dct):\n    return list(dct.keys())"
  },
  {
    "id": 234,
    "response": "def generate_matrix(n):\n    matrix = [[0]*n for _ in range(n)]\n    directions = [(0,1), (1,0), (0,-1), (-1,0)]  # right, down, left, up\n    current_dir = 0\n    row, col = 0, 0\n    num = 1\n    for _ in range(n*n):\n        matrix[row][col] = num\n        num += 1\n        next_row = row + directions[current_dir][0]\n        next_col = col + directions[current_dir][1]\n        if 0 <= next_row < n and 0 <= next_col < n and matrix[next_row][next_col] == 0:\n            row, col = next_row, next_col\n        else:\n            current_dir = (current_dir + 1) % 4\n            row += directions[current_dir][0]\n            col += directions[current_dir][1]\n    return matrix"
  },
  {
    "id": 235,
    "response": "def slope(n, n2, n3, n4):\n    return (n4 - n2) / (n3 - n)"
  },
  {
    "id": 236,
    "response": "def max_sub_array_sum(lst, n):\n    max_sum = float('-inf')\n    current_sum = 0\n    max_length = 0\n    current_length = 0\n    \n    for i in range(n):\n        current_sum += lst[i]\n        current_length += 1\n        \n        if current_sum > max_sum:\n            max_sum = current_sum\n            max_length = current_length\n        elif current_sum <= 0:\n            current_sum = 0\n            current_length = 0\n    \n    return max_length"
  },
  {
    "id": 237,
    "response": "def cube_Sum(n):\n    return 2 * n**4 - n**2"
  },
  {
    "id": 238,
    "response": "def min_Swaps(s, s2):\n    count = 0\n    for a, b in zip(s, s2):\n        if a != b:\n            count += 1\n    return count // 2"
  },
  {
    "id": 239,
    "response": "def sort_tuple(lst):\n    return sorted(lst, key=lambda x: x[0])"
  },
  {
    "id": 240,
    "response": "def Check_Solution(n, n2, n3):\n    if n2 == 0 and n3 != 0:\n        return \"Yes\"\n    else:\n        return \"No\""
  },
  {
    "id": 241,
    "response": "def get_inv_count(lst, n):\n    count = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            if lst[i] > lst[j]:\n                count += 1\n    return count"
  },
  {
    "id": 242,
    "response": "def get_odd_occurence(lst, n):\n    result = 0\n    for i in range(n):\n        result ^= lst[i]\n    return result"
  },
  {
    "id": 243,
    "response": "import heapq\n\ndef nth_super_ugly_number(n, lst):\n    heap = [1]\n    seen = {1}\n    while n > 0:\n        current = heapq.heappop(heap)\n        for prime in lst:\n            new_num = current * prime\n            if new_num not in seen:\n                seen.add(new_num)\n                heapq.heappush(heap, new_num)\n        n -= 1\n    return current"
  },
  {
    "id": 244,
    "response": "def get_Number(n, k):\n    weird = [i for i in range(1, n+1) if i % 2 != 0]\n    even = [i for i in range(2, n+1) if i % 2 == 0]\n    combined = weird + even\n    return combined[k-1]"
  },
  {
    "id": 245,
    "response": "import math\n\ndef find_Digits(n):\n    if n == 0:\n        return 1\n    digits = 0\n    for i in range(1, n+1):\n        digits += math.log10(i)\n    return int(digits) + 1"
  },
  {
    "id": 246,
    "response": "def find_platform(arrival, departure, n):\n    arrival.sort()\n    departure.sort()\n    \n    platform_needed = 0\n    result = 0\n    i = j = 0\n    \n    while i < n and j < n:\n        if arrival[i] < departure[j]:\n            platform_needed += 1\n            i += 1\n            result = max(result, platform_needed)\n        else:\n            platform_needed -= 1\n            j += 1\n    \n    return result"
  },
  {
    "id": 247,
    "response": "def lcopy(lst):\n    return lst[:]"
  },
  {
    "id": 248,
    "response": "def area_trapezium(n, n2, n3):\n    return (n + n2) * n3 / 2"
  },
  {
    "id": 249,
    "response": "def Sum(n):\n    factors = set()\n    if n % 2 == 0:\n        factors.add(2)\n        while n % 2 == 0:\n            n //= 2\n    i = 3\n    while i * i <= n:\n        if n % i == 0:\n            factors.add(i)\n            while n % i == 0:\n                n //= i\n        i += 2\n    if n > 1:\n        factors.add(n)\n    return sum(factors)"
  },
  {
    "id": 250,
    "response": "def is_triangleexists(a, b, c):\n    if a <= 0 or b <= 0 or c <= 0:\n        return False\n    return (a + b > c) and (a + c > b) and (b + c > a)"
  },
  {
    "id": 251,
    "response": ""
  },
  {
    "id": 252,
    "response": "def remove_negs(lst):\n    return [x for x in lst if x >= 0]"
  },
  {
    "id": 253,
    "response": "def sum_of_odd_Factors(n):\n    # Remove all factors of 2\n    while n % 2 == 0:\n        n //= 2\n    \n    # Now n is odd, find sum of its factors\n    result = 1\n    i = 3\n    while i * i <= n:\n        # Find the exponent of i in n\n        count = 0\n        while n % i == 0:\n            n //= i\n            count += 1\n        if count > 0:\n            # Sum of powers of i: 1 + i + i^2 + ... + i^count\n            sum_powers = (i**(count + 1) - 1) // (i - 1)\n            result *= sum_powers\n        i += 2\n    \n    # If n is a prime number greater than 2\n    if n > 1:\n        result *= (1 + n)\n    \n    return result"
  },
  {
    "id": 254,
    "response": "import heapq\n\ndef raw_heap(lst):\n    heapq.heapify(lst)\n    return lst"
  },
  {
    "id": 255,
    "response": "def check_Even_Parity(n):\n    binary_str = bin(n)[2:]\n    count_ones = binary_str.count('1')\n    return count_ones % 2 == 0"
  },
  {
    "id": 256,
    "response": "def find_Min_Swaps(lst, n):\n    count_ones = 0\n    swaps = 0\n    for i in range(n):\n        if lst[i] == 1:\n            count_ones += 1\n        else:\n            swaps += count_ones\n    return swaps"
  },
  {
    "id": 257,
    "response": "def listify_list(lst):\n    result = []\n    for string in lst:\n        result.append(list(string))\n    return result"
  },
  {
    "id": 258,
    "response": "def count_list(lst):\n    return len(lst) ** 2"
  },
  {
    "id": 259,
    "response": "import itertools\n\ndef sub_lists(lst):\n    result = []\n    for i in range(len(lst)+1):\n        for combo in itertools.combinations(lst, i):\n            result.append(list(combo))\n    return result"
  },
  {
    "id": 260,
    "response": "def check_alphanumeric(s):\n    if not s:\n        return 'Discard'\n    last_char = s[-1]\n    if last_char.isalnum():\n        return 'Accept'\n    else:\n        return 'Discard'"
  },
  {
    "id": 261,
    "response": "def anagram_lambda(lst, s):\n    sorted_s = sorted(s)\n    return list(filter(lambda x: sorted(x) == sorted_s, lst))"
  },
  {
    "id": 262,
    "response": "def n_common_words(s, n):\n    words = s.split()\n    from collections import Counter\n    counts = Counter(words)\n    sorted_words = sorted(counts.items(), key=lambda x: (-x[1], x[0]))\n    return sorted_words[:n]"
  },
  {
    "id": 263,
    "response": "def find_longest_conseq_subseq(lst, n):\n    if not lst:\n        return 0\n    num_set = set(lst)\n    max_length = 0\n    for num in num_set:\n        if num - 1 not in num_set:\n            current_num = num\n            current_length = 1\n            while current_num + 1 in num_set:\n                current_num += 1\n                current_length += 1\n            max_length = max(max_length, current_length)\n    return max_length"
  },
  {
    "id": 264,
    "response": "def palindrome_lambda(lst):\n    is_palindrome = lambda s: s == s[::-1]\n    return list(filter(is_palindrome, lst))"
  },
  {
    "id": 265,
    "response": "def ntimes_list(lst, n):\n    return [x * n for x in lst]"
  },
  {
    "id": 266,
    "response": "def check_monthnumb(s):\n    thirty_one_days = {\"January\", \"March\", \"May\", \"July\", \"August\", \"October\", \"December\"}\n    return s in thirty_one_days"
  },
  {
    "id": 267,
    "response": "def min_Num(lst, n):\n    total = sum(lst)\n    return 2 if total % 2 == 0 else 1"
  },
  {
    "id": 268,
    "response": "def length_Of_Last_Word(s):\n    words = s.split()\n    if not words:\n        return 0\n    return len(words[-1])"
  },
  {
    "id": 269,
    "response": "def remove_list_range(lst, n, n2):\n    lower = min(n, n2)\n    upper = max(n, n2)\n    return [sublst for sublst in lst if all(lower <= x <= upper for x in sublst)]"
  },
  {
    "id": 270,
    "response": "def sum_positivenum(lst):\n    return sum(filter(lambda x: x > 0, lst))"
  },
  {
    "id": 271,
    "response": "def are_Rotations(s, s2):\n    if len(s) != len(s2):\n        return False\n    return s2 in s + s"
  },
  {
    "id": 272,
    "response": "def check_subset(lst, lst2):\n    for element in lst2:\n        if element not in lst:\n            return False\n    return True"
  },
  {
    "id": 273,
    "response": "def fibonacci(n):\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    a, b = 0, 1\n    for _ in range(2, n + 1):\n        a, b = b, a + b\n    return b"
  },
  {
    "id": 274,
    "response": "def check_Concat(s, s2):\n    if len(s) == 0:\n        return len(s2) == 0\n    if len(s2) % len(s) != 0:\n        return False\n    times = len(s2) // len(s)\n    return s * times == s2"
  },
  {
    "id": 275,
    "response": "def min_difference(lst):\n    min_diff = float('inf')\n    for t in lst:\n        diff = abs(t[0] - t[1])\n        if diff < min_diff:\n            min_diff = diff\n    return min_diff"
  },
  {
    "id": 276,
    "response": "def lcm(n1, n2):\n    def gcd(a, b):\n        while b:\n            a, b = b, a % b\n        return a\n    \n    return (n1 * n2) // gcd(n1, n2)"
  },
  {
    "id": 277,
    "response": "def sort_String(s):\n    return ''.join(sorted(s))"
  },
  {
    "id": 278,
    "response": "from collections import Counter\n\ndef check_tuples(tup, lst):\n    if len(tup) != len(lst):\n        return False\n    return Counter(tup) == Counter(lst)"
  },
  {
    "id": 279,
    "response": "import re\n\ndef text_match(s):\n    pattern = r'^a.+b$'\n    if re.fullmatch(pattern, s):\n        return 'Found a match!'\n    else:\n        return 'Not matched!'"
  },
  {
    "id": 280,
    "response": "def Check_Solution(n, n2, n3):\n    discriminant = n2**2 - 4 * n * n3\n    if discriminant > 0:\n        return \"2 solutions\"\n    elif discriminant == 0:\n        return \"1 solution\"\n    else:\n        return \"No solutions\""
  },
  {
    "id": 281,
    "response": "def sum_even_odd(lst):\n    first_even = None\n    first_odd = None\n    for num in lst:\n        if num % 2 == 0:\n            if first_even is None:\n                first_even = num\n        else:\n            if first_odd is None:\n                first_odd = num\n        if first_even is not None and first_odd is not None:\n            return first_even + first_odd\n    return first_even + first_odd"
  },
  {
    "id": 282,
    "response": "def parallelogram_perimeter(n, n2):\n    return 2 * (n + n2)"
  },
  {
    "id": 283,
    "response": "def div_of_nums(lst, m, n):\n    return list(filter(lambda x: x % m == 0 and x % n == 0, lst))"
  },
  {
    "id": 284,
    "response": "def all_Bits_Set_In_The_Given_Range(n, n2, n3):\n    if n2 > n3:\n        return False\n    mask = ((1 << (n3 + 1)) - 1) ^ ((1 << n2) - 1)\n    return (n & mask) == mask"
  },
  {
    "id": 285,
    "response": "def is_Isomorphic(s, s2):\n    if len(s) != len(s2):\n        return False\n    char_map = {}\n    reverse_map = {}\n    for char1, char2 in zip(s, s2):\n        if char1 in char_map:\n            if char_map[char1] != char2:\n                return False\n        else:\n            char_map[char1] = char2\n        if char2 in reverse_map:\n            if reverse_map[char2] != char1:\n                return False\n        else:\n            reverse_map[char2] = char1\n    return True"
  },
  {
    "id": 286,
    "response": "def sum_num(tup):\n    return sum(tup) / len(tup)"
  },
  {
    "id": 287,
    "response": "def is_odd(n):\n    return n & 1 == 1"
  },
  {
    "id": 288,
    "response": "def substract_elements(tup, tup2):\n    result = []\n    for i in range(len(tup)):\n        inner_result = []\n        for j in range(len(tup[i])):\n            inner_result.append(tup[i][j] - tup2[i][j])\n        result.append(tuple(inner_result))\n    return tuple(result)"
  },
  {
    "id": 289,
    "response": "def reverse_list_lists(lst):\n    return [sub[::-1] for sub in lst]"
  },
  {
    "id": 290,
    "response": "def find_Extra(lst, lst2, n):\n    return n"
  },
  {
    "id": 291,
    "response": "def same_Length(n, n2):\n    return len(str(abs(n))) == len(str(abs(n2)))"
  },
  {
    "id": 292,
    "response": "def remove_spaces(s):\n    if not s:\n        return \"\"\n    result = []\n    prev_char = ''\n    for char in s:\n        if char == ' ' and prev_char == ' ':\n            continue\n        result.append(char)\n        prev_char = char\n    return ''.join(result)"
  },
  {
    "id": 293,
    "response": "def Extract(lst):\n    return [sublist[-1] for sublist in lst]"
  },
  {
    "id": 294,
    "response": "def float_to_tuple(s):\n    elements = [element.strip() for element in s.split(',')]\n    float_elements = [float(element) for element in elements]\n    return tuple(float_elements)"
  },
  {
    "id": 295,
    "response": "def max_sum_subseq(lst):\n    if not lst:\n        return 0\n    n = len(lst)\n    if n == 1:\n        return lst[0]\n    dp = [0] * n\n    dp[0] = lst[0]\n    dp[1] = max(lst[0], lst[1])\n    for i in range(2, n):\n        dp[i] = max(dp[i-1], dp[i-2] + lst[i])\n    return dp[-1]"
  },
  {
    "id": 296,
    "response": "def sort_list_last(lst):\n    return sorted(lst, key=lambda x: x[1])"
  },
  {
    "id": 297,
    "response": "def is_Word_Present(s, s2):\n    return s2 in s"
  },
  {
    "id": 298,
    "response": "from collections import Counter\n\ndef extract_elements(lst, n):\n    counts = Counter(lst)\n    result = []\n    seen = set()\n    for elem in lst:\n        if counts[elem] == n and elem not in seen:\n            result.append(elem)\n            seen.add(elem)\n    return result"
  },
  {
    "id": 299,
    "response": "def check(lst, n):\n    if len(lst) != n:\n        return False\n    for num in lst:\n        if num not in (1, 2):\n            return False\n    return True"
  },
  {
    "id": 300,
    "response": "import re\n\ndef match_num(s):\n    return bool(re.fullmatch(r'^5-\\d+$', s))"
  },
  {
    "id": 301,
    "response": "def num_comm_div(n, n2):\n    while n2:\n        n, n2 = n2, n % n2\n    return n"
  },
  {
    "id": 302,
    "response": "def find(n, n2):\n    return n % n2"
  },
  {
    "id": 303,
    "response": "def add_consecutive_nums(lst):\n    result = []\n    for i in range(len(lst) - 1):\n        result.append(lst[i] + lst[i+1])\n    return result"
  },
  {
    "id": 304,
    "response": "def sum_Of_Series(n):\n    return (n * (n + 1) // 2) ** 2"
  },
  {
    "id": 305,
    "response": "def re_order(lst):\n    non_zeros = [x for x in lst if x != 0]\n    zeros = [x for x in lst if x == 0]\n    return non_zeros + zeros"
  },
  {
    "id": 306,
    "response": "def permutation_coefficient(n, n2):\n    if n2 > n or n2 < 0:\n        return 0\n    def factorial(x):\n        if x == 0:\n            return 1\n        res = 1\n        for i in range(1, x+1):\n            res *= i\n        return res\n    return factorial(n) // factorial(n - n2)"
  },
  {
    "id": 307,
    "response": "def remove_words(lst, lst2):\n    return [word for word in lst if word not in set(lst2)]"
  },
  {
    "id": 308,
    "response": "def same_order(lst, lst2):\n    if len(lst) != len(lst2):\n        return False\n    for i in range(len(lst)):\n        if lst[i] != lst2[i]:\n            return False\n    return True"
  },
  {
    "id": 309,
    "response": "def average_Odd(n):\n    return (n + 1) // 2"
  },
  {
    "id": 310,
    "response": "def no_of_subsequences(lst, n):\n    count = 0\n    m = len(lst)\n    for mask in range(1, 1 << m):\n        product = 1\n        for i in range(m):\n            if mask & (1 << i):\n                product *= lst[i]\n        if product < n:\n            count += 1\n    return count"
  },
  {
    "id": 311,
    "response": "def find_Min_Sum(n):\n    if n == 1:\n        return 0\n    sum_factors = 0\n    i = 2\n    while i * i <= n:\n        while n % i == 0:\n            sum_factors += i\n            n //= i\n        i += 1\n    if n > 1:\n        sum_factors += n\n    return sum_factors"
  },
  {
    "id": 312,
    "response": "from collections import defaultdict\n\ndef count_element_freq(tup):\n    def flatten(element):\n        if isinstance(element, tuple):\n            for sub_element in element:\n                yield from flatten(sub_element)\n        else:\n            yield element\n    \n    freq = defaultdict(int)\n    for item in flatten(tup):\n        freq[item] += 1\n    return dict(freq)"
  },
  {
    "id": 313,
    "response": "def add_str(tup, s):\n    result = []\n    for element in tup:\n        result.append(element)\n        result.append(s)\n    return result"
  },
  {
    "id": 314,
    "response": "def sum_elements(tup):\n    total = 0\n    for num in tup:\n        total += num\n    return total"
  },
  {
    "id": 315,
    "response": "def modular_sum(lst, n, n2):\n    m = n2\n    dp = set()\n    for num in lst:\n        current = num % m\n        new_remainders = {current}\n        for rem in dp:\n            new_remainders.add((rem + current) % m)\n        dp.update(new_remainders)\n    return 0 in dp"
  },
  {
    "id": 316,
    "response": "def radix_sort(lst):\n    if not lst:\n        return []\n    \n    max_num = max(lst)\n    max_digits = len(str(max_num))\n    \n    bucket = [[] for _ in range(10)]\n    \n    for digit_pos in range(max_digits):\n        for num in lst:\n            current_digit = (num // (10 ** digit_pos)) % 10\n            bucket[current_digit].append(num)\n        \n        lst = []\n        for bucket_list in bucket:\n            lst.extend(bucket_list)\n        \n        bucket = [[] for _ in range(10)]\n    \n    return lst"
  },
  {
    "id": 317,
    "response": "def largest_pos(lst):\n    positives = [num for num in lst if num > 0]\n    return max(positives) if positives else None"
  },
  {
    "id": 318,
    "response": "import math\n\ndef sqrt_root(n):\n    return math.isqrt(n)"
  },
  {
    "id": 319,
    "response": "import math\n\ndef volume_tetrahedron(n):\n    return round((n**3) / (6 * math.sqrt(2)), 2)"
  },
  {
    "id": 320,
    "response": "import math\n\ndef get_lcm(lst):\n    if not lst:\n        return 0\n    current_lcm = lst[0]\n    for num in lst[1:]:\n        if num == 0:\n            return 0\n        current_lcm = (current_lcm * num) // math.gcd(current_lcm, num)\n    return current_lcm"
  },
  {
    "id": 321,
    "response": "def check_isosceles(n, n2, n3):\n    return n != n2 and n2 != n3 and n != n3"
  },
  {
    "id": 322,
    "response": "def lbs(lst):\n    n = len(lst)\n    if n == 0:\n        return 0\n    if n == 1:\n        return 1\n    \n    # Longest Increasing Subsequence ending at i\n    lis = [1] * n\n    for i in range(1, n):\n        for j in range(i):\n            if lst[j] < lst[i]:\n                lis[i] = max(lis[i], lis[j] + 1)\n    \n    # Longest Decreasing Subsequence starting at i\n    lds = [1] * n\n    for i in range(n-2, -1, -1):\n        for j in range(i+1, n):\n            if lst[j] < lst[i]:\n                lds[i] = max(lds[i], lds[j] + 1)\n    \n    # Find the maximum bitonic subsequence length\n    max_len = 0\n    for i in range(n):\n        max_len = max(max_len, lis[i] + lds[i] - 1)\n    \n    return max_len"
  },
  {
    "id": 323,
    "response": "def check_string(s):\n    errors = []\n    if not any(c.isupper() for c in s):\n        errors.append('String must have 1 upper case character.')\n    if not any(c.islower() for c in s):\n        errors.append('String must have 1 lower case character.')\n    if not any(c.isdigit() for c in s):\n        errors.append('String must have 1 number.')\n    if len(s) < 8:\n        errors.append('String length should be atleast 8.')\n    return errors if errors else ['Valid string.']"
  },
  {
    "id": 324,
    "response": "def max_sum_increasing_subsequence(lst, n):\n    if n == 0:\n        return 0\n    dp = [0] * n\n    dp[0] = lst[0]\n    max_sum = lst[0]\n    for i in range(1, n):\n        dp[i] = lst[i]\n        for j in range(i):\n            if lst[i] > lst[j]:\n                dp[i] = max(dp[i], dp[j] + lst[i])\n        max_sum = max(max_sum, dp[i])\n    return max_sum"
  },
  {
    "id": 325,
    "response": "def parallel_lines(lst, lst2):\n    cross_product = lst[0] * lst2[1] - lst[1] * lst2[0]\n    return cross_product == 0"
  },
  {
    "id": 326,
    "response": "def capitalize_first_last_letters(s):\n    words = s.split()\n    result = []\n    for word in words:\n        if len(word) == 0:\n            result.append(word)\n            continue\n        first = word[0].upper()\n        last = word[-1].upper()\n        if len(word) == 1:\n            result.append(first)\n        else:\n            result.append(first + word[1:-1] + last)\n    return ' '.join(result)"
  },
  {
    "id": 327,
    "response": "def get_pairs_count(lst, n, n2):\n    count = 0\n    for i in range(len(lst)):\n        for j in range(i + 1, len(lst)):\n            if lst[i] + lst[j] == n2:\n                count += 1\n    return count"
  },
  {
    "id": 328,
    "response": "def min_length(lst):\n    if not lst:\n        return None\n    min_len = len(lst[0])\n    min_sublist = lst[0]\n    for sublist in lst[1:]:\n        current_len = len(sublist)\n        if current_len < min_len:\n            min_len = current_len\n            min_sublist = sublist\n    return (min_len, min_sublist)"
  },
  {
    "id": 329,
    "response": "def jacobsthal_lucas(n):\n    if n == 0:\n        return 2\n    elif n == 1:\n        return 1\n    a, b = 2, 1\n    for _ in range(2, n + 1):\n        a, b = b, b + 2 * a\n    return b"
  },
  {
    "id": 330,
    "response": "def negative_count(lst):\n    count = 0\n    for num in lst:\n        if num < 0:\n            count += 1\n    return round(count / len(lst), 2)"
  },
  {
    "id": 331,
    "response": "def min_coins(lst, n, n2):\n    coins = lst[:n]\n    dp = [float('inf')] * (n2 + 1)\n    dp[0] = 0\n    for i in range(1, n2 + 1):\n        for coin in coins:\n            if coin <= i:\n                dp[i] = min(dp[i], dp[i - coin] + 1)\n    return dp[n2]"
  },
  {
    "id": 332,
    "response": "def check_permutation(s, s2):\n    return sorted(s) == sorted(s2)"
  },
  {
    "id": 333,
    "response": "def remove_datatype(tup, param):\n    return [x for x in tup if not isinstance(x, param)]"
  },
  {
    "id": 334,
    "response": "def search_literal(s, s2):\n    len_s = len(s)\n    len_s2 = len(s2)\n    if len_s2 == 0:\n        return (0, 0)\n    if len_s < len_s2:\n        return (-1, -1)\n    for i in range(len_s - len_s2 + 1):\n        if s[i:i+len_s2] == s2:\n            return (i, i + len_s2 - 1)\n    return (-1, -1)"
  },
  {
    "id": 335,
    "response": "import math\n\ndef topbottom_surfacearea(n):\n    return math.pi * n ** 2"
  },
  {
    "id": 336,
    "response": "def nth_items(lst, n):\n    result = []\n    for i in range(len(lst)):\n        if (i + 1) % n == 1:\n            result.append(lst[i])\n    return result"
  },
  {
    "id": 337,
    "response": "def first_repeated_word(s):\n    words = s.split()\n    seen = set()\n    for word in words:\n        if word in seen:\n            return word\n        seen.add(word)\n    return 'None'"
  },
  {
    "id": 338,
    "response": "def string_list_to_tuple(input_string):\n    return tuple(input_string)"
  },
  {
    "id": 339,
    "response": "def basesnum_coresspondingnum(lst, lst2):\n    result = []\n    for base, exponent in zip(lst, lst2):\n        result.append(base ** exponent)\n    return result"
  },
  {
    "id": 340,
    "response": "from collections import Counter\n\ndef find_Diff(lst, n):\n    freq = Counter(lst)\n    max_freq = max(freq.values())\n    min_freq = min(freq.values())\n    return max_freq - min_freq"
  },
  {
    "id": 341,
    "response": "def check_abundant(n):\n    if n <= 1:\n        return False\n    divisors = set()\n    for i in range(1, int(n**0.5) + 1):\n        if n % i == 0:\n            divisors.add(i)\n            if i != n // i:\n                divisors.add(n // i)\n    divisors.discard(n)\n    return sum(divisors) > n"
  },
  {
    "id": 342,
    "response": "def fill_spaces(s):\n    return s.translate(str.maketrans(' ,.', ':::'))"
  },
  {
    "id": 343,
    "response": "def count_digits(n, n2):\n    sum_val = n + n2\n    if sum_val == 0:\n        return 1\n    return len(str(abs(sum_val)))"
  },
  {
    "id": 344,
    "response": "def flatten_tuple(lst):\n    return ' '.join(element for t in lst for element in t)"
  },
  {
    "id": 345,
    "response": "def toggle_F_and_L_bits(n):\n    if n == 0:\n        return 0\n    bit_length = n.bit_length()\n    mask = (1 << (bit_length - 1)) | 1\n    return n ^ mask"
  },
  {
    "id": 346,
    "response": "def last_occurence_char(s, s2):\n    if not s or not s2 or len(s2) != 1:\n        return None\n    index = s.rfind(s2)\n    return index if index != -1 else None"
  },
  {
    "id": 347,
    "response": "def Total_Hamming_Distance(n):\n    total = 0\n    prev = 0\n    for i in range(1, n+1):\n        total += bin(prev ^ i).count('1')\n        prev = i\n    return total"
  },
  {
    "id": 348,
    "response": "def longest_increasing_subsequence(lst):\n    if not lst:\n        return 0\n    n = len(lst)\n    dp = [1] * n  # Each element is a subsequence of length 1\n    for i in range(n):\n        for j in range(i):\n            if lst[j] < lst[i]:\n                dp[i] = max(dp[i], dp[j] + 1)\n    return max(dp)"
  },
  {
    "id": 349,
    "response": "def odd_Num_Sum(n):\n    total = 0\n    for i in range(1, n + 1):\n        odd_num = 2 * i - 1\n        total += odd_num ** 5\n    return total"
  },
  {
    "id": 350,
    "response": "def find_Max(lst, n, n2):\n    low = n\n    high = n2\n    while low < high:\n        mid = (low + high) // 2\n        if lst[mid] > lst[high]:\n            low = mid + 1\n        else:\n            high = mid\n    return lst[low]"
  },
  {
    "id": 351,
    "response": "def extract_column(lst, n):\n    return [sublist[n] for sublist in lst]"
  },
  {
    "id": 352,
    "response": "def Seq_Linear(lst):\n    if len(lst) <= 1:\n        return \"Linear Sequence\"\n    diff = lst[1] - lst[0]\n    for i in range(2, len(lst)):\n        if lst[i] - lst[i-1] != diff:\n            return \"Non Linear Sequence\"\n    return \"Linear Sequence\""
  },
  {
    "id": 353,
    "response": "def tuple_to_float(tup):\n    return float(str(tup[0]) + str(tup[1]))"
  },
  {
    "id": 354,
    "response": "def Split(lst):\n    return lst[::2]"
  },
  {
    "id": 355,
    "response": "def difference(n):\n    sum_cubes = (n * (n + 1) // 2) ** 2\n    sum_numbers = n * (n + 1) // 2\n    return sum_cubes - sum_numbers"
  },
  {
    "id": 356,
    "response": ""
  },
  {
    "id": 357,
    "response": "def toggle_string(s):\n    return s.swapcase()"
  },
  {
    "id": 358,
    "response": "def digit_distance_nums(n, n2):\n    str_n = str(abs(n))\n    str_n2 = str(abs(n2))\n    max_len = max(len(str_n), len(str_n2))\n    str_n = str_n.zfill(max_len)\n    str_n2 = str_n2.zfill(max_len)\n    distance = 0\n    for d1, d2 in zip(str_n, str_n2):\n        distance += abs(int(d1) - int(d2))\n    return distance"
  },
  {
    "id": 359,
    "response": "def max_sub_array_sum(lst, n):\n    max_current = max_global = lst[0]\n    for i in range(1, n):\n        max_current = max(lst[i], max_current + lst[i])\n        max_global = max(max_global, max_current)\n    return max_global"
  },
  {
    "id": 360,
    "response": "def union_elements(tup, tup2):\n    result = []\n    seen = set()\n    for element in tup:\n        if element not in seen:\n            result.append(element)\n            seen.add(element)\n    for element in tup2:\n        if element not in seen:\n            result.append(element)\n            seen.add(element)\n    return tuple(result)"
  },
  {
    "id": 361,
    "response": ""
  },
  {
    "id": 362,
    "response": "def Find_Max_Length(lst):\n    max_length = 0\n    for sublist in lst:\n        current_length = len(sublist)\n        if current_length > max_length:\n            max_length = current_length\n    return max_length"
  },
  {
    "id": 363,
    "response": "def extract_values(s):\n    if not s:\n        return []\n    values = s.split(',')\n    result = []\n    for value in values:\n        stripped = value.strip()\n        if stripped.startswith('\"') and stripped.endswith('\"'):\n            result.append(stripped[1:-1])\n        elif stripped.startswith(\"'\") and stripped.endswith(\"'\"):\n            result.append(stripped[1:-1])\n        else:\n            result.append(stripped)\n    return result"
  },
  {
    "id": 364,
    "response": "from collections import Counter\n\ndef count_Pairs(lst, n):\n    total_pairs = n * (n - 1) // 2\n    freq = Counter(lst)\n    same_pairs = 0\n    for count in freq.values():\n        same_pairs += count * (count - 1) // 2\n    return total_pairs - same_pairs"
  },
  {
    "id": 365,
    "response": "def split(s):\n    return [char for char in s]"
  },
  {
    "id": 366,
    "response": "def sum_digits(n):\n    return sum(int(digit) for digit in str(n))"
  },
  {
    "id": 367,
    "response": "def issort_list(lst):\n    for i in range(len(lst) - 1):\n        if lst[i] > lst[i+1]:\n            return False\n    return True"
  },
  {
    "id": 368,
    "response": "def empty_list(n):\n    return [{} for _ in range(n)]"
  },
  {
    "id": 369,
    "response": "def sort_sublists(lst):\n    return [sorted(sublist) for sublist in lst]"
  },
  {
    "id": 370,
    "response": "def remove_words(lst, lst2):\n    return [word for word in lst if not any(sub in word for sub in lst2)]"
  },
  {
    "id": 371,
    "response": "def max_sum_pair_diff_lessthan_K(lst, n, k):\n    max_sum = 0\n    for i in range(n):\n        for j in range(i + 1, n):\n            if abs(lst[i] - lst[j]) < k:\n                current_sum = lst[i] + lst[j]\n                if current_sum > max_sum:\n                    max_sum = current_sum\n    return max_sum"
  },
  {
    "id": 372,
    "response": "from collections import Counter\n\ndef two_unique_nums(lst):\n    freq = Counter(lst)\n    return [x for x in lst if freq[x] == 1]"
  },
  {
    "id": 373,
    "response": "def unique_product(lst):\n    unique = list(set(lst))\n    if not unique:\n        return 1\n    product = 1\n    for num in unique:\n        product *= num\n    return product"
  },
  {
    "id": 374,
    "response": ""
  },
  {
    "id": 375,
    "response": "import math\n\ndef count_no(n, n2, n3, n4):\n    def count_valid(x):\n        def lcm(a, b):\n            return a * b // math.gcd(a, b)\n        count = x // n2 + x // n3 + x // n4\n        count -= x // lcm(n2, n3) + x // lcm(n2, n4) + x // lcm(n3, n4)\n        lcm_all = lcm(lcm(n2, n3), n4)\n        count += x // lcm_all\n        return x - count\n\n    low = 1\n    high = n * max(n2, n3, n4)\n    while low < high:\n        mid = (low + high) // 2\n        if count_valid(mid) >= n:\n            high = mid\n        else:\n            low = mid + 1\n    return low"
  },
  {
    "id": 376,
    "response": "def is_Sub_Array(lst, lst2, n, n2):\n    if n2 == 0:\n        return True\n    if n2 > n:\n        return False\n    for i in range(n - n2 + 1):\n        if lst[i:i+n2] == lst2:\n            return True\n    return False"
  },
  {
    "id": 377,
    "response": "def last_Digit_Factorial(n):\n    if n >= 5:\n        return 0\n    result = 1\n    for i in range(1, n+1):\n        result *= i\n    return result % 10"
  },
  {
    "id": 378,
    "response": "def interleave_lists(lst, lst2, lst3):\n    result = []\n    for i in range(len(lst)):\n        result.append(lst[i])\n        result.append(lst2[i])\n        result.append(lst3[i])\n    return result"
  },
  {
    "id": 379,
    "response": "def find_dissimilar(tup, tup2):\n    set1 = set(tup)\n    set2 = set(tup2)\n    result = []\n    for item in tup:\n        if item not in set2:\n            result.append(item)\n    for item in tup2:\n        if item not in set1:\n            result.append(item)\n    return tuple(result)"
  },
  {
    "id": 380,
    "response": "def extract_even(tup):\n    def helper(element):\n        if isinstance(element, tuple):\n            return tuple(helper(e) for e in element)\n        return element if isinstance(element, int) and element % 2 == 0 else None\n    \n    result = tuple(e for e in tup if e is not None)\n    return result"
  },
  {
    "id": 381,
    "response": "def surface_Area(n, n2):\n    return n**2 + 2 * n * n2"
  },
  {
    "id": 382,
    "response": "def my_dict(dct):\n    return not dct"
  },
  {
    "id": 383,
    "response": "def catalan_number(n):\n    catalan = [0] * (n + 1)\n    catalan[0] = 1\n    \n    for i in range(1, n + 1):\n        for j in range(i):\n            catalan[i] += catalan[j] * catalan[i - 1 - j]\n    \n    return catalan[n]"
  },
  {
    "id": 384,
    "response": "import re\n\ndef find_adverbs(s):\n    pattern = r'\\b\\w+ly\\b'\n    matches = re.finditer(pattern, s)\n    result = []\n    for match in matches:\n        start = match.start()\n        end = match.end() - 1\n        word = match.group()\n        result.append(f\"{start}-{end}: {word}\")\n    return ','.join(result)"
  },
  {
    "id": 385,
    "response": "def expensive_items(lst, n):\n    sorted_items = sorted(lst, key=lambda x: x['price'], reverse=True)\n    return sorted_items[:n]"
  },
  {
    "id": 386,
    "response": "def split_Arr(lst, n, n2):\n    return lst[n2:] + lst[:n2]"
  },
  {
    "id": 387,
    "response": "def list_tuple(lst):\n    return tuple(lst)"
  },
  {
    "id": 388,
    "response": "def big_diff(lst):\n    return max(lst) - min(lst)"
  },
  {
    "id": 389,
    "response": "def perfect_squares(n, n2):\n    start = min(n, n2)\n    end = max(n, n2)\n    result = []\n    for num in range(start, end + 1):\n        root = int(num ** 0.5)\n        if root * root == num:\n            result.append(num)\n    return result"
  },
  {
    "id": 390,
    "response": "import math\n\ndef polar_rect(r, theta):\n    x = r * math.cos(theta)\n    y = r * math.sin(theta)\n    return ((x, y), x + y*1j)"
  },
  {
    "id": 391,
    "response": "def swap_List(lst):\n    if len(lst) <= 1:\n        return lst\n    new_lst = lst.copy()\n    new_lst[0], new_lst[-1] = new_lst[-1], new_lst[0]\n    return new_lst"
  },
  {
    "id": 392,
    "response": "import math\n\ndef sum_Of_product(n):\n    total = 0\n    for i in range(n):\n        total += math.comb(n, i) * math.comb(n, i+1)\n    return total"
  },
  {
    "id": 393,
    "response": "def removezero_ip(s):\n    octets = s.split('.')\n    result = []\n    for octet in octets:\n        if octet == '0':\n            result.append('0')\n        else:\n            stripped = octet.lstrip('0')\n            if stripped == '':\n                result.append('0')\n            else:\n                result.append(stripped)\n    return '.'.join(result)"
  },
  {
    "id": 394,
    "response": "def diff_even_odd(lst):\n    first_even = None\n    first_odd = None\n    for num in lst:\n        if num % 2 == 0:\n            first_even = num\n            break\n    for num in lst:\n        if num % 2 != 0:\n            first_odd = num\n            break\n    return first_even - first_odd"
  },
  {
    "id": 395,
    "response": "def min_Swaps(s, s2):\n    if len(s) != len(s2):\n        return \"Not Possible\"\n    diff = 0\n    for i in range(len(s)):\n        if s[i] != s2[i]:\n            diff += 1\n    if diff % 2 != 0:\n        return \"Not Possible\"\n    return diff // 2"
  },
  {
    "id": 396,
    "response": "import sys\n\ndef tuple_size(tup):\n    return sys.getsizeof(tup)"
  },
  {
    "id": 397,
    "response": "def find_kth(lst, lst2, n, n2, n3):\n    i = j = 0\n    count = 0\n    while count < n3:\n        if i < n and j < n2:\n            if lst[i] < lst2[j]:\n                i += 1\n            else:\n                j += 1\n        elif i < n:\n            i += 1\n        else:\n            j += 1\n        count += 1\n    return lst[i] if i < n else lst2[j]"
  },
  {
    "id": 398,
    "response": "def armstrong_number(n):\n    if n < 0:\n        return False\n    digits = list(str(n))\n    power = len(digits)\n    sum_power = sum(int(digit) ** power for digit in digits)\n    return sum_power == n"
  },
  {
    "id": 399,
    "response": "def sum_average(n):\n    total = n * (n + 1) // 2\n    average = total / n\n    return (total, average)"
  },
  {
    "id": 400,
    "response": "def is_Even(n):\n    return (n & 1) == 0"
  }
]