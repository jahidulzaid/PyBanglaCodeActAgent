id,instruction,test_list
1,"একটি ফাংশন লিখুন যা দিয়ে দেওয়া জোড়া থেকে তৈরি করা সবচেয়ে দীর্ঘতম চেইন খুঁজে বের করতে হবে।
Exammple:
max_chain_length(lst, n)","""['assert max_chain_length([Pair(5, 24), Pair(15, 25),Pair(27, 40), Pair(50, 60)], 4) == 3', 'assert max_chain_length([Pair(1, 2), Pair(3, 4),Pair(5, 6), Pair(7, 8)], 4) == 4', 'assert max_chain_length([Pair(19, 10), Pair(11, 12),Pair(13, 14), Pair(15, 16), Pair(31, 54)], 5) == 5']"""
2,"একটি প্রদত্ত স্ট্রিং-এ প্রথম পুনরাবৃত্ত অক্ষর খুঁজে পেতে একটি পাইথন ফাংশন লিখুন।
Exammple:
first_repeated_char(s)","""['assert first_repeated_char(\""abcabc\"") == \""a\""', 'assert first_repeated_char(\""abc\"") == \""None\""', 'assert first_repeated_char(\""123123\"") == \""1\""']"""
3,"একটি ফাংশন লিখুন যা n এর চেয়ে ছোট বা সমান একটি স্বচ্ছ সংখ্যা পেতে পারে।
Exammple:
get_ludic(n)","""['assert get_ludic(10) == [1, 2, 3, 5, 7]', 'assert get_ludic(25) == [1, 2, 3, 5, 7, 11, 13, 17, 23, 25]', 'assert get_ludic(45) == [1, 2, 3, 5, 7, 11, 13, 17, 23, 25, 29, 37, 41, 43]']"""
4,"একটি প্রদত্ত স্ট্রিং এর শব্দগুলোকে বিপরীত করার জন্য একটি ফাংশন লিখুন।
Exammple:
reverse_words(s)","""['assert reverse_words(\""python program\"")==(\""program python\"")', 'assert reverse_words(\""java language\"")==(\""language java\"")', 'assert reverse_words(\""indian man\"")==(\""man indian\"")']"""
5,"প্রদত্ত পূর্ণসংখ্যাটি একটি মৌলিক সংখ্যা কিনা তা পরীক্ষা করার জন্য একটি ফাংশন লিখুন।
Exammple:
prime_num(n)","""['assert prime_num(13)==True', 'assert prime_num(7)==True', 'assert prime_num(-1010)==False']"""
6,"ডিগ্রিকে রেডিয়ান রূপান্তর করার জন্য একটি ফাংশন লিখুন।
Exammple:
radian_degree(n)","""['assert radian_degree(90)==1.5707963267948966', 'assert radian_degree(60)==1.0471975511965976', 'assert radian_degree(120)==2.0943951023931953']"""
7,"একটি স্ট্রিং-এ একটি আক্ষরিক স্ট্রিং অনুসন্ধান করার জন্য একটি ফাংশন লিখুন এবং রেজেক্স ব্যবহার করে মূল স্ট্রিং-এর মধ্যে অবস্থানটি খুঁজে বের করুন যেখানে প্যাটার্নটি ঘটে।
Exammple:
find_literals(s, s2)","""[\""assert find_literals('The quick brown fox jumps over the lazy dog.', 'fox') == ('fox', 16, 19)\"", \""assert find_literals('Its been a very crazy procedure right', 'crazy') == ('crazy', 16, 21)\"", \""assert find_literals('Hardest choices required strongest will', 'will') == ('will', 35, 39)\""]"""
8,"একটি পাইথন ফাংশন লিখুন nth বেল নম্বর খুঁজে পেতে।
Exammple:
bell_Number(n)","""['assert bell_Number(2) == 2', 'assert bell_Number(3) == 5', 'assert bell_Number(4) == 15']"""
9,"প্রদত্ত পর্যায়ক্রমিক ফাংশনের জন্য সর্বনিম্ন সম্ভাব্য মান খুঁজে পেতে একটি পাইথন ফাংশন লিখুন।
Exammple:
floor_Min(n, n2, n3)","""['assert floor_Min(10,20,30) == 15', 'assert floor_Min(1,2,1) == 0', 'assert floor_Min(11,10,9) == 9']"""
10,"একটি প্রদত্ত তালিকা থেকে k'th উপাদান অপসারণের জন্য একটি পাইথন ফাংশন লিখুন।
Exammple:
remove_kth_element(lst, n)","""['assert remove_kth_element([1,1,2,3,4,4,5,1],3)==[1, 1, 3, 4, 4, 5, 1]', 'assert remove_kth_element([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4],4)==[0, 0, 1, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]', 'assert remove_kth_element([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10],5)==[10,10,15,19, 18, 17, 26, 26, 17, 18, 10]']"""
11,"প্রদত্ত টিপল তালিকা থেকে n-তম কলামের সর্বোচ্চ সংখ্যা খুঁজে বের করার জন্য একটি ফাংশন লিখুন।
Exammple:
max_of_nth(lst, n)","""['assert max_of_nth([(5, 6, 7), (1, 3, 5), (8, 9, 19)], 2) == 19', 'assert max_of_nth([(6, 7, 8), (2, 4, 6), (9, 10, 20)], 1) == 10', 'assert max_of_nth([(7, 8, 9), (3, 5, 7), (10, 11, 21)], 1) == 11']"""
12,"একটি পাইথন ফাংশন লিখুন যা প্রথম এবং শেষ উপাদানগুলিকে আলাদাভাবে তালিকার তালিকায় একত্রিত করে।
Exammple:
merge(lst)","""[\""assert merge([['x', 'y'], ['a', 'b'], ['m', 'n']]) == [['x', 'a', 'm'], ['y', 'b', 'n']]\"", 'assert merge([[1, 2], [3, 4], [5, 6], [7, 8]]) == [[1, 3, 5, 7], [2, 4, 6, 8]]', \""assert merge([['x', 'y','z' ], ['a', 'b','c'], ['m', 'n','o']]) == [['x', 'a', 'm'], ['y', 'b', 'n'],['z', 'c','o']]\""]"""
13,"প্রদত্ত তালিকায় টুপল বৈশিষ্ট্য হিসাবে রেকর্ড তালিকার সর্বাধিক মান খুঁজে পেতে একটি ফাংশন লিখুন।
Exammple:
maximum_value(lst)","""[\""assert maximum_value([('key1', [3, 4, 5]), ('key2', [1, 4, 2]), ('key3', [9, 3])]) == [('key1', 5), ('key2', 4), ('key3', 9)]\"", \""assert maximum_value([('key1', [4, 5, 6]), ('key2', [2, 5, 3]), ('key3', [10, 4])]) == [('key1', 6), ('key2', 5), ('key3', 10)]\"", \""assert maximum_value([('key1', [5, 6, 7]), ('key2', [3, 6, 4]), ('key3', [11, 5])]) == [('key1', 7), ('key2', 6), ('key3', 11)]\""]"""
14,"প্রদত্ত টিপল তালিকায় উপস্থিত সমস্ত মানের ক্রমিক যোগফল খুঁজে বের করার জন্য একটি ফাংশন লিখুন।
Exammple:
cummulative_sum(lst)","""['assert cummulative_sum([(1, 3), (5, 6, 7), (2, 6)]) == 30', 'assert cummulative_sum([(2, 4), (6, 7, 8), (3, 7)]) == 37', 'assert cummulative_sum([(3, 5), (7, 8, 9), (4, 8)]) == 44']"""
15,"একটি প্রদত্ত টুপল টুপল এর সংখ্যার গড় মান খুঁজে পেতে একটি ফাংশন লিখুন।
Exammple:
average_tuple(tup)","""['assert average_tuple(((10, 10, 10, 12), (30, 45, 56, 45), (81, 80, 39, 32), (1, 2, 3, 4)))==[30.5, 34.25, 27.0, 23.25]', 'assert average_tuple(((1, 1, -5), (30, -15, 56), (81, -60, -39), (-10, 2, 3)))== [25.5, -18.0, 3.75]', 'assert average_tuple( ((100, 100, 100, 120), (300, 450, 560, 450), (810, 800, 390, 320), (10, 20, 30, 40)))==[305.0, 342.5, 270.0, 232.5]']"""
16,"প্রদত্ত দুটি টুপলে টুপল উপাদানগুলির মডুলো সম্পাদন করার জন্য একটি ফাংশন লিখুন।
Exammple:
tuple_modulo(tup, tup2)","""['assert tuple_modulo((10, 4, 5, 6), (5, 6, 7, 5)) == (0, 4, 5, 1)', 'assert tuple_modulo((11, 5, 6, 7), (6, 7, 8, 6)) == (5, 5, 6, 1)', 'assert tuple_modulo((12, 6, 7, 8), (7, 8, 9, 7)) == (5, 6, 7, 1)']"""
17,"একটি 2 ডি সমতল থেকে উৎপত্তি থেকে একটি ফর্ম (d, 0) এর একটি বিন্দুতে পৌঁছানোর জন্য প্রদত্ত দৈর্ঘ্যের প্রয়োজনীয় জাম্পের সংখ্যা পরীক্ষা করার জন্য একটি ফাংশন লিখুন।
Exammple:
min_Jumps(n, n2, n3)","""['assert min_Jumps(3,4,11)==3.5', 'assert min_Jumps(3,4,0)==0', 'assert min_Jumps(11,14,11)==1']"""
18,"মানচিত্র এবং ল্যাম্বদা ফাংশন ব্যবহার করে দুটি তালিকা ভাগ করার জন্য একটি ফাংশন লিখুন।
Exammple:
div_list(lst, lst2)","""['assert div_list([4,5,6],[1, 2, 3])==[4.0,2.5,2.0]', 'assert div_list([3,2],[1,4])==[3.0, 0.5]', 'assert div_list([90,120],[50,70])==[1.8, 1.7142857142857142]']"""
19,"একটি ফাংশন লিখুন যাতে সবগুলো সংখ্যাকে দেওয়া স্ট্রিংয়ে স্থানান্তর করা যায়।
Exammple:
move_num(s)","""[\""assert move_num('I1love143you55three3000thousand') == 'Iloveyouthreethousand1143553000'\"", \""assert move_num('Avengers124Assemble') == 'AvengersAssemble124'\"", \""assert move_num('Its11our12path13to14see15things16do17things') == 'Itsourpathtoseethingsdothings11121314151617'\""]"""
20,"একটি ফাংশন লিখুন যেখানে প্রতিটি জোড়া বিভাজ্য হয়।
Exammple:
largest_subset(lst, n)","""['assert largest_subset([ 1, 3, 6, 13, 17, 18 ], 6) == 4', 'assert largest_subset([10, 5, 3, 15, 20], 5) == 3', 'assert largest_subset([18, 1, 3, 6, 13, 17], 6) == 4']"""
21,"একটি ফাংশন লিখুন যা প্রদত্ত স্ট্রিংগুলিতে k দ্বারা সংখ্যাসূচক মান বৃদ্ধি করে।
Exammple:
increment_numerics(lst, n)","""['assert increment_numerics([\""MSM\"", \""234\"", \""is\"", \""98\"", \""123\"", \""best\"", \""4\""] , 6) == [\\'MSM\\', \\'240\\', \\'is\\', \\'104\\', \\'129\\', \\'best\\', \\'10\\']', 'assert increment_numerics([\""Dart\"", \""356\"", \""is\"", \""88\"", \""169\"", \""Super\"", \""6\""] , 12) == [\\'Dart\\', \\'368\\', \\'is\\', \\'100\\', \\'181\\', \\'Super\\', \\'18\\']', 'assert increment_numerics([\""Flutter\"", \""451\"", \""is\"", \""44\"", \""96\"", \""Magnificent\"", \""12\""] , 33) == [\\'Flutter\\', \\'484\\', \\'is\\', \\'77\\', \\'129\\', \\'Magnificent\\', \\'45\\']']"""
22,"একই আকারের দুটি সাজানো অ্যারের মধ্যমা খুঁজে বের করার জন্য একটি ফাংশন লিখুন।
Exammple:
get_median(lst, lst2, n)","""['assert get_median([1, 12, 15, 26, 38], [2, 13, 17, 30, 45], 5) == 16.0', 'assert get_median([2, 4, 8, 9], [7, 13, 19, 28], 4) == 8.5', 'assert get_median([3, 6, 14, 23, 36, 42], [2, 18, 27, 39, 49, 55], 6) == 25.0']"""
23,"ল্যাম্বদা ফাংশন ব্যবহার করে একটি তালিকার পৃথক উপাদানগুলির n-তম শক্তি খুঁজে পেতে একটি ফাংশন লিখুন।
Exammple:
nth_nums(lst, n)","""['assert nth_nums([1, 2, 3, 4, 5, 6, 7, 8, 9, 10],2)==[1, 4, 9, 16, 25, 36, 49, 64, 81, 100]', 'assert nth_nums([10,20,30],3)==([1000, 8000, 27000])', 'assert nth_nums([12,15],5)==([248832, 759375])']"""
24,"প্রদত্ত স্ট্রিংকে বড় হাতের অক্ষরে রূপান্তর করতে একটি পাইথন ফাংশন লিখুন।
Exammple:
is_upper(s)","""['assert is_upper(\""person\"") ==\""PERSON\""', 'assert is_upper(\""final\"") == \""FINAL\""', 'assert is_upper(\""Valid\"") == \""VALID\""']"""
25,"একটি প্রদত্ত তালিকার প্রথম এবং শেষ উপাদান বিনিময় করার জন্য একটি পাইথন ফাংশন লিখুন।
Exammple:
swap_List(lst)","""['assert swap_List([1,2,3]) == [3,2,1]', 'assert swap_List([1,2,3,4,4]) == [4,2,3,4,1]', 'assert swap_List([4,5,6]) == [6,5,4]']"""
26,"একটি পাইথন ফাংশন লিখুন যাতে সেমি সার্কেলে যে বৃহত্তম ত্রিভুজটি লেখা যায় তা খুঁজে পাওয়া যায়।
Exammple:
triangle_area(n)","""['assert triangle_area(0) == 0', 'assert triangle_area(-1) == -1', 'assert triangle_area(2) == 4']"""
27,"প্রদত্ত অ্যারে থেকে ক্ষুদ্রতম অনুপস্থিত সংখ্যা খুঁজে পেতে একটি পাইথন ফাংশন লিখুন।
Exammple:
find_First_Missing(lst, n, n2)","""['assert find_First_Missing([0,1,2,3],0,3) == 4', 'assert find_First_Missing([0,1,2,6,9],0,4) == 3', 'assert find_First_Missing([2,3,5,8,9],0,4) == 0']"""
28,"প্রদত্ত স্ট্রিং-এর সমস্ত স্পেসকে অক্ষর * তালিকা আইটেম * তালিকা আইটেম * তালিকা আইটেম * তালিকা আইটেম '%20' দিয়ে প্রতিস্থাপনের জন্য একটি ফাংশন লিখুন।
Exammple:
replace_spaces(s)","""['assert replace_spaces(\""My Name is Dawood\"") == \\'My%20Name%20is%20Dawood\\'', 'assert replace_spaces(\""I am a Programmer\"") == \\'I%20am%20a%20Programmer\\'', 'assert replace_spaces(\""I love Coding\"") == \\'I%20love%20Coding\\'']"""
29,"একটি মিশ্র তালিকা থেকে এমনকি সংখ্যা খুঁজে পেতে একটি পাইথন ফাংশন লিখুন।
Exammple:
Split(lst)","""['assert Split([1,2,3,4,5]) == [2,4]', 'assert Split([4,5,6,7,8,0,1]) == [4,6,8,0]', 'assert Split ([8,12,15,19]) == [8,12]']"""
30,"একটি ফাংশন লিখুন যা প্রদত্ত সমন্বয় টুপলের সমস্ত সংলগ্ন সমন্বয়গুলি বের করে।
Exammple:
get_coordinates(tup)","""['assert get_coordinates((3, 4)) == [[2, 3], [2, 4], [2, 5], [3, 3], [3, 4], [3, 5], [4, 3], [4, 4], [4, 5]]', 'assert get_coordinates((4, 5)) ==[[3, 4], [3, 5], [3, 6], [4, 4], [4, 5], [4, 6], [5, 4], [5, 5], [5, 6]]', 'assert get_coordinates((5, 6)) == [[4, 5], [4, 6], [4, 7], [5, 5], [5, 6], [5, 7], [6, 5], [6, 6], [6, 7]]']"""
