[
  {
    "id": 1,
    "response": "def remove_Occ(s, ch):\n    if len(s) == 0:\n        return s\n    first_index = -1\n    last_index = -1\n    for i, char in enumerate(s):\n        if char == ch:\n            if first_index == -1:\n                first_index = i\n            last_index = i\n    if first_index == -1:\n        return s\n    new_s = s[:first_index] + s[first_index+1:last_index] + s[last_index+1:]\n    return new_s"
  },
  {
    "id": 2,
    "response": "def sort_matrix(M):\n    # Create a list of tuples where each tuple contains the sum of a row and the row itself\n    summed_rows = [(sum(row), row) for row in M]\n    \n    # Sort the list of tuples based on the sum of the rows\n    sorted_summed_rows = sorted(summed_rows, key=lambda x: x[0])\n    \n    # Extract the sorted rows from the sorted list of tuples\n    sorted_matrix = [row for _, row in sorted_summed_rows]\n    \n    return sorted_matrix"
  },
  {
    "id": 3,
    "response": "# Final clean solution\nfrom collections import Counter\n\ndef count_common(words):\n    if not words:\n        return []\n    word_counts = Counter(words)\n    sorted_counts = sorted(word_counts.items(), key=lambda item: item[1], reverse=True)\n    return sorted_counts"
  },
  {
    "id": 4,
    "response": "def find_Volume(l, b, h):\n    base_area = 0.5 * l * b\n    volume = base_area * h\n    return volume"
  },
  {
    "id": 5,
    "response": "def split_lowerstring(text):\n    result = []\n    current_substring = ''\n    for char in text:\n        if char.islower():\n            current_substring += char\n        else:\n            if current_substring:\n                result.append(current_substring)\n                current_substring = ''\n    if current_substring:\n        result.append(current_substring)\n    return result"
  },
  {
    "id": 6,
    "response": "import re\n\ndef text_lowercase_underscore(text):\n    if re.match(r'^[a-z_]+$', text):\n        return 'Found a match!'\n    return None"
  },
  {
    "id": 7,
    "response": "def square_perimeter(a):\n    return 4 * a"
  },
  {
    "id": 8,
    "response": "def str_to_list(string, chars):\n    result = [char for char in string if char not in chars]\n    return ''.join(result)"
  },
  {
    "id": 9,
    "response": "def test_duplicate(arraynums):\n    seen = set()\n    for num in arraynums:\n        if num in seen:\n            return True\n        seen.add(num)\n    return False"
  },
  {
    "id": 10,
    "response": "def is_woodall(x):\n    n = 0\n    while True:\n        woodall_number = n * (2 ** n) + 1\n        if woodall_number == x:\n            return True\n        if woodall_number > x:\n            return False\n        n += 1"
  },
  {
    "id": 11,
    "response": "def multiples_of_num(m, n):\n    if m == 0 or n == 0:\n        return []\n    return [m * i for i in range(1, n + 1)]"
  },
  {
    "id": 12,
    "response": "def find_first_duplicate(nums):\n    seen = set()\n    for num in nums:\n        if num in seen:\n            return num\n        seen.add(num)\n    return -1"
  },
  {
    "id": 13,
    "response": "def maximum_Sum(list1):\n    max_sum = float('-inf')\n    for sublist in list1:\n        current_sum = sum(sublist)\n        if current_sum > max_sum:\n            max_sum = current_sum\n    return max_sum"
  },
  {
    "id": 14,
    "response": "def binary_to_decimal(binary):\n    decimal = 0\n    binary_str = str(binary)\n    length = len(binary_str)\n    for i in range(length):\n        decimal += int(binary_str[length - 1 - i]) * (2 ** i)\n    return decimal"
  },
  {
    "id": 15,
    "response": "def find_Product(arr, n):\n    unique_elements = set(arr)\n    product = 1\n    for element in unique_elements:\n        product *= element\n    return product"
  },
  {
    "id": 16,
    "response": "def check_k_elements(test_list, K):\n    for tup in test_list:\n        if len(tup) != K:\n            return False\n    return True"
  },
  {
    "id": 17,
    "response": "def remove(list):\n    result = []\n    for item in list:\n        filtered_item = ''.join([char for char in item if not char.isdigit()])\n        result.append(filtered_item)\n    return result"
  },
  {
    "id": 18,
    "response": "def binomial_Coeff(n, k):\n    if k > n - k:\n        k = n - k\n    res = 1\n    for i in range(k):\n        res = res * (n - i)\n        res = res // (i + 1)\n    return res"
  },
  {
    "id": 19,
    "response": "def get_Odd_Occurrence(arr, arr_size):\n    count_dict = {}\n    for num in arr:\n        if num in count_dict:\n            count_dict[num] += 1\n        else:\n            count_dict[num] = 1\n    for num, count in count_dict.items():\n        if count % 2 != 0:\n            return num\n    return None"
  },
  {
    "id": 20,
    "response": "def check_Equality(s):\n    count = 0\n    n = len(s)\n    for i in range(n):\n        for j in range(i, n):\n            if s[i] == s[j]:\n                count += 1\n    return count"
  },
  {
    "id": 21,
    "response": "# Final clean solution\nimport heapq\nfrom collections import Counter\n\ndef func(nums, k):\n    flat_list = [num for sublist in nums for num in sublist]\n    freq = Counter(flat_list)\n    top_k = heapq.nlargest(k, freq.keys(), key=freq.get)\n    return top_k"
  },
  {
    "id": 22,
    "response": "def max_Prime_Factors(n):\n    maxPrime = -1\n    # Check for number of 2s that divide n\n    while n % 2 == 0:\n        maxPrime = 2\n        n >>= 1  # equivalent to n /= 2\n\n    # n must be odd at this point, thus a skip of 2 (i.e., i = i + 2) can be used\n    for i in range(3, int(math.sqrt(n)) + 1, 2):\n        # While i divides n, store i and divide n\n        while n % i == 0:\n            maxPrime = i\n            n = n // i\n\n    # This condition is to check if n is a prime number greater than 2\n    if n > 2:\n        maxPrime = n\n\n    return maxPrime\n\nimport math"
  },
  {
    "id": 23,
    "response": "def decimal_To_Binary(N):\n    if N == 0:\n        return '0'\n    binary_str = ''\n    while N > 0:\n        remainder = N % 2\n        binary_str = str(remainder) + binary_str\n        N = N // 2\n    return binary_str"
  },
  {
    "id": 24,
    "response": "def find_missing(ar, N):\n    total_sum = N * (N + 1) // 2\n    array_sum = sum(ar)\n    missing_number = total_sum - array_sum\n    return missing_number"
  },
  {
    "id": 25,
    "response": "def find_rect_num(n):\n    total = 0\n    for i in range(1, n + 1):\n        for j in range(i, n + 1):\n            total += i * j\n    return total"
  },
  {
    "id": 26,
    "response": "def find_Nth_Digit(p, q, N):\n    result = p / q\n    result_str = str(result)\n    if '.' in result_str:\n        decimal_part = result_str.split('.')[1]\n        if N <= len(decimal_part):\n            return int(decimal_part[N - 1])\n        else:\n            return -1  # Indicates that N is out of range for the decimal part\n    else:\n        return -1  # Indicates that the result is an integer and does not have a decimal part"
  },
  {
    "id": 27,
    "response": "def sort_mixed_list(mixed_list):\n    integers = [x for x in mixed_list if isinstance(x, int)]\n    strings = [x for x in mixed_list if isinstance(x, str)]\n    integers.sort()\n    strings.sort()\n    sorted_list = []\n    int_idx, str_idx = 0, 0\n    while int_idx < len(integers) or str_idx < len(strings):\n        if int_idx < len(integers):\n            sorted_list.append(integers[int_idx])\n            int_idx += 1\n        if str_idx < len(strings):\n            sorted_list.append(strings[str_idx])\n            str_idx += 1\n    return sorted_list"
  },
  {
    "id": 28,
    "response": "def div_even_odd(list1):\n    even_count = 0\n    found_even = False\n    found_odd = False\n    \n    for num in list1:\n        if num % 2 == 0:\n            even_count += 1\n            if not found_even:\n                found_even = True\n            if not found_odd:\n                found_odd = True\n                break\n    \n    return even_count"
  },
  {
    "id": 29,
    "response": "from collections import Counter\nimport heapq\n\ndef rearange_string(S):\n    if not S:\n        return \"\"\n    \n    freq_dict = Counter(S)\n    max_heap = [(-value, key) for key, value in freq_dict.items()]\n    heapq.heapify(max_heap)\n    \n    prev_count = 0\n    prev_char = \"\"\n    result = []\n    \n    while max_heap:\n        count, char = heapq.heappop(max_heap)\n        result.append(char)\n        if prev_count < 0:\n            heapq.heappush(max_heap, (prev_count, prev_char))\n        prev_count = count + 1\n        prev_char = char\n    \n    if len(result) != len(S):\n        return \"\"\n    \n    return \"\".join(result)"
  },
  {
    "id": 30,
    "response": "from collections import Counter\n\ndef freq_element(nums):\n    flat_list = [item for sublist in nums for item in sublist]\n    freq_dict = Counter(flat_list)\n    return dict(freq_dict)"
  },
  {
    "id": 31,
    "response": "def filter_evennumbers(nums):\n    return list(filter(lambda x: x % 2 == 0, nums))"
  },
  {
    "id": 32,
    "response": "def find_Sum(arr, n):\n    return sum(arr)"
  },
  {
    "id": 33,
    "response": "import re\n\ndef text_match(text):\n    patterns = '[a-z]+_[a-z]+'\n    if re.search(patterns, text):\n        return 'Found a match!'\n    else:\n        return 'Not matched!'"
  },
  {
    "id": 34,
    "response": "def text_match_string(text):\n    if text.startswith('python'):\n        return 'Found a match!'\n    else:\n        return 'Not matched!'"
  },
  {
    "id": 35,
    "response": "def find_gcd(nums):\n    def gcd(a, b):\n        while b:\n            a, b = b, a % b\n        return a\n    \n    if not nums:\n        return None\n    \n    current_gcd = nums[0]\n    for num in nums[1:]:\n        current_gcd = gcd(current_gcd, num)\n        if current_gcd == 1:\n            break\n    \n    return current_gcd"
  },
  {
    "id": 36,
    "response": "def test_distinct(data):\n    for i in range(len(data)):\n        for j in range(i + 1, len(data)):\n            if data[i] == data[j]:\n                return False\n    return True"
  },
  {
    "id": 37,
    "response": "from math import gcd\n\ndef compute_Last_Digit(A, B):\n    def factorial_last_digit(n):\n        if n == 0 or n == 1:\n            return 1\n        last_digit = 1\n        for i in range(2, n + 1):\n            last_digit = (last_digit * i) % 10\n        return last_digit\n\n    # Compute the factorial of A and B modulo 10\n    last_digit_A = factorial_last_digit(A)\n    last_digit_B = factorial_last_digit(B)\n\n    # Check if B is 0 to avoid division by zero\n    if last_digit_B == 0:\n        return None\n\n    # Check if last_digit_B is coprime with 10\n    if gcd(last_digit_B, 10) != 1:\n        return None\n\n    # Compute the last digit of the division\n    return (last_digit_A * pow(last_digit_B, -1, 10)) % 10"
  },
  {
    "id": 38,
    "response": "def odd_bit_set_number(n):\n    mask = 0\n    i = 1\n    while i < n:\n        mask |= i\n        i <<= 2\n    return n | mask"
  },
  {
    "id": 39,
    "response": "def specified_element(nums, N):\n    result = [sublist[0] for sublist in nums]\n    return result"
  },
  {
    "id": 40,
    "response": "def min_length_list(input_list):\n    min_length = min(len(lst) for lst in input_list)\n    result = [lst for lst in input_list if len(lst) == min_length]\n    return (min_length, result)"
  },
  {
    "id": 41,
    "response": "def check_equilateral(x, y, z):\n    return x == y == z"
  },
  {
    "id": 42,
    "response": "def parallelogram_area(b, h):\n    return b * h"
  },
  {
    "id": 43,
    "response": "def gcd(a, b):\n    while b:\n        a, b = b, a % b\n    return a"
  },
  {
    "id": 44,
    "response": "def counting_sort(my_list):\n    if not my_list:\n        return my_list\n    \n    max_val = max(my_list)\n    min_val = min(my_list)\n    count_array = [0] * (max_val - min_val + 1)\n    \n    for num in my_list:\n        count_array[num - min_val] += 1\n    \n    for i in range(1, len(count_array)):\n        count_array[i] += count_array[i - 1]\n    \n    output_array = [0] * len(my_list)\n    \n    for num in reversed(my_list):\n        output_array[count_array[num - min_val] - 1] = num\n        count_array[num - min_val] -= 1\n    \n    return output_array"
  },
  {
    "id": 45,
    "response": "def tn_gp(a, n, r):\n    return a * (r ** (n - 1))"
  },
  {
    "id": 46,
    "response": "def rev(num):\n    if num == 0:\n        return False\n    reverse_num = int(str(num)[::-1])\n    return num < (reverse_num // 2) - 1"
  },
  {
    "id": 47,
    "response": "def find_Max_Num(arr, n):\n    arr = [str(num) for num in arr]\n    arr.sort(key=lambda x: x*n, reverse=True)\n    largest_num = ''.join(arr)\n    return int(largest_num)"
  },
  {
    "id": 48,
    "response": "def opposite_Signs(x, y):\n    return (x ^ y) < 0"
  },
  {
    "id": 49,
    "response": "def is_octagonal(n):\n    return n * (3 * n - 2)"
  },
  {
    "id": 50,
    "response": "def max_len_sub(arr, n):\n    max_len = 0\n    for i in range(n):\n        min_val = arr[i]\n        max_val = arr[i]\n        for j in range(i + 1, n):\n            min_val = min(min_val, arr[j])\n            max_val = max(max_val, arr[j])\n            if max_val - min_val <= 1:\n                max_len = max(max_len, j - i + 1)\n    return max_len"
  },
  {
    "id": 51,
    "response": "def count_Substrings(s, n):\n    count = 0\n    for i in range(len(s) - n + 1):\n        if len(s[i:i+n]) == int(s[i]):\n            count += 1\n    return count"
  },
  {
    "id": 52,
    "response": "def smallest_num(xs):\n    if not xs:\n        return None\n    smallest = xs[0]\n    for x in xs:\n        if x < smallest:\n            smallest = x\n    return smallest"
  },
  {
    "id": 53,
    "response": "def max_difference(test_list):\n    max_diff = 0\n    for a, b in test_list:\n        diff = abs(a - b)\n        if diff > max_diff:\n            max_diff = diff\n    return max_diff"
  },
  {
    "id": 54,
    "response": "def subject_marks(subjectmarks):\n    return sorted(subjectmarks, key=lambda x: x[1])"
  },
  {
    "id": 55,
    "response": "def recursive_list_sum(data_list):\n    total_sum = 0\n    for element in data_list:\n        if isinstance(element, list):\n            total_sum += recursive_list_sum(element)\n        else:\n            total_sum += element\n    return total_sum"
  },
  {
    "id": 56,
    "response": "def pos_count(list):\n    count = 0\n    for num in list:\n        if num > 0:\n            count += 1\n    return count"
  },
  {
    "id": 57,
    "response": "def bell_number(n):\n    if n == 0:\n        return 1\n    bell = [[0 for i in range(n+1)] for j in range(n+1)]\n    bell[0][0] = 1\n    for i in range(1, n+1):\n        bell[i][0] = bell[i-1][i-1]\n        for j in range(1, i+1):\n            bell[i][j] = bell[i-1][j-1] + bell[i][j-1]\n    return bell[n][0]"
  },
  {
    "id": 58,
    "response": "def is_Monotonic(A):\n    is_increasing = all(A[i] <= A[i+1] for i in range(len(A) - 1))\n    is_decreasing = all(A[i] >= A[i+1] for i in range(len(A) - 1))\n    return is_increasing or is_decreasing"
  },
  {
    "id": 59,
    "response": "def is_sublist(l, s):\n    if not s:  # If the sublist is empty, it's trivially a sublist\n        return True\n    if not l:  # If the main list is empty, sublist cannot be a sublist\n        return False\n    \n    sub_iter = iter(s)\n    return all(item in l for item in sub_iter)"
  },
  {
    "id": 60,
    "response": "def find_equal_tuple(Input, k):\n    if not Input:\n        return 'All tuples have same length'\n    first_tuple_length = len(Input[0])\n    for tup in Input:\n        if len(tup) != first_tuple_length:\n            return 'Not all tuples have the same length'\n    return 'All tuples have same length'"
  },
  {
    "id": 61,
    "response": "# Final clean solution\ndef comb_sort(nums):\n    shrink_factor = 1.3\n    n = len(nums)\n    gap = n\n    \n    while gap > 1 or swapped:\n        gap = int(gap / shrink_factor)\n        if gap < 1:\n            gap = 1\n        swapped = False\n        for i in range(0, n - gap):\n            if nums[i] > nums[i + gap]:\n                nums[i], nums[i + gap] = nums[i + gap], nums[i]\n                swapped = True\n    return nums"
  },
  {
    "id": 62,
    "response": "def dif_Square(n):\n    return n % 4 != 2"
  },
  {
    "id": 63,
    "response": "import re\n\ndef multiple_split(text):\n    delimiters = r'\\\\n|\\*|\\.'\n    result = re.split(delimiters, text)\n    return result"
  },
  {
    "id": 64,
    "response": "def is_samepatterns(colors, patterns):\n    if len(colors) != len(patterns):\n        return False\n    color_to_pattern = {}\n    pattern_set = set()\n    for color, pattern in zip(colors, patterns):\n        if color in color_to_pattern:\n            if color_to_pattern[color] != pattern:\n                return False\n        else:\n            if pattern in pattern_set:\n                return False\n            color_to_pattern[color] = pattern\n            pattern_set.add(pattern)\n    return True"
  },
  {
    "id": 65,
    "response": "def find_tuples(test_list, K):\n    result = []\n    for tup in test_list:\n        if all(element % K == 0 for element in tup):\n            result.append(tup)\n    return result"
  },
  {
    "id": 66,
    "response": "def count_Squares(m, n):\n    return (m * (m + 1) * (2 * m + 1)) // 6 + (n * (n + 1) * (2 * n + 1)) // 6 - (m * n)"
  },
  {
    "id": 67,
    "response": "def is_Diff(n):\n    even_sum = 0\n    odd_sum = 0\n    n = abs(n)\n\n    while n > 0:\n        digit = n % 10\n        if digit % 2 == 0:\n            even_sum += digit\n        else:\n            odd_sum += digit\n        n //= 10\n\n    difference = abs(even_sum - odd_sum)\n    return difference % 2 == 0"
  },
  {
    "id": 68,
    "response": "def count_With_Odd_SetBits(n):\n    def count_set_bits(x):\n        count = 0\n        while x:\n            count += x & 1\n            x >>= 1\n        return count\n\n    odd_set_bits_count = 0\n    for i in range(n + 1):\n        if count_set_bits(i) % 2 != 0:\n            odd_set_bits_count += 1\n    return odd_set_bits_count"
  },
  {
    "id": 69,
    "response": "def word_len(s):\n    length = len(s)\n    return length < 3 or length > 10"
  },
  {
    "id": 70,
    "response": "def tetrahedral_number(n):\n    return n * (n + 1) * (n + 2) / 6"
  },
  {
    "id": 71,
    "response": "def zip_tuples(test_tup1, test_tup2):\n    result = [(a, b) for a, b in zip(test_tup1, test_tup2)]\n    return result"
  },
  {
    "id": 72,
    "response": "def volume_sphere(r):\n    pi = 3.14159\n    volume = (4/3) * pi * (r**3)\n    return volume"
  },
  {
    "id": 73,
    "response": "def get_Char(strr):\n    if not strr:\n        return \"Error: Empty string\"\n    total_sum = sum(ord(char) for char in strr)\n    return chr(total_sum)"
  },
  {
    "id": 74,
    "response": "def sequence(n):\n    return n"
  },
  {
    "id": 75,
    "response": "import math\n\ndef surfacearea_sphere(r):\n    if r <= 0:\n        return 0\n    surface_area = 4 * math.pi * r**2\n    return surface_area"
  },
  {
    "id": 76,
    "response": "def centered_hexagonal_number(n):\n    return 3 * n * (n - 1) + 1"
  },
  {
    "id": 77,
    "response": "def merge_dictionaries_three(dict1, dict2, dict3):\n    merged_dict = dict1.copy()\n    for key, value in dict2.items():\n        merged_dict[key] = value\n    for key, value in dict3.items():\n        merged_dict[key] = value\n    return merged_dict"
  },
  {
    "id": 78,
    "response": "def freq_count(list1):\n    freq_dict = {}\n    for item in list1:\n        if item in freq_dict:\n            freq_dict[item] += 1\n        else:\n            freq_dict[item] = 1\n    return freq_dict"
  },
  {
    "id": 79,
    "response": "def closest_num(N):\n    return (N // 10) * 10"
  },
  {
    "id": 80,
    "response": "def len_log(list1):\n    max_length = 0\n    for word in list1:\n        if len(word) > max_length:\n            max_length = len(word)\n    return max_length"
  },
  {
    "id": 81,
    "response": "def find_substring(str_list, sub_str):\n    for s in str_list:\n        if sub_str in s:\n            return True\n    return False"
  },
  {
    "id": 82,
    "response": "def is_undulating(n):\n    if len(n) < 2:\n        return False\n    first_digit = n[0]\n    second_digit = None\n    \n    for i in range(1, len(n)):\n        if n[i] != first_digit:\n            if second_digit is None:\n                second_digit = n[i]\n            elif n[i] != second_digit:\n                return False\n            else:\n                return False\n    return True"
  },
  {
    "id": 83,
    "response": "def power(a, b):\n    return a ** b"
  },
  {
    "id": 84,
    "response": "def index_minimum(test_list):\n    if not test_list:\n        return None  # or raise an exception, depending on the expected behavior for empty lists\n    \n    min_value = float('inf')\n    min_index = -1\n    \n    for i, (name, value) in enumerate(test_list):\n        if value < min_value:\n            min_value = value\n            min_index = i\n    \n    return test_list[min_index][0]"
  },
  {
    "id": 85,
    "response": "def Find_Min_Length(lst):\n    if not lst:\n        return 0\n    min_length = float('inf')\n    for sublist in lst:\n        if len(sublist) < min_length:\n            min_length = len(sublist)\n    return min_length"
  },
  {
    "id": 86,
    "response": "def divisor(n):\n    count = 0\n    for i in range(1, n + 1):\n        if n % i == 0:\n            count += 1\n    return count"
  },
  {
    "id": 87,
    "response": "def frequency_lists(list1):\n    frequency_dict = {}\n    for sublist in list1:\n        for element in sublist:\n            if element in frequency_dict:\n                frequency_dict[element] += 1\n            else:\n                frequency_dict[element] = 1\n    return frequency_dict"
  },
  {
    "id": 88,
    "response": "def multiply_num(numbers):\n    if not numbers:  # Check if the list is empty\n        return 0\n    product = 1\n    for num in numbers:\n        product *= num\n    return product / len(numbers)"
  },
  {
    "id": 89,
    "response": "def decimal_to_binary(n):\n    if n == 0:\n        return '0'\n    binary_str = ''\n    while n > 0:\n        binary_str = str(n % 2) + binary_str\n        n = n // 2\n    return binary_str"
  },
  {
    "id": 90,
    "response": "def is_palindrome(num):\n    return str(num) == str(num)[::-1]\n\ndef next_smallest_palindrome(num):\n    if num < 0:\n        return None  # Assuming we don't consider negative numbers for simplicity\n    num += 1\n    while not is_palindrome(num):\n        num += 1\n    return num"
  },
  {
    "id": 91,
    "response": "def kth_element(arr, n, k):\n    arr.sort()\n    return arr[k - 1]"
  },
  {
    "id": 92,
    "response": "def snake_to_camel(word):\n    words = word.split('_')\n    camel_case_words = [words[0]] + [word.capitalize() for word in words[1:]]\n    return ''.join(camel_case_words)"
  },
  {
    "id": 93,
    "response": "def eulerian_num(n, m):\n    if m == 0:\n        return 1\n    if n == 0 or m == 0:\n        return 1\n    dp = [[0] * (m + 1) for _ in range(n + 1)]\n    for i in range(n + 1):\n        for j in range(m + 1):\n            if i == 0 or j == 0:\n                dp[i][j] = 1\n            else:\n                dp[i][j] = (i - j) * dp[i - 1][j - 1] + (j + 1) * dp[i - 1][j]\n    return dp[n][m]"
  },
  {
    "id": 94,
    "response": "def sort_sublists(input_list):\n    sorted_list = [sorted(sublist) for sublist in input_list]\n    return sorted_list"
  },
  {
    "id": 95,
    "response": "def count(lst):\n    true_count = 0\n    for value in lst:\n        if value:\n            true_count += 1\n    return true_count"
  },
  {
    "id": 96,
    "response": "def add_lists(test_list, test_tup):\n    return tuple(test_tup) + tuple(test_list)"
  },
  {
    "id": 97,
    "response": "def count_Hexadecimal(L, R):\n    count = 0\n    for num in range(L, R + 1):\n        hex_num = hex(num)[2:]  # Convert to hexadecimal and remove '0x' prefix\n        if L <= int(hex_num, 16) <= R:\n            count += 1\n    return count"
  },
  {
    "id": 98,
    "response": "def merge_sorted_list(*nums):\n    def merge(left, right):\n        result = []\n        i = j = 0\n        while i < len(left) and j < len(right):\n            if left[i] < right[j]:\n                result.append(left[i])\n                i += 1\n            else:\n                result.append(right[j])\n                j += 1\n        result.extend(left[i:])\n        result.extend(right[j:])\n        return result\n\n    merged_list = []\n    for num in nums:\n        merged_list = merge(merged_list, sorted(num))\n    return merged_list"
  },
  {
    "id": 99,
    "response": "def odd_Equivalent(s, n):\n    def count_ones(sub_s):\n        return sub_s.count('1')\n    \n    count = 0\n    for i in range(n):\n        rotated_s = s[i:] + s[:i]\n        if count_ones(rotated_s) % 2 == 1:\n            count += 1\n    return count"
  },
  {
    "id": 100,
    "response": "def extract_missing(test_list, strt_val, stop_val):\n    result = []\n    prev_end = strt_val\n    \n    for start, end in test_list:\n        if start > prev_end:\n            result.append((prev_end, start))\n        if end > prev_end:\n            prev_end = end\n    \n    if prev_end < stop_val:\n        result.append((prev_end, stop_val))\n    \n    return result"
  },
  {
    "id": 101,
    "response": "def common_in_nested_lists(nestedlist):\n    if not nestedlist:\n        return []\n    common_elements = set(nestedlist[0])\n    for lst in nestedlist[1:]:\n        common_elements.intersection_update(lst)\n    return sorted(common_elements)"
  },
  {
    "id": 102,
    "response": "import math\n\ndef perimeter(diameter, height):\n    return math.pi * diameter"
  },
  {
    "id": 103,
    "response": "def check_integer(text):\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False"
  },
  {
    "id": 104,
    "response": "def assign_freq(test_list):\n    freq_dict = {}\n    for tup in test_list:\n        tup = tuple(tup)  # Ensure the item is a tuple\n        if tup in freq_dict:\n            freq_dict[tup] += 1\n        else:\n            freq_dict[tup] = 1\n    \n    result = []\n    for tup, freq in freq_dict.items():\n        result.append((*tup, freq))\n    \n    return result"
  },
  {
    "id": 105,
    "response": "def empty_dit(list1):\n    return all(element == {} for element in list1)"
  },
  {
    "id": 106,
    "response": "def tuple_to_int(nums):\n    num_str = ''.join(map(str, nums))\n    return int(num_str)"
  },
  {
    "id": 107,
    "response": "def list_to_float(test_list):\n    result = []\n    for item in test_list:\n        try:\n            converted_tuple = tuple(float(x) for x in item)\n            result.append(converted_tuple)\n        except ValueError:\n            continue\n    return result"
  },
  {
    "id": 108,
    "response": "def string_to_list(string):\n    return string.split()"
  },
  {
    "id": 109,
    "response": "def search(arr, n):\n    count = {}\n    for num in arr:\n        count[num] = count.get(num, 0) + 1\n    for num in arr:\n        if count[num] == 1:\n            return num\n    return -1"
  },
  {
    "id": 110,
    "response": "def max_product_tuple(list1):\n    max_product = float('-inf')\n    for (a, b) in list1:\n        product = a * b\n        if product > max_product:\n            max_product = product\n    return max_product"
  },
  {
    "id": 111,
    "response": "def check_triplet(A, n, sum, count):\n    for i in range(n):\n        for j in range(i + 1, n):\n            for k in range(j + 1, n):\n                if A[i] + A[j] + A[k] == sum:\n                    return True\n    return False"
  },
  {
    "id": 112,
    "response": "def smartNumber(n):\n    return 30"
  },
  {
    "id": 113,
    "response": "def sum_of_proper_divisors(n):\n    divisors_sum = 1\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            divisors_sum += i\n            if i != n // i:\n                divisors_sum += n // i\n    return divisors_sum\n\ndef amicable_numbers_sum(limit):\n    amicable_sum = 0\n    for a in range(2, limit):\n        b = sum_of_proper_divisors(a)\n        if a != b and sum_of_proper_divisors(b) == a and a < b:\n            amicable_sum += a + b\n    return amicable_sum"
  },
  {
    "id": 114,
    "response": "import math\n\ndef angle_complex(a, b):\n    if isinstance(a, complex) or isinstance(b, complex):\n        raise ValueError(\"Input must be real numbers\")\n    return math.atan2(b, a)"
  },
  {
    "id": 115,
    "response": "def find_length(string, n):\n    max_diff = 0\n    for i in range(n):\n        count_0 = 0\n        count_1 = 0\n        for j in range(i, n):\n            if string[j] == '0':\n                count_0 += 1\n            else:\n                count_1 += 1\n            max_diff = max(max_diff, abs(count_0 - count_1))\n    return max_diff"
  },
  {
    "id": 116,
    "response": "# Final clean solution\ndef sum(a, b):\n    def common_divisors_sum(x, y):\n        smaller = min(x, y)\n        divisors_sum = 0\n        for i in range(1, smaller + 1):\n            if x % i == 0 and y % i == 0:\n                divisors_sum += i\n        return divisors_sum\n    return common_divisors_sum(a, b)"
  },
  {
    "id": 117,
    "response": "def multiply_int(x, y):\n    result = 0\n    for _ in range(abs(y)):\n        result += abs(x)\n    if (x < 0 and y > 0) or (x > 0 and y < 0):\n        result = -result\n    return result"
  },
  {
    "id": 118,
    "response": "def long_words(n, str):\n    word_len = []\n    txt = str.split(\" \")\n    for x in txt:\n        if len(x) > n:\n            word_len.append(x)\n    return word_len"
  },
  {
    "id": 119,
    "response": "# Final clean solution\n\ndef magic_square_test(my_matrix):\n    if not my_matrix or not my_matrix[0]:\n        return False\n    \n    size = len(my_matrix)\n    magic_sum = sum(my_matrix[0])\n    \n    # Check rows\n    for row in my_matrix:\n        if sum(row) != magic_sum:\n            return False\n    \n    # Check columns\n    for col in range(size):\n        if sum(my_matrix[row][col] for row in range(size)) != magic_sum:\n            return False\n    \n    # Check main diagonal\n    if sum(my_matrix[i][i] for i in range(size)) != magic_sum:\n        return False\n    \n    # Check secondary diagonal\n    if sum(my_matrix[i][size - 1 - i] for i in range(size)) != magic_sum:\n        return False\n    \n    return True"
  },
  {
    "id": 120,
    "response": "def max_occurrences(nums):\n    if not nums:\n        return None\n    \n    count_dict = {}\n    for num in nums:\n        if num in count_dict:\n            count_dict[num] += 1\n        else:\n            count_dict[num] = 1\n    \n    max_count = max(count_dict.values())\n    max_items = [num for num, count in count_dict.items() if count == max_count]\n    \n    return (max_items[0], max_count)"
  },
  {
    "id": 121,
    "response": "def reverse_vowels(str1):\n    vowels = \"aeiouAEIOU\"\n    vowels_in_str = [char for char in str1 if char in vowels]\n    result = []\n    for char in str1:\n        if char in vowels:\n            result.append(vowels_in_str.pop())\n        else:\n            result.append(char)\n    return ''.join(result)"
  },
  {
    "id": 122,
    "response": "def tup_string(tup1):\n    return ''.join(tup1)"
  },
  {
    "id": 123,
    "response": "def sum_negativenum(nums):\n    return sum(filter(lambda x: x < 0, nums))"
  },
  {
    "id": 124,
    "response": "def check_last(arr, n, p):\n    if len(arr) == 0:\n        return \"EVEN\"  # If the array is empty, it's even by default\n    last_element = arr[-1]\n    for _ in range(p):\n        if last_element % 2 == 0:\n            last_element //= 2\n        else:\n            last_element = 3 * last_element + 1\n    if last_element % 2 == 0:\n        return \"EVEN\"\n    else:\n        return \"ODD\""
  },
  {
    "id": 125,
    "response": "def hexagonal_num(n):\n    return n * (2 * n - 1)"
  },
  {
    "id": 126,
    "response": "def cal_electbill(units):\n    if units <= 50:\n        return units * 6.5\n    elif units <= 100:\n        return 50 * 6.5 + (units - 50) * 7.5\n    elif units <= 150:\n        return 50 * 6.5 + 50 * 7.5 + (units - 100) * 8.5\n    else:\n        return 50 * 6.5 + 50 * 7.5 + 50 * 8.5 + (units - 150) * 9.5"
  },
  {
    "id": 127,
    "response": "def zero_count(nums):\n    if not nums:\n        return 0\n    zero_count = nums.count(0)\n    total_count = len(nums)\n    return zero_count / total_count"
  },
  {
    "id": 128,
    "response": "def is_Sum_Of_Powers_Of_Two(n):\n    return (n & (n - 1)) == 0"
  },
  {
    "id": 129,
    "response": "def circle_circumference(r):\n    pi = 3.14159\n    C = 2 * pi * r\n    return C"
  },
  {
    "id": 130,
    "response": "def extract_singly(test_list):\n    result = []\n    for t in test_list:\n        for element in t:\n            if element not in result:\n                result.append(element)\n    return result"
  },
  {
    "id": 131,
    "response": "def pancake_sort(nums):\n    def flip(sub_list, k):\n        return sub_list[:k+1][::-1] + sub_list[k+1:]\n\n    n = len(nums)\n    while n > 1:\n        mi = nums.index(max(nums[:n]))\n        nums = flip(nums, mi)\n        nums = flip(nums, n - 1)\n        n -= 1\n    return nums"
  },
  {
    "id": 132,
    "response": "def count_samepair(list1, list2, list3):\n    count = 0\n    for element in list1:\n        if element in list2 and element in list3:\n            count += 1\n    return count"
  },
  {
    "id": 133,
    "response": "def find_lists(Input):\n    count = 0\n    for item in Input:\n        if isinstance(item, list):\n            count += 1\n    return count"
  },
  {
    "id": 134,
    "response": "def sum_Pairs(arr, n):\n    total_sum = 0\n    for i in range(n):\n        for j in range(i + 1, n):\n            total_sum += abs(arr[i] - arr[j])\n    return total_sum"
  },
  {
    "id": 135,
    "response": "def max_Abs_Diff(arr, n):\n    if n == 0:\n        return 0\n    max_val = max(arr)\n    min_val = min(arr)\n    return max_val - min_val"
  },
  {
    "id": 136,
    "response": "def ascii_value_string(str1):\n    total_ascii = 0\n    for char in str1:\n        total_ascii += ord(char)\n    return total_ascii"
  },
  {
    "id": 137,
    "response": "def max_path_sum(tri, m, n):\n    for i in range(m-1, -1, -1):\n        for j in range(i+1):\n            if i == m-1:\n                tri[i][j] = tri[i][j]\n            else:\n                tri[i][j] += max(tri[i+1][j], tri[i+1][j+1])\n    return tri[0][0]"
  },
  {
    "id": 138,
    "response": "def sum_digits_single(x):\n    digits = [int(d) for d in str(x)]\n    max_digit = max(digits)\n    part1 = max_digit\n    part2 = x - max_digit\n    return part1 + part2"
  },
  {
    "id": 139,
    "response": "def longest_subseq_with_diff_one(arr, n):\n    if n == 0:\n        return 0\n    \n    dp = [1] * n\n    \n    for i in range(1, n):\n        for j in range(i):\n            if abs(arr[i] - arr[j]) == 1:\n                dp[i] = max(dp[i], dp[j] + 1)\n    \n    return max(dp)"
  },
  {
    "id": 140,
    "response": "def does_Contain_B(a, b, c):\n    if a == c or b == c:\n        return True\n    sum = a + b\n    product = a * b\n    while sum < c or product < c:\n        sum += b\n        product *= b\n    return sum == c or product == c"
  },
  {
    "id": 141,
    "response": "def gcd(p, q):\n    while q != 0:\n        p, q = q, p % q\n    return p == 1"
  },
  {
    "id": 142,
    "response": "def merge(a, b):\n    merged_list = []\n    i = j = 0\n\n    while i < len(a) and j < len(b):\n        if a[i] < b[j]:\n            merged_list.append(a[i])\n            i += 1\n        else:\n            merged_list.append(b[j])\n            j += 1\n\n    merged_list.extend(a[i:])\n    merged_list.extend(b[j:])\n\n    return merged_list"
  },
  {
    "id": 143,
    "response": "def parabola_vertex(a, b, c):\n    x = -b / (2 * a)\n    y = a * x**2 + b * x + c\n    return (x, y)"
  },
  {
    "id": 144,
    "response": "def specified_element(nums, N):\n    result = []\n    for sublist in nums:\n        if N < len(sublist):\n            result.append(sublist[N])\n    return result"
  },
  {
    "id": 145,
    "response": "def even_bit_toggle_number(n):\n    bit_position = 0\n    while (1 << bit_position) <= n:\n        if bit_position % 2 == 0:\n            n ^= (1 << bit_position)\n        bit_position += 1\n    return n"
  },
  {
    "id": 146,
    "response": "def tuple_int_str(tuple_str):\n    result = []\n    for inner_tuple in tuple_str:\n        int_inner_tuple = tuple(int(s) for s in inner_tuple)\n        result.append(int_inner_tuple)\n    return tuple(result)"
  },
  {
    "id": 147,
    "response": "def encode_list(list1):\n    if not list1:\n        return []\n    \n    encoded_list = []\n    count = 1\n    for i in range(1, len(list1)):\n        if list1[i] == list1[i - 1]:\n            count += 1\n        else:\n            encoded_list.append([count, list1[i - 1]])\n            count = 1\n    encoded_list.append([count, list1[-1]])\n    return encoded_list"
  },
  {
    "id": 148,
    "response": "def min_Ops(arr, n, k):\n    arr.sort()\n    target = arr[n // 2]\n    operations = 0\n    for num in arr:\n        operations += abs(num - target)\n    return operations // k"
  },
  {
    "id": 149,
    "response": "def month_season(month, days):\n    if month == 'January' and days >= 1 and days <= 31:\n        return 'winter'\n    elif month == 'February' and days >= 1 and days <= 28:\n        return 'winter'\n    elif month == 'March' and days >= 1 and days <= 31:\n        return 'spring'\n    elif month == 'April' and days >= 1 and days <= 30:\n        return 'spring'\n    elif month == 'May' and days >= 1 and days <= 31:\n        return 'spring'\n    elif month == 'June' and days >= 1 and days <= 30:\n        return 'summer'\n    elif month == 'July' and days >= 1 and days <= 31:\n        return 'summer'\n    elif month == 'August' and days >= 1 and days <= 31:\n        return 'summer'\n    elif month == 'September' and days >= 1 and days <= 30:\n        return 'autumn'\n    elif month == 'October' and days >= 1 and days <= 31:\n        return 'autumn'\n    elif month == 'November' and days >= 1 and days <= 30:\n        return 'autumn'\n    elif month == 'December' and days >= 1 and days <= 31:\n        return 'winter'\n    else:\n        return 'Invalid month or days'"
  },
  {
    "id": 150,
    "response": "def solution(a, b, n):\n    def extended_gcd(a, b):\n        if a == 0:\n            return (b, 0, 1)\n        else:\n            g, x, y = extended_gcd(b % a, a)\n            return (g, y - (b // a) * x, x)\n\n    g, x, y = extended_gcd(a, b)\n    if n % g != 0:\n        return \"No solution\"\n    else:\n        x *= n // g\n        y *= n // g\n        return ('x = ', x, ', y = ', y)"
  },
  {
    "id": 151,
    "response": "def remove_elements(list1, list2):\n    result = [item for item in list1 if item not in list2]\n    return result"
  },
  {
    "id": 152,
    "response": "def sum_series(n):\n    total = 0\n    current = n\n    while current > 0:\n        total += current\n        current -= 2\n    return total"
  },
  {
    "id": 153,
    "response": "import math\n\ndef area_polygon(n, s):\n    if n <= 2:\n        return \"Invalid input: n must be greater than 2\"\n    area = (n * s**2) / (4 * math.tan(math.pi / n))\n    return area"
  },
  {
    "id": 154,
    "response": "def sum_of_divisors(num):\n    sum_div = 1  # 1 is always a divisor\n    for i in range(2, int(num**0.5) + 1):\n        if num % i == 0:\n            sum_div += i\n            if i != num // i:  # Avoid adding the square root twice for perfect squares\n                sum_div += num // i\n    return sum_div\n\ndef divSum(a, b):\n    return sum_of_divisors(a) == sum_of_divisors(b)"
  },
  {
    "id": 155,
    "response": "def count_char_position(str1):\n    count = 0\n    for i, char in enumerate(str1):\n        if i + 1 == ord(char) - ord('a') + 1:\n            count += 1\n    return count"
  },
  {
    "id": 156,
    "response": "def find_even_Pair(A, N):\n    count = 0\n    for i in range(N):\n        for j in range(i + 1, N):\n            if (A[i] ^ A[j]) % 2 == 0:\n                count += 1\n    return count"
  },
  {
    "id": 157,
    "response": "def next_Power_Of_2(n):\n    if n <= 0:\n        return 1\n    n -= 1\n    n |= n >> 1\n    n |= n >> 2\n    n |= n >> 4\n    n |= n >> 8\n    n |= n >> 16\n    return n + 1"
  },
  {
    "id": 158,
    "response": "def frequency(a, x):\n    count = 0\n    for num in a:\n        if num == x:\n            count += 1\n    return count"
  },
  {
    "id": 159,
    "response": "def get_pell(n):\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        pell_numbers = [0, 1]\n        for i in range(2, n + 1):\n            pell_numbers.append(2 * pell_numbers[i - 1] + pell_numbers[i - 2])\n        return pell_numbers[n]"
  },
  {
    "id": 160,
    "response": "def sum_range_list(list1, m, n):\n    if not list1 or m < 0 or n < 0 or m > len(list1) - 1 or n > len(list1) - 1 or m > n:\n        return 0\n    return sum(list1[m:n+1])"
  },
  {
    "id": 161,
    "response": "def perimeter_pentagon(a):\n    return 5 * a"
  },
  {
    "id": 162,
    "response": "def count_occurance(s):\n    count = 0\n    for i in range(len(s) - 2):\n        if s[i:i+3] == 'std':\n            count += 1\n    return count"
  },
  {
    "id": 163,
    "response": "def remove_splchar(text):\n    result = \"\"\n    for char in text:\n        if char.isalpha():\n            result += char\n    return result"
  },
  {
    "id": 164,
    "response": "def group_keyvalue(l):\n    result = {}\n    for key, value in l:\n        if key not in result:\n            result[key] = []\n        result[key].append(value)\n    return result"
  },
  {
    "id": 165,
    "response": "def is_valid_parenthese(str1):\n    stack = []\n    for char in str1:\n        if char in '({[':\n            stack.append(char)\n        elif char == ')':\n            if not stack or stack.pop() != '(':\n                return False\n        elif char == '}':\n            if not stack or stack.pop() != '{':\n                return False\n        elif char == ']':\n            if not stack or stack.pop() != '[':\n                return False\n    return not stack"
  },
  {
    "id": 166,
    "response": "def perimeter_triangle(a, b, c):\n    return a + b + c"
  },
  {
    "id": 167,
    "response": "# Final clean solution\nfrom math import gcd\n\ndef answer(L, R):\n    min_lcm = float('inf')\n    max_lcm = float('-inf')\n    for i in range(L, R+1):\n        for j in range(i+1, R+1):\n            lcm = (i * j) // gcd(i, j)\n            min_lcm = min(min_lcm, lcm)\n            max_lcm = max(max_lcm, lcm)\n    return (min_lcm, max_lcm)"
  },
  {
    "id": 168,
    "response": "def string_literals(patterns, text):\n    for pattern in patterns:\n        if pattern in text:\n            return 'Matched!'\n    return 'Not Matched!'"
  },
  {
    "id": 169,
    "response": "def is_num_keith(x):\n    digits = [int(d) for d in str(x)]\n    n = len(digits)\n    current = sum(digits)\n    \n    while current < x:\n        current = sum(digits[-n:])\n        digits.append(current)\n    \n    return current == x"
  },
  {
    "id": 170,
    "response": "# Final clean solution\n\nimport math\n\ndef distance_lat_long(slat, slon, elat, elon):\n    slat_rad = math.radians(slat)\n    slon_rad = math.radians(slon)\n    elat_rad = math.radians(elat)\n    elon_rad = math.radians(elon)\n    \n    dlon = elon_rad - slon_rad\n    dlat = elat_rad - slat_rad\n    \n    a = math.sin(dlat / 2)**2 + math.cos(slat_rad) * math.cos(elat_rad) * math.sin(dlon / 2)**2\n    c = 2 * math.atan2(math.sqrt(a), math.sqrt(1 - a))\n    \n    r = 6371.0\n    \n    distance = r * c\n    \n    return distance"
  },
  {
    "id": 171,
    "response": "def common_prefix_util(str1, str2):\n    i = 0\n    while i < len(str1) and i < len(str2):\n        if str1[i] != str2[i]:\n            break\n        i += 1\n    return str1[:i]\n\ndef common_prefix(str_set, n):\n    if n == 0:\n        return \"\"\n    prefix = str_set[0]\n    for i in range(1, n):\n        prefix = common_prefix_util(prefix, str_set[i])\n        if prefix == \"\":\n            break\n    return prefix"
  },
  {
    "id": 172,
    "response": "import re\n\ndef find_character(string):\n    uppercase_letters = re.findall(r'[A-Z]', string)\n    lowercase_letters = re.findall(r'[a-z]', string)\n    numbers = re.findall(r'[0-9]', string)\n    special_characters = re.findall(r'[^A-Za-z0-9]', string)\n    \n    return (uppercase_letters, lowercase_letters, numbers, special_characters)"
  },
  {
    "id": 173,
    "response": "def count_pairs(arr, n, k):\n    count = 0\n    for i in range(n):\n        for j in range(i + 1, n):\n            if abs(arr[i] - arr[j]) == k:\n                count += 1\n    return count"
  },
  {
    "id": 174,
    "response": "def greater_specificnum(list, num):\n    result = [value for value in list if value > num]\n    return result"
  },
  {
    "id": 175,
    "response": "def parabola_focus(a, b, c):\n    if a == 0:\n        return \"This is not a parabola\"\n    h = -b / (2 * a)\n    k = c - (b ** 2) / (4 * a)\n    focus_y = k + 1 / (4 * a)\n    return (h, focus_y)"
  },
  {
    "id": 176,
    "response": "import re\n\ndef check_literals(text, patterns):\n    for pattern in patterns:\n        if re.search(pattern, text):\n            return 'Matched!'\n    return 'Not Matched!'"
  },
  {
    "id": 177,
    "response": "def longest_common_subsequence(X, Y, m, n):\n    dp = [[0] * (n + 1) for _ in range(m + 1)]\n    \n    for i in range(1, m + 1):\n        for j in range(1, n + 1):\n            if X[i - 1] == Y[j - 1]:\n                dp[i][j] = dp[i - 1][j - 1] + 1\n            else:\n                dp[i][j] = max(dp[i - 1][j], dp[i][j - 1])\n    \n    return dp[m][n]"
  },
  {
    "id": 178,
    "response": "import math\n\ndef prod_Square(n):\n    if n == 0:\n        return False\n    for i in range(1, int(math.sqrt(n)) + 1):\n        if n % (i * i) == 0:\n            remainder = n // (i * i)\n            root_remainder = math.isqrt(remainder)\n            if root_remainder * root_remainder == remainder:\n                return True\n    return False"
  },
  {
    "id": 179,
    "response": "def first_Missing_Positive(arr, n):\n    pos_set = set()\n    for num in arr:\n        if num > 0:\n            pos_set.add(num)\n    \n    i = 1\n    while i <= n:\n        if i not in pos_set:\n            return i\n        i += 1\n    return i"
  },
  {
    "id": 180,
    "response": "def count_Integral_Points(x1, y1, x2, y2):\n    count = 0\n    for x in range(x1, x2 + 1):\n        for y in range(y1, y2 + 1):\n            if x1 <= x <= x2 and y1 <= y <= y2:\n                count += 1\n    return count"
  },
  {
    "id": 181,
    "response": "# Function to check if a given month has 30 days\ndef check_monthnumber(monthname3):\n    # List of months with 30 days\n    months_with_30_days = [\"April\", \"June\", \"September\", \"November\"]\n    \n    # Check if the provided month name is in the list\n    return monthname3 in months_with_30_days"
  },
  {
    "id": 182,
    "response": "import re\n\ndef check_String(str):\n    return bool(re.search(r'[a-zA-Z]', str) and re.search(r'[0-9]', str))"
  },
  {
    "id": 183,
    "response": "def remove_tuple(test_tup):\n    res = tuple(set(test_tup))\n    return res"
  },
  {
    "id": 184,
    "response": "def octal_To_Decimal(n):\n    decimal = 0\n    i = 0\n    while n != 0:\n        dec = n % 10\n        decimal += dec * (8 ** i)\n        n = n // 10\n        i += 1\n    return decimal"
  },
  {
    "id": 185,
    "response": "def first(arr, x, n):\n    for i in range(n):\n        if arr[i] == x:\n            return i\n    return -1"
  },
  {
    "id": 186,
    "response": "def remove_tuples(test_list, K):\n    return [tup for tup in test_list if len(tup) != K]"
  },
  {
    "id": 187,
    "response": "def find_exponentio(test_tup1, test_tup2):\n    result = tuple(a ** b for a, b in zip(test_tup1, test_tup2))\n    return result"
  },
  {
    "id": 188,
    "response": "import math\n\ndef largest_triangle(a, b):\n    area = (3 * math.sqrt(3) / 4) * max(a, b)**2\n    return area"
  },
  {
    "id": 189,
    "response": "def highest_Power_of_2(n):\n    if n < 1:\n        return 0\n    power = 1\n    while power <= n:\n        power <<= 1\n    return power >> 1"
  },
  {
    "id": 190,
    "response": "def position_max(list1):\n    if not list1:  # Check if the list is empty\n        return []\n    \n    max_value = max(list1)  # Find the maximum value in the list\n    return [index for index, value in enumerate(list1) if value == max_value]  # Find all indices with the maximum value"
  },
  {
    "id": 191,
    "response": "def chkList(lst):\n    if not lst:  # Check if the list is empty\n        return False\n    first_element = lst[0]\n    return all(element == first_element for element in lst)"
  },
  {
    "id": 192,
    "response": "def remove_even(str1):\n    result = ''\n    for i in range(len(str1)):\n        if i % 2 == 0:\n            continue\n        result += str1[i]\n    return result"
  },
  {
    "id": 193,
    "response": "def hamming_Distance(n1, n2):\n    xor_result = n1 ^ n2\n    hamming_distance = bin(xor_result).count('1')\n    return hamming_distance"
  },
  {
    "id": 194,
    "response": "def count(s, c):\n    count = 0\n    for char in s:\n        if char == c:\n            count += 1\n    return count"
  },
  {
    "id": 195,
    "response": "def inversion_elements(test_tup):\n    result = tuple(-x for x in test_tup)\n    return result"
  },
  {
    "id": 196,
    "response": "def concatenate_elements(test_tup):\n    res = tuple(test_tup[i] + test_tup[i+1] for i in range(len(test_tup) - 1))\n    return res"
  },
  {
    "id": 197,
    "response": "def find_longest_repeating_subseq(str):\n    n = len(str)\n    dp = [[0] * (n + 1) for _ in range(n + 1)]\n\n    for i in range(1, n + 1):\n        for j in range(1, n + 1):\n            if str[i - 1] == str[j - 1] and i != j:\n                dp[i][j] = 1 + dp[i - 1][j - 1]\n            else:\n                dp[i][j] = max(dp[i - 1][j], dp[i][j - 1])\n\n    return dp[n][n]"
  },
  {
    "id": 198,
    "response": "import re\n\ndef is_decimal(num):\n    pattern = r'^[+-]?\\d+(\\.\\d+)?$'\n    return bool(re.match(pattern, num))"
  },
  {
    "id": 199,
    "response": "import heapq\n\ndef heap_replace(heap, a):\n    heapq.heapreplace(heap, a)\n    return heap"
  },
  {
    "id": 200,
    "response": "import re\n\ndef is_allowed_specific_char(string):\n    pattern = r'[^A-Za-z0-9]'\n    return not re.search(pattern, string)"
  },
  {
    "id": 201,
    "response": "def count_Num(n):\n    count = 0\n    while n:\n        count += n & 1\n        n >>= 1\n    return count"
  },
  {
    "id": 202,
    "response": "def fourth_Power_Sum(n):\n    total_sum = 0\n    for i in range(1, n + 1):\n        total_sum += i ** 4\n    return total_sum"
  },
  {
    "id": 203,
    "response": "def concatenate_strings(test_tup1, test_tup2):\n    result = tuple(ele1 + ele2 for ele1, ele2 in zip(test_tup1, test_tup2))\n    return result"
  },
  {
    "id": 204,
    "response": "def degree_radian(radian):\n    PI = 3.14159\n    degree = radian * (180 / PI)\n    return degree"
  },
  {
    "id": 205,
    "response": "def decode_list(alist):\n    decoded = []\n    for item in alist:\n        if isinstance(item, list):\n            for _ in range(item[0]):\n                decoded.append(item[1])\n        else:\n            decoded.append(item)\n    return decoded"
  },
  {
    "id": 206,
    "response": "def check_subset_list(list1, list2):\n    for sublist in list2:\n        if not any(item in list1 for item in sublist):\n            return False\n    return True"
  },
  {
    "id": 207,
    "response": "def first_Repeated_Char(str):\n    seen = set()\n    for char in str:\n        if char in seen:\n            return char\n        seen.add(char)\n    return None"
  },
  {
    "id": 208,
    "response": "def min_Operations(A, B):\n    return abs(A - B) // 2"
  },
  {
    "id": 209,
    "response": "def extract_min_max(test_tup, K):\n    sorted_tup = sorted(test_tup)\n    min_k = sorted_tup[:K]\n    max_k = sorted_tup[-K:]\n    return tuple(min_k + max_k)"
  },
  {
    "id": 210,
    "response": "def replace_max_specialchar(text, n):\n    if not text:\n        return text\n    special_chars = [' ', ',', '.']\n    result = list(text)\n    count = 0\n    for i in range(len(result)):\n        if result[i] in special_chars:\n            result[i] = ':'\n            count += 1\n            if count == n:\n                break\n    return ''.join(result)"
  },
  {
    "id": 211,
    "response": "def first_even(nums):\n    for num in nums:\n        if num % 2 == 0:\n            return num\n    return None"
  },
  {
    "id": 212,
    "response": "def check_type(test_tuple):\n    if not test_tuple:  # Check if the tuple is empty\n        return True\n    first_type = type(test_tuple[0])\n    return all(isinstance(item, first_type) for item in test_tuple)"
  },
  {
    "id": 213,
    "response": "def is_majority(arr, n, x):\n    count = 0\n    for num in arr:\n        if num == x:\n            count += 1\n    return count > n // 2"
  },
  {
    "id": 214,
    "response": "def count_Set_Bits(n):\n    count = 0\n    while n:\n        count += n & 1\n        n >>= 1\n    return count"
  },
  {
    "id": 215,
    "response": "def find_Min(arr, low, high):\n    while low < high:\n        mid = low + (high - low) // 2\n        if arr[mid] < arr[high]:\n            high = mid\n        else:\n            low = mid + 1\n    return arr[low]"
  },
  {
    "id": 216,
    "response": "def odd_values_string(s):\n    return s[::2]"
  },
  {
    "id": 217,
    "response": "def min_of_three(a,b,c):\n    return min(a, b, c)"
  },
  {
    "id": 218,
    "response": "def all_Bits_Set_In_The_Given_Range(n, l, r):\n    mask = (1 << (r - l + 1)) - 1\n    mask = mask << (l - 1)\n    return (n & mask) == mask"
  },
  {
    "id": 219,
    "response": "def re_arrange_array(arr, n):\n    left = 0\n    right = n - 1\n    \n    while left <= right:\n        if arr[left] < 0 and arr[right] < 0:\n            left += 1\n        elif arr[left] >= 0 and arr[right] < 0:\n            arr[left], arr[right] = arr[right], arr[left]\n            left += 1\n            right -= 1\n        elif arr[left] >= 0 and arr[right] >= 0:\n            right -= 1\n        else:\n            left += 1\n            right -= 1\n    return arr"
  },
  {
    "id": 220,
    "response": "def replace_blank(str1, char):\n    return str1.replace(' ', char)"
  },
  {
    "id": 221,
    "response": "def max_sum(tri, n):\n    for i in range(n-2, -1, -1):\n        for j in range(len(tri[i])):\n            tri[i][j] += max(tri[i+1][j], tri[i+1][j+1])\n    return tri[0][0]"
  },
  {
    "id": 222,
    "response": "def larg_nnum(list1, n):\n    list1.sort(reverse=True)\n    return list1[:n]"
  },
  {
    "id": 223,
    "response": "def lateralsuface_cylinder(r, h):\n    if r <= 0 or h <= 0:\n        return 0\n    return 2 * 3.141592653589793 * r * h"
  },
  {
    "id": 224,
    "response": "def gcd(a, b):\n    while b:\n        a, b = b, a % b\n    return a"
  },
  {
    "id": 225,
    "response": "# Final clean solution\ndef even_bit_set_number(n):\n    bit_position = 0\n    while (1 << bit_position) <= n:\n        if bit_position % 2 == 0:\n            n |= (1 << bit_position)\n        bit_position += 1\n    return n"
  },
  {
    "id": 226,
    "response": "def No_of_Triangle(N, K):\n    count = 0\n    for a in range(1, N + 1):\n        for b in range(1, K + 1):\n            for c in range(1, N + 1):\n                if a * a + b * b == c * c:\n                    count += 1\n    return count"
  },
  {
    "id": 227,
    "response": "# Final clean solution\nfrom collections import defaultdict\n\ndef check_occurences(test_list):\n    occurrence_dict = defaultdict(int)\n    \n    for pair in test_list:\n        # Sort the pair to handle pairs in any order\n        sorted_pair = tuple(sorted(pair))\n        occurrence_dict[sorted_pair] += 1\n    \n    # Convert the defaultdict to a regular dictionary for the final output\n    result_dict = dict(occurrence_dict)\n    return result_dict"
  },
  {
    "id": 228,
    "response": "def number_of_substrings(str):\n    n = len(str)\n    return n * (n + 1) // 2"
  },
  {
    "id": 229,
    "response": "def get_total_number_of_sequences(m, n):\n    dp = [[0] * (m + 1) for _ in range(n + 1)]\n    \n    for j in range(m + 1):\n        dp[0][j] = 1\n    \n    for i in range(1, n + 1):\n        for j in range(1, m + 1):\n            for k in range(1, j // 2 + 1):\n                dp[i][j] += dp[i - 1][k]\n    \n    result = 0\n    for j in range(1, m + 1):\n        result += dp[n - 1][j]\n    \n    return result"
  },
  {
    "id": 230,
    "response": "def replace_list(list1, list2):\n    if list2:  # Check if list2 is not empty\n        list1[-1] = list2[0]  # Replace the last element of list1 with the first element of list2\n        list1.extend(list2[1:])  # Add the remaining elements of list2 to the end of list1\n    return list1"
  },
  {
    "id": 231,
    "response": "def array_3d(m, n, o):\n    return [[['*' for _ in range(n)] for _ in range(m)] for _ in range(o)]"
  },
  {
    "id": 232,
    "response": "def count_charac(str1):\n    return len(str1)"
  },
  {
    "id": 233,
    "response": "def sort_on_occurence(lst):\n    from collections import Counter\n    \n    counts = Counter(item[0] for item in lst)\n    sorted_lst = sorted(lst, key=lambda x: (counts[x[0]], lst.index(x)))\n    \n    return sorted_lst"
  },
  {
    "id": 234,
    "response": "import math\n\ndef next_Perfect_Square(N):\n    root = math.ceil(math.sqrt(N))\n    next_root = root + 1\n    return next_root * next_root"
  },
  {
    "id": 235,
    "response": "def max_sum(arr, n):\n    if n > len(arr):\n        return None\n    max_sum = float('-inf')\n    current_sum = sum(arr[:n])\n    max_sum = current_sum\n    \n    for i in range(len(arr) - n):\n        current_sum = current_sum - arr[i] + arr[i + n]\n        max_sum = max(max_sum, current_sum)\n    \n    return max_sum"
  },
  {
    "id": 236,
    "response": "def babylonian_squareroot(number):\n    if number == 0:\n        return 0\n    guess = number / 2.0\n    while True:\n        new_guess = (guess + number / guess) / 2.0\n        if abs(new_guess - guess) < 1e-10:\n            return new_guess\n        guess = new_guess"
  },
  {
    "id": 237,
    "response": "def lps(str):\n    n = len(str)\n    if n == 0:\n        return 0\n    \n    dp = [[False] * n for _ in range(n)]\n    max_length = 1\n    start = 0\n    \n    # Single character substrings are palindromes\n    for i in range(n):\n        dp[i][i] = True\n    \n    # Check for substrings of length 2\n    for i in range(n-1):\n        if str[i] == str[i+1]:\n            dp[i][i+1] = True\n            max_length = 2\n            start = i\n    \n    # Check for substrings of length greater than 2\n    for length in range(3, n+1):\n        for i in range(n-length+1):\n            j = i + length - 1\n            if str[i] == str[j] and dp[i+1][j-1]:\n                dp[i][j] = True\n                max_length = length\n                start = i\n    \n    return max_length"
  },
  {
    "id": 238,
    "response": "def harmonic_sum(n):\n    if n == 1:\n        return 0\n    else:\n        return 1 / n + harmonic_sum(n - 1)"
  },
  {
    "id": 239,
    "response": "def intersection_array(array_nums1, array_nums2):\n    set1 = set(array_nums1)\n    set2 = set(array_nums2)\n    return list(set1.intersection(set2))"
  },
  {
    "id": 240,
    "response": "def count_X(tup, x):\n    count = 0\n    for element in tup:\n        if element == x:\n            count += 1\n    return count"
  },
  {
    "id": 241,
    "response": "def insert_element(lst, element):\n    result = []\n    for item in lst:\n        result.append(element)\n        result.append(item)\n    return result"
  },
  {
    "id": 242,
    "response": "def convert(numbers):\n    if isinstance(numbers, complex):\n        return (numbers.real, numbers.imag)\n    elif isinstance(numbers, (int, float)):\n        return (numbers, 0.0)\n    else:\n        raise ValueError(\"Input must be a complex number or a real number\")"
  },
  {
    "id": 243,
    "response": "def count_integer(list1):\n    count = 0\n    for item in list1:\n        if isinstance(item, int):\n            count += 1\n    return count"
  },
  {
    "id": 244,
    "response": "def words_ae(text):\n    words = text.split()\n    result = [word for word in words if word.lower().startswith(('a', 'e'))]\n    return result"
  },
  {
    "id": 245,
    "response": "def combinations_colors(colors, n):\n    def generate_combinations(index, path):\n        if len(path) == n:\n            yield tuple(path)\n            return\n        for i in range(index, len(colors)):\n            path.append(colors[i])\n            yield from generate_combinations(i + 1, path)\n            path.pop()\n\n    return list(generate_combinations(0, []))"
  },
  {
    "id": 246,
    "response": "# Final clean solution\ndef count_Primes_nums(n):\n    if n <= 2:\n        return 0\n    \n    is_prime = [True] * n\n    is_prime[0] = is_prime[1] = False\n    \n    for i in range(2, int(n**0.5) + 1):\n        if is_prime[i]:\n            for j in range(i*i, n, i):\n                is_prime[j] = False\n    \n    return sum(is_prime)"
  },
  {
    "id": 247,
    "response": "def swap_numbers(a, b):\n    return (b, a)"
  },
  {
    "id": 248,
    "response": "def count_odd(array_nums):\n    count = sum(1 for x in array_nums if x % 2 != 0)\n    return count"
  },
  {
    "id": 249,
    "response": "def maximize_elements(test_tup1, test_tup2):\n    result = []\n    for t1, t2 in zip(test_tup1, test_tup2):\n        max_tuple = tuple(max(e1, e2) for e1, e2 in zip(t1, t2))\n        result.append(max_tuple)\n    return tuple(result)"
  },
  {
    "id": 250,
    "response": "def is_prime(num):\n    if num <= 1:\n        return False\n    if num <= 3:\n        return True\n    if num % 2 == 0 or num % 3 == 0:\n        return False\n    i = 5\n    while i * i <= num:\n        if num % i == 0 or num % (i + 2) == 0:\n            return False\n        i += 6\n    return True\n\ndef newman_prime(n):\n    count = 0\n    num = 2\n    while count < n:\n        if is_prime(num):\n            count += 1\n        if count < n:\n            num = 2 * num + 1\n    return num"
  },
  {
    "id": 251,
    "response": "def division_elements(test_tup1, test_tup2):\n    result = tuple(a / b for a, b in zip(test_tup1, test_tup2))\n    return result"
  },
  {
    "id": 252,
    "response": "def split_two_parts(list1, L):\n    if L > len(list1):\n        return list1, []\n    return list1[:L], list1[L:]"
  },
  {
    "id": 253,
    "response": "def merge_dict(d1, d2):\n    merged_dict = {**d1, **d2}\n    return merged_dict"
  },
  {
    "id": 254,
    "response": "def dog_age(h_age):\n    return h_age * 7"
  },
  {
    "id": 255,
    "response": "def list_split(S, step):\n    result = []\n    for i in range(step):\n        sublist = []\n        for j in range(i, len(S), step):\n            sublist.append(S[j])\n        result.append(sublist)\n    return result"
  },
  {
    "id": 256,
    "response": "def lateralsurface_cube(l):\n    return 4 * l * l"
  },
  {
    "id": 257,
    "response": "def square_Sum(n):\n    return n * (n + 1) * (2 * n + 1) // 6"
  },
  {
    "id": 258,
    "response": "def find_star_num(n):\n    return 6 * n * (n - 1) + 1"
  },
  {
    "id": 259,
    "response": "def ascii_value(k):\n    return ord(k)"
  },
  {
    "id": 260,
    "response": "def sum_even_and_even_index(arr, n):\n    total_sum = 0\n    for i in range(n):\n        if arr[i] % 2 == 0 and i % 2 == 0:\n            total_sum += arr[i]\n    return total_sum"
  },
  {
    "id": 261,
    "response": "def even_Power_Sum(n):\n    sum_of_evens = n * (n + 1)\n    result = 0\n    for i in range(1, n + 1):\n        result += (2 * i) ** 5\n    return result"
  },
  {
    "id": 262,
    "response": "def rear_extract(test_list):\n    return [age for _, _, age in test_list]"
  },
  {
    "id": 263,
    "response": "def substract_elements(test_tup1, test_tup2):\n    result = []\n    min_length = min(len(test_tup1), len(test_tup2))\n    for i in range(min_length):\n        result.append(test_tup1[i] - test_tup2[i])\n    return tuple(result)"
  },
  {
    "id": 264,
    "response": "def even_binomial_Coeff_Sum(n):\n    return 2 ** (n - 1)"
  },
  {
    "id": 265,
    "response": "def get_Position(a, n, m):\n    for i in range(n - 1, -1, -1):\n        if a[i] == m:\n            return i\n    return -1"
  },
  {
    "id": 266,
    "response": "import math\n\ndef volume_cylinder(r, h):\n    volume = math.pi * r**2 * h\n    return round(volume, 15)"
  },
  {
    "id": 267,
    "response": "def dict_filter(dict, n):\n    result = {key: value for key, value in dict.items() if value >= n}\n    return result"
  },
  {
    "id": 268,
    "response": "def count_first_elements(test_tup):\n    count = 0\n    for item in test_tup:\n        if isinstance(item, tuple):\n            break\n        count += 1\n    return count"
  },
  {
    "id": 269,
    "response": "def is_num_decagonal(n):\n    if n <= 0:\n        return \"Invalid input\"\n    return 4 * n**2 - 3 * n"
  },
  {
    "id": 270,
    "response": "def sequential_search(dlist, item):\n    for i in range(len(dlist)):\n        if dlist[i] == item:\n            return (True, i)\n        elif dlist[i] > item:\n            return (False, i)\n    return (False, len(dlist))"
  },
  {
    "id": 271,
    "response": "def all_unique(test_list):\n    seen = set()\n    for element in test_list:\n        if element in seen:\n            return False\n        seen.add(element)\n    return True"
  },
  {
    "id": 272,
    "response": "def sub_list(nums1, nums2):\n    return [a - b for a, b in zip(nums1, nums2)]"
  },
  {
    "id": 273,
    "response": "def validate(n):\n    str_n = str(n)\n    frequency = {}\n    \n    for digit in str_n:\n        if digit in frequency:\n            frequency[digit] += 1\n        else:\n            frequency[digit] = 1\n    \n    for digit in str_n:\n        if int(digit) > frequency[digit]:\n            return False\n    \n    return True"
  },
  {
    "id": 274,
    "response": "def check_element(lst, element):\n    return any(item == element for item in lst)"
  },
  {
    "id": 275,
    "response": "import re\n\ndef text_match_two_three(text):\n    patterns = 'ab{2,3}'\n    if re.search(patterns, text):\n        return 'Matched!'\n    else:\n        return 'Not matched!'"
  },
  {
    "id": 276,
    "response": "def max_sub_array_sum_repeated(a, n, k):\n    def kadane(arr):\n        max_so_far = -float('inf')\n        max_ending_here = 0\n        for x in arr:\n            max_ending_here = max_ending_here + x\n            if max_so_far < max_ending_here:\n                max_so_far = max_ending_here\n            if max_ending_here < 0:\n                max_ending_here = 0\n        return max_so_far\n\n    max_kadane = kadane(a)\n    if max_kadane < 0:\n        return max_kadane\n\n    max_prefix_sum = -float('inf')\n    max_suffix_sum = -float('inf')\n    current_prefix_sum = 0\n    current_suffix_sum = 0\n    total_sum = 0\n\n    # Calculate max prefix sum\n    for x in a:\n        current_prefix_sum += x\n        if current_prefix_sum > max_prefix_sum:\n            max_prefix_sum = current_prefix_sum\n        total_sum += x\n\n    # Calculate max suffix sum\n    for x in reversed(a):\n        current_suffix_sum += x\n        if current_suffix_sum > max_suffix_sum:\n            max_suffix_sum = current_suffix_sum\n\n    max_double_sum = max_prefix_sum + max_suffix_sum\n\n    return max(max_kadane, max_double_sum, total_sum * k)"
  },
  {
    "id": 277,
    "response": "def square_Sum(n):\n    sum_of_first_n_natural_numbers = n * (n + 1) // 2\n    sum_of_squares = sum_of_first_n_natural_numbers ** 2\n    return sum_of_squares * 4"
  },
  {
    "id": 278,
    "response": "def modular_inverse(arr, N, P):\n    count = 0\n    for num in arr:\n        if num == 1 or num == P - 1:\n            count += 1\n    return count"
  },
  {
    "id": 279,
    "response": "def odd_Days(N):\n    if N % 4 == 0 and (N % 100 != 0 or N % 400 == 0):\n        total_days = 366\n    else:\n        total_days = 365\n    \n    odd_days = 0\n    for day in range(total_days):\n        if day % 7 != 0:\n            odd_days += 1\n    \n    return odd_days"
  },
  {
    "id": 280,
    "response": "def max_length(list1):\n    if not list1:\n        return (0, [])\n    max_length_list = list1[0]\n    max_length = len(max_length_list)\n    \n    for lst in list1:\n        if len(lst) > max_length:\n            max_length = len(lst)\n            max_length_list = lst\n    \n    return (max_length, max_length_list)"
  },
  {
    "id": 281,
    "response": "def count_no_of_ways(n, k):\n    if n == 0 or k == 0:\n        return 0\n    if n == 1:\n        return k\n    \n    # Initialize the DP table\n    dp = [[0] * (k + 1) for _ in range(n + 1)]\n    \n    # Base case: There are k ways to paint the first post\n    for j in range(1, k + 1):\n        dp[1][j] = j\n    \n    # Fill the DP table\n    for i in range(2, n + 1):\n        for j in range(1, k + 1):\n            dp[i][j] = (k - 1) * (dp[i - 1][j] + dp[i - 2][j])\n    \n    return dp[n][k]"
  },
  {
    "id": 282,
    "response": "def find(n, m):\n    return n // m"
  },
  {
    "id": 283,
    "response": "def otherside_rightangle(w, h):\n    return (w**2 + h**2)**0.5"
  },
  {
    "id": 284,
    "response": "def max_val(listval):\n    max_val = float('-inf')\n    for item in listval:\n        try:\n            num = int(item)\n            if num > max_val:\n                max_val = num\n        except (ValueError, TypeError):\n            continue\n    return max_val"
  },
  {
    "id": 285,
    "response": "def sum_div(number):\n    sum_of_divisors = 0\n    for i in range(1, number + 1):\n        if number % i == 0:\n            sum_of_divisors += i\n    return sum_of_divisors"
  },
  {
    "id": 286,
    "response": "def get_Inv_Count(arr, n):\n    inv_count = 0\n    for i in range(n):\n        for j in range(i + 1, n):\n            if arr[i] > arr[j]:\n                inv_count += 1\n    return inv_count"
  },
  {
    "id": 287,
    "response": "def flatten_list(list1):\n    def helper(sublist):\n        result = []\n        for item in sublist:\n            if isinstance(item, list):\n                result.extend(helper(item))\n            else:\n                result.append(item)\n        return result\n    return helper(list1)"
  },
  {
    "id": 288,
    "response": "def intersection_nested_lists(l1, l2):\n    result = []\n    for sublist in l2:\n        intersection = [element for element in sublist if element in l1]\n        if intersection:\n            result.append(intersection)\n    return result"
  },
  {
    "id": 289,
    "response": "def max_aggregate(stdata):\n    score_dict = {}\n    for name, score in stdata:\n        if name in score_dict:\n            score_dict[name] += score\n        else:\n            score_dict[name] = score\n    max_name = max(score_dict, key=score_dict.get)\n    return (max_name, score_dict[max_name])"
  },
  {
    "id": 290,
    "response": "def count_binary_seq(n):\n    def binomial_coeff(n, k):\n        if k > n - k:\n            k = n - k\n        res = 1\n        for i in range(k):\n            res = res * (n - i)\n            res = res // (i + 1)\n        return res\n    \n    return binomial_coeff(2 * n, n)"
  },
  {
    "id": 291,
    "response": "def dict_depth(d):\n    if isinstance(d, dict):\n        return 1 + (max(map(dict_depth, d.values())) if d else 0)\n    return 0"
  },
  {
    "id": 292,
    "response": "def set_Bit_Number(n):\n    if n == 0:\n        return 0\n    msb = 1\n    while msb <= n:\n        msb <<= 1\n    return (msb >> 1)"
  },
  {
    "id": 293,
    "response": "def solve(a, n):\n    return a == a[::-1]"
  },
  {
    "id": 294,
    "response": "# Final clean solution\ndef find_Element(arr, ranges, rotations, index):\n    for _ in range(rotations):\n        last = arr[-1]\n        for i in range(len(arr) - 1, 0, -1):\n            arr[i] = arr[i - 1]\n        arr[0] = last\n    \n    return arr[index]"
  },
  {
    "id": 295,
    "response": "def start_withp(words):\n    for word in words:\n        if word.startswith('p') or word.startswith('P'):\n            for word2 in words:\n                if word2 != word and (word2.startswith('p') or word2.startswith('P')):\n                    return (word, word2)\n    return None"
  },
  {
    "id": 296,
    "response": "# Final clean solution\n\ndef max_sum_increasing_subseq(a, n, index, k):\n    # Create a dp array to store the maximum sum ending at each index\n    dp = [0] * n\n    dp[index] = a[index]\n    \n    # Fill dp array with the maximum sum ending at each index\n    for i in range(index + 1, n):\n        if a[i] > a[index]:\n            dp[i] = dp[index] + a[i]\n    \n    # Find the maximum sum including the kth element after the given index\n    max_sum = 0\n    for i in range(index + 1, n):\n        if i != k:\n            max_sum = max(max_sum, dp[i])\n    \n    return max_sum"
  },
  {
    "id": 297,
    "response": "def colon_tuplex(tuplex, m, n):\n    if m < 0 or n >= len(tuplex) or m > n:\n        return tuplex  # Return original tuple if indices are out of bounds\n    lst = list(tuplex)\n    lst[m:n+1] = [n]  # Replace elements in the specified range with n\n    return tuple(lst)"
  },
  {
    "id": 298,
    "response": "def large_product(nums1, nums2, N):\n    from itertools import product\n    products = []\n    for a, b in product(nums1, nums2):\n        products.append(a * b)\n    products.sort(reverse=True)\n    return products[:N]"
  },
  {
    "id": 299,
    "response": "def maximum(a, b):\n    if a > b:\n        return a\n    else:\n        return b"
  },
  {
    "id": 300,
    "response": "def string_to_tuple(str1):\n    return tuple(str1)"
  },
  {
    "id": 301,
    "response": "def set_left_most_unset_bit(n):\n    if n == 0:\n        return 1\n    \n    bit_position = 0\n    while n & (1 << bit_position):\n        bit_position += 1\n    \n    return n | (1 << bit_position)"
  },
  {
    "id": 302,
    "response": "import math\n\ndef volume_cone(r, h):\n    if r <= 0 or h <= 0:\n        return 0\n    volume = (1/3) * math.pi * r**2 * h\n    return volume"
  },
  {
    "id": 303,
    "response": "def pos_nos(list1):\n    return [num for num in list1 if num > 0]"
  },
  {
    "id": 304,
    "response": "def max_sum_rectangular_grid(grid, n):\n    if not grid or not grid[0] or n <= 0:\n        return 0\n\n    rows = len(grid)\n    cols = len(grid[0])\n    if rows < n or cols < n:\n        return 0\n\n    dp = [[0] * cols for _ in range(rows)]\n    max_sum = 0\n\n    for i in range(rows):\n        for j in range(cols):\n            if i == 0 and j == 0:\n                dp[i][j] = grid[i][j]\n            elif i == 0:\n                dp[i][j] = dp[i][j-1] + grid[i][j]\n            elif j == 0:\n                dp[i][j] = dp[i-1][j] + grid[i][j]\n            else:\n                dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + grid[i][j]\n\n            if i >= n-1 and j >= n-1:\n                subgrid_sum = dp[i][j]\n                for x in range(i, i-n, -1):\n                    for y in range(j, j-n, -1):\n                        if x > 0 and y > 0:\n                            subgrid_sum -= grid[x-1][y]\n                        if x > 0 and y < cols-1:\n                            subgrid_sum -= grid[x-1][y+1]\n                        if x < rows-1 and y > 0:\n                            subgrid_sum -= grid[x+1][y-1]\n                        if x < rows-1 and y < cols-1:\n                            subgrid_sum -= grid[x+1][y+1]\n                        max_sum = max(max_sum, subgrid_sum)\n\n    return max_sum"
  },
  {
    "id": 305,
    "response": "def find_Max_Len_Even(str):\n    words = str.split()\n    max_len_even_word = \"\"\n    \n    for word in words:\n        if len(word) % 2 == 0 and len(word) > len(max_len_even_word):\n            max_len_even_word = word\n    \n    return max_len_even_word"
  },
  {
    "id": 306,
    "response": "def find_last_occurrence(A, x):\n    left, right = 0, len(A) - 1\n    last_occurrence = -1\n    \n    while left <= right:\n        mid = (left + right) // 2\n        if A[mid] == x:\n            last_occurrence = mid\n            left = mid + 1\n        elif A[mid] < x:\n            left = mid + 1\n        else:\n            right = mid - 1\n    return last_occurrence"
  },
  {
    "id": 307,
    "response": "def modified_encode(alist):\n    if not alist:\n        return alist\n    \n    encoded_list = []\n    count = 1\n    \n    for i in range(1, len(alist)):\n        if alist[i] == alist[i - 1]:\n            count += 1\n        else:\n            encoded_list.append([count, alist[i - 1]])\n            count = 1\n    encoded_list.append([count, alist[-1]])\n    \n    return encoded_list"
  },
  {
    "id": 308,
    "response": "def max_volume(s):\n    l = s / 12\n    volume = l * l * l\n    return int(volume)"
  },
  {
    "id": 309,
    "response": "# Final clean solution\n\ndef gcd(a, b):\n    if a == 0:\n        return b\n    return gcd(b % a, a)"
  },
  {
    "id": 310,
    "response": "def sum_difference(n):\n    sum_of_squares = n * (n + 1) * (2 * n + 1) // 6\n    sum_of_numbers = n * (n + 1) // 2\n    return sum_of_numbers**2 - sum_of_squares"
  },
  {
    "id": 311,
    "response": "def find_demlo(s):\n    result = \"\"\n    for i in range(1, len(s) + 1):\n        result += str(i)\n    for i in range(len(s) - 1, 0, -1):\n        result += str(i)\n    return result"
  },
  {
    "id": 312,
    "response": "def position_min(list1):\n    if not list1:\n        return []\n    \n    min_value = min(list1)\n    return [i for i, value in enumerate(list1) if value == min_value]"
  },
  {
    "id": 313,
    "response": "def right_rotate(arr, n):\n    out_of_place = -1\n    for i in range(n):\n        if out_of_place == -1:\n            if (arr[i] >= 0 and i % 2 == 0) or (arr[i] < 0 and i % 2 == 1):\n                out_of_place = i\n        else:\n            if (arr[i] >= 0 and arr[out_of_place] < 0) or (arr[i] < 0 and arr[out_of_place] >= 0):\n                arr = right_rotate_once(arr, n, out_of_place, i)\n                out_of_place += 2\n    return arr\n\ndef right_rotate_once(arr, n, out_of_place, cur):\n    temp = arr[cur]\n    for i in range(cur, out_of_place, -1):\n        arr[i] = arr[i - 1]\n    arr[out_of_place] = temp\n    return arr"
  },
  {
    "id": 314,
    "response": "def sum_of_alternates(test_tuple):\n    even_sum = 0\n    odd_sum = 0\n    for i, num in enumerate(test_tuple):\n        if i % 2 == 0:\n            even_sum += num\n        else:\n            odd_sum += num\n    return (even_sum, odd_sum)"
  },
  {
    "id": 315,
    "response": "def get_Min_Squares(n):\n    if n <= 3:\n        return n\n    squares = []\n    i = 1\n    while i * i <= n:\n        squares.append(i * i)\n        i += 1\n    dp = [float('inf')] * (n + 1)\n    dp[0] = 0\n    for i in range(1, n + 1):\n        for square in squares:\n            if i < square:\n                break\n            dp[i] = min(dp[i], dp[i - square] + 1)\n    return dp[n]"
  },
  {
    "id": 316,
    "response": "def most_occurrences(test_list):\n    from collections import Counter\n    \n    words = []\n    for string in test_list:\n        words.extend(string.split())\n    \n    word_counts = Counter(words)\n    max_word = max(word_counts, key=word_counts.get)\n    \n    return max_word"
  },
  {
    "id": 317,
    "response": "def check_isosceles(x, y, z):\n    sides = sorted([x, y, z])\n    return sides[0]**2 + sides[1]**2 == sides[2]**2"
  },
  {
    "id": 318,
    "response": "def rotate_left(list1, m, n):\n    if not list1:\n        return list1\n    n = n % len(list1)  # To handle cases where m is greater than the length of the list\n    return list1[n:] + list1[:n]"
  },
  {
    "id": 319,
    "response": "def neg_count(numbers):\n    count = 0\n    for num in numbers:\n        if num < 0:\n            count += 1\n    return count"
  },
  {
    "id": 320,
    "response": "import re\n\ndef find_char(text):\n    pattern = r'\\b\\w{3,5}\\b'\n    matches = re.findall(pattern, text)\n    return matches"
  },
  {
    "id": 321,
    "response": "def count_unset_bits(n):\n    binary_representation = bin(n)[2:]  # Convert to binary and remove the '0b' prefix\n    return binary_representation.count('0')"
  },
  {
    "id": 322,
    "response": "def char_frequency(str1):\n    frequency = {}\n    for char in str1:\n        if char in frequency:\n            frequency[char] += 1\n        else:\n            frequency[char] = 1\n    return frequency"
  },
  {
    "id": 323,
    "response": "def Sort(sub_li):\n    sub_li.sort(key=lambda x: x[1])\n    return sub_li"
  },
  {
    "id": 324,
    "response": "def check_Validity(a, b, c):\n    if a <= 0 or b <= 0 or c <= 0:\n        return False\n    if a + b > c and a + c > b and b + c > a:\n        return True\n    return False"
  },
  {
    "id": 325,
    "response": "def ap_sum(a, n, d):\n    return n * (2 * a + (n - 1) * d) // 2"
  },
  {
    "id": 326,
    "response": "def check_monthnum(monthname1):\n    days_in_month = {\n        \"January\": 31,\n        \"February\": 28,\n        \"March\": 31,\n        \"April\": 30,\n        \"May\": 31,\n        \"June\": 30,\n        \"July\": 31,\n        \"August\": 31,\n        \"September\": 30,\n        \"October\": 31,\n        \"November\": 30,\n        \"December\": 31\n    }\n    \n    if monthname1 in days_in_month:\n        return days_in_month[monthname1] == 28\n    else:\n        return False"
  },
  {
    "id": 327,
    "response": "def text_match_word(text):\n    if text.endswith('.'):\n        return 'Found a match!'\n    else:\n        return 'Not matched!'"
  },
  {
    "id": 328,
    "response": "def check_Equality(s):\n    count = 0\n    char_count = {}\n    \n    for char in s:\n        if char not in char_count:\n            char_count[char] = 0\n        char_count[char] += 1\n        count += char_count[char]\n    \n    return count"
  },
  {
    "id": 329,
    "response": "def find_Divisor(x, y):\n    if x == 0 or y == 0:\n        return max(x, y)\n    max_divisor = 1\n    for i in range(1, min(x, y) + 1):\n        if x % i == 0 and y % i == 0:\n            max_divisor = i\n    return max_divisor"
  },
  {
    "id": 330,
    "response": "def sum_three_smallest_nums(lst):\n    positive_nums = [num for num in lst if num > 0]\n    positive_nums.sort()\n    return sum(positive_nums[:3]) if len(positive_nums) >= 3 else 0"
  },
  {
    "id": 331,
    "response": "def set_to_tuple(s):\n    return tuple(s)"
  },
  {
    "id": 332,
    "response": "def __init__(self, value, list_num, index):\n    def is_valid_triangle(a, b, c):\n        return a + b > c and a + c > b and b + c > a\n\n    def perimeter(a, b, c):\n        return a + b + c\n\n    min_perimeter = float('inf')\n    best_combination = ()\n\n    for i in range(len(list_num)):\n        for j in range(i + 1, len(list_num)):\n            for a in list_num[i]:\n                for b in list_num[j]:\n                    for c in list_num[3 - i - j]:  # Ensure we don't use the same list twice\n                        if is_valid_triangle(a, b, c):\n                            p = perimeter(a, b, c)\n                            if p < min_perimeter:\n                                min_perimeter = p\n                                best_combination = (a, b, c)\n\n    return (min_perimeter, best_combination)"
  },
  {
    "id": 333,
    "response": "def dig_let(s):\n    digits = 0\n    letters = 0\n    for char in s:\n        if char.isdigit():\n            digits += 1\n        elif char.isalpha():\n            letters += 1\n    return (letters, digits)"
  },
  {
    "id": 334,
    "response": "def count_Odd_Squares(n, m):\n    count = 0\n    for i in range(n, m + 1):\n        if i % 2 != 0 and (i ** 0.5).is_integer():\n            count += 1\n    return count"
  },
  {
    "id": 335,
    "response": "def diff_consecutivenums(nums):\n    if not nums:\n        return []\n    return [nums[i+1] - nums[i] for i in range(len(nums) - 1)]"
  },
  {
    "id": 336,
    "response": "def zigzag(n, k):\n    if k <= (n + 1) // 2:\n        return 2 * k - 1\n    else:\n        return (n - k + 1) * 2"
  },
  {
    "id": 337,
    "response": "def count_Squares(m, n):\n    def count_squares_of_size(k):\n        return (m - k + 1) * (n - k + 1)\n    \n    total_squares = 0\n    for k in range(1, min(m, n) + 1):\n        total_squares += count_squares_of_size(k)\n    return total_squares"
  },
  {
    "id": 338,
    "response": "def bin_coff(n):\n    return 2 ** n"
  },
  {
    "id": 339,
    "response": "def check(string):\n    for char in string:\n        if char not in ['0', '1']:\n            return \"No\"\n    return \"Yes\""
  },
  {
    "id": 340,
    "response": "def minimum_Length(s):\n    if not s:\n        return 0\n    char_count = {}\n    for char in s:\n        if char in char_count:\n            char_count[char] += 1\n        else:\n            char_count[char] = 1\n    min_length = len(s)\n    for count in char_count.values():\n        min_length = min(min_length, len(s) - count)\n    return min_length"
  },
  {
    "id": 341,
    "response": "def first_Element(arr, n, k):\n    count_dict = {}\n    for element in arr:\n        if element in count_dict:\n            count_dict[element] += 1\n        else:\n            count_dict[element] = 1\n    \n    for element in arr:\n        if count_dict[element] == k:\n            return element\n    return -1"
  },
  {
    "id": 342,
    "response": "def unique_Characters(str):\n    seen = set()\n    for char in str:\n        if char in seen:\n            return False\n        seen.add(char)\n    return True"
  },
  {
    "id": 343,
    "response": "def remove_column(list1, n):\n    result = []\n    for sublist in list1:\n        if n < len(sublist):\n            result.append(sublist[:n] + sublist[n+1:])\n    return result"
  },
  {
    "id": 344,
    "response": "def tn_ap(a, n, d):\n    return a + (n - 1) * d"
  },
  {
    "id": 345,
    "response": "def count_Rectangles(radius):\n    count = 0\n    diameter = 2 * radius\n    for a in range(1, radius + 1):\n        for b in range(1, radius + 1):\n            if a**2 + b**2 <= diameter**2:\n                count += 1\n    return count"
  },
  {
    "id": 346,
    "response": "def find_angle(a, b):\n    return 180 - (a + b)"
  },
  {
    "id": 347,
    "response": "def find_max(test_list):\n    max_element = float('-inf')\n    for tup in test_list:\n        current_max = max(tup)\n        if current_max > max_element:\n            max_element = current_max\n    return max_element"
  },
  {
    "id": 348,
    "response": "def moddiv_list(nums1, nums2):\n    result = []\n    for num1, num2 in zip(nums1, nums2):\n        if num2 == 0:\n            result.append(None)  # Avoid division by zero\n        else:\n            result.append(num1 % num2)\n    return result"
  },
  {
    "id": 349,
    "response": "def Check_Solution(a, b, c):\n    import math\n    discriminant = b**2 - 4*a*c\n    if discriminant >= 0:\n        root1 = (-b + math.sqrt(discriminant)) / (2*a)\n        root2 = (-b - math.sqrt(discriminant)) / (2*a)\n        if root1 == 2 * root2 or root2 == 2 * root1:\n            return \"Yes\"\n        else:\n            return \"No\"\n    else:\n        return \"No\""
  },
  {
    "id": 350,
    "response": "def get_carol(n):\n    return (2**(2**n)) - 2**(2**n) + 1"
  },
  {
    "id": 351,
    "response": "def remove_empty(list1):\n    return [item for item in list1 if not isinstance(item, list) or item]"
  },
  {
    "id": 352,
    "response": "def max_occurrences(nums):\n    if not nums:\n        return None\n    \n    count_dict = {}\n    for num in nums:\n        if num in count_dict:\n            count_dict[num] += 1\n        else:\n            count_dict[num] = 1\n    \n    max_count = max(count_dict.values())\n    for num, count in count_dict.items():\n        if count == max_count:\n            return num"
  },
  {
    "id": 353,
    "response": "def add_K_element(test_list, K):\n    result = []\n    for t in test_list:\n        new_tuple = tuple(x + K for x in t)\n        result.append(new_tuple)\n    return result"
  },
  {
    "id": 354,
    "response": "def make_flip(ch):\n    flips = 0\n    for i in range(len(ch)):\n        expected = '0' if i % 2 == 0 else '1'\n        if ch[i] != expected:\n            flips += 1\n    return flips"
  },
  {
    "id": 355,
    "response": "def count_Digit(n):\n    return len(str(abs(n)))"
  },
  {
    "id": 356,
    "response": "def adjacent_num_product(list_nums):\n    if not list_nums:\n        return None\n    max_product = list_nums[0] * list_nums[1]\n    for i in range(1, len(list_nums) - 1):\n        product = list_nums[i] * list_nums[i + 1]\n        if product > max_product:\n            max_product = product\n    return max_product"
  },
  {
    "id": 357,
    "response": "class TreeNode:\n    def __init__(self, data):\n        self.data = data\n        self.left = None\n        self.right = None\n\ndef is_balanced(root):\n    def check_height(node):\n        if node is None:\n            return 0\n        \n        left_height = check_height(node.left)\n        if left_height == -1:\n            return -1\n        \n        right_height = check_height(node.right)\n        if right_height == -1:\n            return -1\n        \n        if abs(left_height - right_height) > 1:\n            return -1\n        \n        return max(left_height, right_height) + 1\n    \n    return check_height(root) != -1"
  },
  {
    "id": 358,
    "response": "def repeat_tuples(test_tup, N):\n    result = test_tup * N\n    return result"
  },
  {
    "id": 359,
    "response": "def gcd(a, b):\n    while b:\n        a, b = b, a % b\n    return a"
  },
  {
    "id": 360,
    "response": "def float_sort(price):\n    sorted_prices = sorted(price, key=lambda x: float(x[1]), reverse=True)\n    return sorted_prices"
  },
  {
    "id": 361,
    "response": "def smallest_missing(A, left_element, right_element):\n    if left_element > right_element:\n        return left_element\n    \n    mid = (left_element + right_element) // 2\n    \n    if A[mid] == mid:\n        return smallest_missing(A, mid + 1, right_element)\n    else:\n        return smallest_missing(A, left_element, mid - 1)"
  },
  {
    "id": 362,
    "response": "import heapq\n\ndef heap_assending(nums):\n    heapq.heapify(nums)\n    return nums"
  },
  {
    "id": 363,
    "response": "def volume_cuboid(l, w, h):\n    return l * w * h"
  },
  {
    "id": 364,
    "response": "def permute_string(s):\n    def backtrack(start, end):\n        if start == end:\n            result.append(''.join(s))\n        else:\n            for i in range(start, end):\n                s[start], s[i] = s[i], s[start]  # Swap\n                backtrack(start + 1, end)\n                s[start], s[i] = s[i], s[start]  # Backtrack\n\n    result = []\n    s = list(s)\n    backtrack(0, len(s))\n    return result"
  },
  {
    "id": 365,
    "response": "def round_num(n, m):\n    remainder = n % m\n    if remainder <= m / 2:\n        return n - remainder\n    else:\n        return n + (m - remainder)"
  },
  {
    "id": 366,
    "response": "def remove_replica(test_tup):\n    seen = {}\n    result = []\n    for item in test_tup:\n        if item in seen:\n            seen[item] += 1\n            result.append('MSP')\n        else:\n            seen[item] = 1\n            result.append(item)\n    return tuple(result)"
  },
  {
    "id": 367,
    "response": "def remove_Char(s, c):\n    return s.replace(c, \"\")"
  },
  {
    "id": 368,
    "response": "def move_first(test_list):\n    if not test_list:  # Check if the list is empty\n        return test_list\n    return test_list[-1:] + test_list[:-1]"
  },
  {
    "id": 369,
    "response": "def surfacearea_cuboid(l, w, h):\n    return 2 * (l * w + w * h + h * l)"
  },
  {
    "id": 370,
    "response": "def multi_list(rownum, colnum):\n    matrix = [[0 for _ in range(colnum)] for _ in range(rownum)]\n    for i in range(rownum):\n        for j in range(colnum):\n            matrix[i][j] = i * j\n    return matrix"
  },
  {
    "id": 371,
    "response": "def index_on_inner_list(list_data, index_no):\n    sorted_list = sorted(list_data, key=lambda x: x[index_no])\n    return sorted_list"
  },
  {
    "id": 372,
    "response": "def find_rotation_count(A):\n    left, right = 0, len(A) - 1\n    \n    while left <= right:\n        if A[left] <= A[right]:\n            return left\n        \n        mid = (left + right) // 2\n        next_mid = (mid + 1) % len(A)\n        prev_mid = (mid - 1 + len(A)) % len(A)\n        \n        if A[mid] <= A[next_mid] and A[mid] <= A[prev_mid]:\n            return mid\n        elif A[left] <= A[mid]:\n            left = mid + 1\n        elif A[mid] <= A[right]:\n            right = mid - 1\n    \n    return -1"
  },
  {
    "id": 373,
    "response": "def even_bit_toggle_number(n):\n    mask = 0xAAAAAAAA\n    return n ^ mask"
  },
  {
    "id": 374,
    "response": "def frequency_Of_Smallest(n, arr):\n    if not arr:\n        return 0\n    smallest = min(arr)\n    return arr.count(smallest)"
  },
  {
    "id": 375,
    "response": "# Final clean solution\nmemo = {0: 3, 1: 0, 2: 2}\n\ndef get_perrin(n):\n    if n in memo:\n        return memo[n]\n    memo[n] = get_perrin(n - 2) + get_perrin(n - 3)\n    return memo[n]"
  },
  {
    "id": 376,
    "response": "def swap_count(s):\n    stack = []\n    swaps = 0\n    for bracket in s:\n        if bracket == '[':\n            stack.append(bracket)\n        elif bracket == ']':\n            if stack and stack[-1] == '[':\n                stack.pop()\n            else:\n                swaps += 1\n                stack.append('[')\n    return swaps"
  },
  {
    "id": 377,
    "response": "def even_or_odd(N):\n    digits = ''.join(filter(str.isdigit, N))\n    if not digits:\n        return \"Odd\"\n    num = int(digits)\n    return \"Even\" if num % 2 == 0 else \"Odd\""
  },
  {
    "id": 378,
    "response": "def highest_Power_of_2(n):\n    if n < 1:\n        return 0\n    power = 1\n    while power <= n:\n        power <<= 1\n    return power >> 1"
  },
  {
    "id": 379,
    "response": "def find_lucas(n):\n    if n == 0:\n        return 2\n    elif n == 1:\n        return 1\n    \n    prev, curr = 2, 1\n    for _ in range(2, n + 1):\n        prev, curr = curr, prev + curr\n    return curr"
  },
  {
    "id": 380,
    "response": "def add_string(lst, string):\n    result = []\n    for index, item in enumerate(lst):\n        new_item = string.format(item)\n        result.append(new_item)\n    return result"
  },
  {
    "id": 381,
    "response": "def convert_list_dictionary(l1, l2, l3):\n    result = []\n    for id, name, score in zip(l1, l2, l3):\n        temp_dict = {id: {name: score}}\n        result.append(temp_dict)\n    return result"
  },
  {
    "id": 382,
    "response": "# Final clean solution\nmemo = {}\n\ndef get_max_sum(n):\n    if n in memo:\n        return memo[n]\n    if n == 0:\n        return 0\n    if n == 1:\n        return 1\n    \n    max_sum = n\n    if n // 2 > 0:\n        max_sum = max(max_sum, get_max_sum(n // 2) + get_max_sum(n // 3) + get_max_sum(n // 4) + get_max_sum(n // 5))\n    \n    memo[n] = max_sum\n    return max_sum"
  },
  {
    "id": 383,
    "response": "def max_length_list(input_list):\n    max_length = max(map(len, input_list))\n    for sublist in input_list:\n        if len(sublist) == max_length:\n            return (max_length, sublist)"
  },
  {
    "id": 384,
    "response": "def check_distinct(test_tup):\n    return len(set(test_tup)) != len(test_tup)"
  },
  {
    "id": 385,
    "response": "def first_non_repeating_character(str1):\n    char_order = []\n    ctr = {}\n    for c in str1:\n        if c in ctr:\n            ctr[c] += 1\n        else:\n            ctr[c] = 1\n            char_order.append(c)\n    for c in char_order:\n        if ctr[c] == 1:\n            return c\n    return None"
  },
  {
    "id": 386,
    "response": "def check_char(string):\n    if string and string[0] == string[-1]:\n        return \"Valid\"\n    else:\n        return \"Invalid\""
  },
  {
    "id": 387,
    "response": "def median_numbers(a, b, c):\n    if a > b:\n        if a < c:\n            return a\n        elif b > c:\n            return b\n        else:\n            return c\n    else:\n        if a > c:\n            return a\n        elif b < c:\n            return b\n        else:\n            return c"
  },
  {
    "id": 388,
    "response": "def sum_of_digits(nums):\n    result = []\n    for num in nums:\n        digit_sum = sum(int(digit) for digit in str(num))\n        result.append(digit_sum)\n    return result"
  },
  {
    "id": 389,
    "response": "def bitwise_xor(test_tup1, test_tup2):\n    res = tuple(a ^ b for a, b in zip(test_tup1, test_tup2))\n    return res"
  },
  {
    "id": 390,
    "response": "def extract_freq(test_list):\n    freq_dict = {}\n    for tup in test_list:\n        if tup in freq_dict:\n            freq_dict[tup] += 1\n        else:\n            freq_dict[tup] = 1\n    max_freq = max(freq_dict.values())\n    return max_freq"
  },
  {
    "id": 391,
    "response": "def add_nested_tuples(test_tup1, test_tup2):\n    result = tuple(map(lambda x, y: tuple(map(sum, zip(x, y))), test_tup1, test_tup2))\n    return result"
  },
  {
    "id": 392,
    "response": "def ncr_modp(n, r, p):\n    if r > n:\n        return 0\n    if r == 0 or r == n:\n        return 1\n    \n    # Initialize the result\n    result = 1\n    \n    # Compute nCr % p using a dynamic programming approach\n    for i in range(1, r + 1):\n        result = (result * (n - i + 1)) % p\n        result = (result * pow(i, p - 2, p)) % p\n    \n    return result"
  },
  {
    "id": 393,
    "response": "import re\n\ndef is_valid_URL(str):\n    pattern = r'^https?://'\n    return bool(re.match(pattern, str))"
  },
  {
    "id": 394,
    "response": "def minimum(a, b):\n    return a if a < b else b"
  },
  {
    "id": 395,
    "response": "def check_tuplex(tuplex, element):\n    return element in tuplex"
  },
  {
    "id": 396,
    "response": "def find_Parity(x):\n    if x % 2 == 0:\n        return \"Even Parity\"\n    else:\n        return \"Odd Parity\""
  },
  {
    "id": 397,
    "response": "def rearrange_bigger(n):\n    digits = list(str(n))\n    digits.sort(reverse=True)\n    largest_number = int(''.join(digits))\n    return largest_number"
  },
  {
    "id": 398,
    "response": "# Final clean solution\nimport heapq\n\ndef k_smallest_pairs(nums1, nums2, k):\n    if not nums1 or not nums2:\n        return []\n    \n    min_heap = []\n    for num in nums1:\n        heapq.heappush(min_heap, (num + nums2[0], num, nums2[0], 0))\n    \n    result = []\n    while min_heap and k > 0:\n        _, num1, num2, idx = heapq.heappop(min_heap)\n        result.append([num1, num2])\n        k -= 1\n        if idx + 1 < len(nums2):\n            heapq.heappush(min_heap, (num1 + nums2[idx + 1], num1, nums2[idx + 1], idx + 1))\n    \n    return result"
  },
  {
    "id": 399,
    "response": "def min_product_tuple(list1):\n    if not list1:\n        return None\n    min_product = float('inf')\n    for a, b in list1:\n        product = a * b\n        if product < min_product:\n            min_product = product\n    return min_product"
  },
  {
    "id": 400,
    "response": "def min_val(listval):\n    if not listval:\n        return None\n    min_value = listval[0]\n    for item in listval:\n        if isinstance(item, int) and item < min_value:\n            min_value = item\n    return min_value"
  },
  {
    "id": 401,
    "response": "# Final clean solution\nimport re\n\ndef snake_to_camel(word):\n    words = word.split('_')\n    camel_case = words[0] + ''.join(word.capitalize() for word in words[1:])\n    return camel_case"
  },
  {
    "id": 402,
    "response": "def gcd(a, b):\n    while b:\n        a, b = b, a % b\n    return a"
  },
  {
    "id": 403,
    "response": "def extract_nth_element(list1, n):\n    result = [item[n] for item in list1]\n    return result"
  },
  {
    "id": 404,
    "response": "def overlapping(list1, list2):\n    set1 = set(list1)\n    set2 = set(list2)\n    return bool(set1 & set2)"
  },
  {
    "id": 405,
    "response": "def max_Product(arr):\n    if len(arr) < 2:\n        return None\n    \n    max_product = float('-inf')\n    result_pair = (None, None)\n    \n    for i in range(len(arr)):\n        for j in range(i + 1, len(arr)):\n            product = arr[i] * arr[j]\n            if product > max_product:\n                max_product = product\n                result_pair = (arr[i], arr[j])\n    \n    return result_pair"
  },
  {
    "id": 406,
    "response": "def breakSum(n):\n    max_sum = 0\n    for i in range(1, n//3 + 1):\n        for j in range(i, (n-i)//2 + 1):\n            k = n - i - j\n            current_sum = i + j + k\n            if current_sum > max_sum:\n                max_sum = current_sum\n    return max_sum"
  },
  {
    "id": 407,
    "response": "def group_tuples(Input):\n    if not Input:\n        return []\n    \n    first_elements = set(tup[0] for tup in Input)\n    \n    result = []\n    for first in first_elements:\n        new_tup = (first,) + tuple(tup[1] for tup in Input if tup[0] == first)\n        result.append(new_tup)\n    \n    return result"
  },
  {
    "id": 408,
    "response": "def Find_Max(lst):\n    max_sublist = []\n    for sublist in lst:\n        if len(sublist) > len(max_sublist):\n            max_sublist = sublist\n    return max_sublist"
  },
  {
    "id": 409,
    "response": "def round_and_sum(list1):\n    rounded_numbers = [round(num) for num in list1]\n    total_sum = sum(rounded_numbers)\n    return total_sum * len(list1)"
  },
  {
    "id": 410,
    "response": "def cube_Sum(n):\n    sum_of_cubes = 0\n    for i in range(1, n + 1):\n        even_number = 2 * i\n        sum_of_cubes += even_number ** 3\n    return sum_of_cubes"
  },
  {
    "id": 411,
    "response": "def concatenate_tuple(test_tup):\n    result = \"-\".join(str(x) for x in test_tup)\n    return result"
  },
  {
    "id": 412,
    "response": "def find_Average_Of_Cube(n):\n    sum_of_cubes = (n * (n + 1) // 2) ** 2\n    average = sum_of_cubes / n\n    return average"
  },
  {
    "id": 413,
    "response": "def get_maxgold(gold, m, n):\n    if not gold or not gold[0]:\n        return 0\n    \n    dp = [[0] * n for _ in range(m)]\n    dp[0][0] = gold[0][0]\n    \n    for i in range(m):\n        for j in range(n):\n            if i == 0 and j == 0:\n                continue\n            top = dp[i-1][j] if i > 0 else 0\n            left = dp[i][j-1] if j > 0 else 0\n            top_left = dp[i-1][j-1] if i > 0 and j > 0 else 0\n            dp[i][j] = gold[i][j] + max(top, left, top_left)\n    \n    return dp[m-1][n-1]"
  },
  {
    "id": 414,
    "response": "def extract_rear(test_tuple):\n    result = [string[-1] for string in test_tuple]\n    return result"
  },
  {
    "id": 415,
    "response": "def count_element_in_list(list1, x):\n    count = 0\n    for sublist in list1:\n        if x in sublist:\n            count += 1\n    return count"
  },
  {
    "id": 416,
    "response": "def filter_oddnumbers(nums):\n    return list(filter(lambda x: x % 2 != 0, nums))"
  },
  {
    "id": 417,
    "response": "import re\n\ndef change_date_format(dt):\n    match = re.match(r'(\\d{4})-(\\d{2})-(\\d{2})', dt)\n    if match:\n        year, month, day = match.groups()\n        return f\"{day}-{month}-{year}\"\n    else:\n        return dt"
  },
  {
    "id": 418,
    "response": "# Final clean solution\ndef shell_sort(my_list):\n    n = len(my_list)\n    gap = n // 2\n\n    while gap > 0:\n        for i in range(gap, n):\n            temp = my_list[i]\n            j = i\n            while j >= gap and my_list[j - gap] > temp:\n                my_list[j] = my_list[j - gap]\n                j -= gap\n            my_list[j] = temp\n        gap //= 2\n\n    return my_list"
  },
  {
    "id": 419,
    "response": "def and_tuples(test_tup1, test_tup2):\n    result = tuple(int(a == b) for a, b in zip(test_tup1, test_tup2))\n    return result"
  },
  {
    "id": 420,
    "response": "def parabola_directrix(a, b, c):\n    d = c - (b**2 / (4*a))\n    return d"
  },
  {
    "id": 421,
    "response": "def common_element(list1, list2):\n    set1 = set(list1)\n    set2 = set(list2)\n    return bool(set1.intersection(set2))"
  },
  {
    "id": 422,
    "response": "def median_trapezium(base1, base2, height):\n    median = (base1 + base2) / 2\n    return median"
  },
  {
    "id": 423,
    "response": "def check_greater(arr, number):\n    if all(number > x for x in arr):\n        return 'Yes, entered number is greater than those in the array'\n    else:\n        return 'No, entered number is less than those in the array'"
  },
  {
    "id": 424,
    "response": "def text_match_one(text):\n    if 'a' in text or 'b' in text:\n        return 'Matched!'\n    else:\n        return 'Not matched!'"
  },
  {
    "id": 425,
    "response": "def last_Digit(n):\n    return n % 10"
  },
  {
    "id": 426,
    "response": "def neg_nos(list1):\n    for num in list1:\n        if num < 0:\n            return num\n    return None"
  },
  {
    "id": 427,
    "response": "def remove_odd(str1):\n    char_count = {}\n    for char in str1:\n        if char in char_count:\n            char_count[char] += 1\n        else:\n            char_count[char] = 1\n    \n    result = \"\"\n    for char in str1:\n        if char_count[char] % 2 == 0:\n            result += char\n    \n    return result"
  },
  {
    "id": 428,
    "response": "def count_bidirectional(test_list):\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(i + 1, len(test_list)):\n            if test_list[i][0] == test_list[j][1] and test_list[i][1] == test_list[j][0]:\n                count += 1\n    return str(count)"
  },
  {
    "id": 429,
    "response": "def multiple_to_single(L):\n    result = ''\n    for num in L:\n        result += str(num)\n    return int(result)"
  },
  {
    "id": 430,
    "response": "import re\n\ndef find_adverb_position(text):\n    pattern = r'\\b\\w+ly\\b'\n    match = re.search(pattern, text)\n    \n    if match:\n        start_index = match.start()\n        end_index = match.end()\n        adverb = match.group()\n        return (start_index, end_index, adverb)\n    else:\n        return None"
  },
  {
    "id": 431,
    "response": "def surfacearea_cube(l):\n    return 6 * l * l"
  },
  {
    "id": 432,
    "response": "def positive_count(nums):\n    if not nums:  # Check if the array is empty\n        return 0\n    positive_count = sum(1 for num in nums if num > 0)  # Count positive numbers\n    total_count = len(nums)  # Get the total number of elements\n    return positive_count / total_count if total_count > 0 else 0  # Return the ratio"
  },
  {
    "id": 433,
    "response": "def largest_neg(list1):\n    largest_neg_num = None\n    for num in list1:\n        if num < 0:\n            if largest_neg_num is None or num > largest_neg_num:\n                largest_neg_num = num\n    return largest_neg_num"
  },
  {
    "id": 434,
    "response": "def trim_tuple(test_list, K):\n    result = [t[K:] for t in test_list]\n    return str(result)"
  },
  {
    "id": 435,
    "response": "def index_multiplication(test_tup1, test_tup2):\n    res = tuple(\n        tuple(a * b for a, b in zip(tup1, tup2))\n        for tup1, tup2 in zip(test_tup1, test_tup2)\n    )\n    return res"
  },
  {
    "id": 436,
    "response": "def count_Occurrence(tup, lst):\n    count = 0\n    for element in tup:\n        if element in lst:\n            count += 1\n    return count"
  },
  {
    "id": 437,
    "response": "def cube_nums(nums):\n    return list(map(lambda x: x**3, nums))"
  },
  {
    "id": 438,
    "response": "def cal_sum(n):\n    return n * (n + 1) // 2"
  },
  {
    "id": 439,
    "response": "def check_Triangle(x1, y1, x2, y2, x3, y3):\n    area = 0.5 * abs(x1*(y2 - y3) + x2*(y3 - y1) + x3*(y1 - y2))\n    if area == 0:\n        return 'Yes'\n    else:\n        return 'No'"
  },
  {
    "id": 440,
    "response": "def extract_string(str_list, l):\n    return [s for s in str_list if len(s) > l]"
  },
  {
    "id": 441,
    "response": "import re\n\ndef remove_whitespaces(text1):\n    return re.sub(r'\\s+', '', text1)"
  },
  {
    "id": 442,
    "response": "def loss_amount(actual_cost, sale_amount):\n    if sale_amount < actual_cost:\n        return actual_cost - sale_amount\n    else:\n        return None"
  },
  {
    "id": 443,
    "response": "def sumofFactors(n):\n    if n == 0:\n        return 0\n    sum_factors = 0\n    for i in range(1, n + 1):\n        if n % i == 0:\n            for j in range(i, n + 1):\n                if i * j == n:\n                    sum_factors += i + j\n    return sum_factors"
  },
  {
    "id": 444,
    "response": "def text_match_wordz(text):\n    if 'z' in text.lower():\n        return 'Found a match!'\n    else:\n        return 'Not matched!'"
  },
  {
    "id": 445,
    "response": "def check_monthnumb_number(monthnum2):\n    months_with_31_days = [1, 3, 5, 7, 8, 10, 12]\n    return monthnum2 in months_with_31_days"
  },
  {
    "id": 446,
    "response": "def reverse_string_list(stringlist):\n    reversed_list = []\n    for s in stringlist:\n        reversed_list.append(s[::-1])\n    return reversed_list"
  },
  {
    "id": 447,
    "response": "def Find_Min(lst):\n    min_length = float('inf')\n    min_list = []\n    for sublist in lst:\n        if len(sublist) < min_length:\n            min_length = len(sublist)\n            min_list = sublist\n    return min_list"
  },
  {
    "id": 448,
    "response": "def rectangle_area(l, b):\n    return l * b"
  },
  {
    "id": 449,
    "response": "import re\n\ndef remove_uppercase(str1):\n    return re.sub(r'[A-Z]', '', str1)"
  },
  {
    "id": 450,
    "response": "def Extract(lst):\n    return [item[0] for item in lst]"
  },
  {
    "id": 451,
    "response": "def upper_ctr(str):\n    count = 0\n    for char in str:\n        if char.isupper():\n            count += 1\n    return count"
  },
  {
    "id": 452,
    "response": "def combinations_list(list1):\n    n = len(list1)\n    combs = []\n    for i in range(1 << n):\n        comb = [list1[j] for j in range(n) if (i & (1 << j))]\n        combs.append(comb)\n    return combs"
  },
  {
    "id": 453,
    "response": "# Final clean solution\ndef max_subarray_product(arr):\n    if not arr:\n        return 0\n    \n    max_product = arr[0]\n    min_product = arr[0]\n    result = arr[0]\n    \n    for i in range(1, len(arr)):\n        if arr[i] == 0:\n            max_product = 1\n            min_product = 1\n            result = max(result, 0)\n        else:\n            temp_max = max_product\n            max_product = max(max_product * arr[i], min_product * arr[i], arr[i])\n            min_product = min(temp_max * arr[i], min_product * arr[i], arr[i])\n            result = max(result, max_product)\n    \n    return result"
  },
  {
    "id": 454,
    "response": "def check_value(dict, n):\n    if not dict:  # Check if the dictionary is empty\n        return False\n    first_value = next(iter(dict.values()))  # Get the first value in the dictionary\n    return all(value == first_value for value in dict.values())  # Check if all values are the same"
  },
  {
    "id": 455,
    "response": "def drop_empty(dict1):\n    return {key: value for key, value in dict1.items() if value is not None}"
  },
  {
    "id": 456,
    "response": "def find_peak_util(arr, n):\n    return find_peak_util_helper(arr, 0, n - 1, n)\n\ndef find_peak_util_helper(arr, low, high, n):\n    mid = (low + high) // 2\n    if ((mid == 0 or arr[mid - 1] <= arr[mid]) and\n        (mid == n - 1 or arr[mid + 1] <= arr[mid])):\n        return mid\n    elif (mid > 0 and arr[mid - 1] > arr[mid]):\n        return find_peak_util_helper(arr, low, mid - 1, n)\n    else:\n        return find_peak_util_helper(arr, mid + 1, high, n)"
  },
  {
    "id": 457,
    "response": "def gcd(a, b):\n    while b:\n        a, b = b, a % b\n    return a"
  },
  {
    "id": 458,
    "response": "def max_product(arr, n):\n    if n < 2:\n        return None  # Not enough elements to form a product\n\n    arr.sort()\n    return max(arr[0] * arr[1], arr[-1] * arr[-2])"
  },
  {
    "id": 459,
    "response": "def max_profit(price, k):\n    n = len(price)\n    dp = [[0 for _ in range(k + 1)] for _ in range(n + 1)]\n    \n    for i in range(1, n + 1):\n        for j in range(1, k + 1):\n            max_so_far = 0\n            for x in range(i):\n                max_so_far = max(max_so_far, price[i - 1] - price[x] + dp[x][j - 1])\n            dp[i][j] = max(dp[i - 1][j], max_so_far)\n    \n    return dp[n][k]"
  },
  {
    "id": 460,
    "response": "def add_pairwise(test_tup):\n    res = tuple(test_tup[i] + test_tup[i+1] for i in range(len(test_tup) - 1))\n    return res"
  },
  {
    "id": 461,
    "response": "def find_remainder(arr, lens, n):\n    product = 1\n    for num in arr:\n        product = (product * num) % n\n    return product"
  },
  {
    "id": 462,
    "response": "def check_Consecutive(l):\n    return sorted(l) == list(range(min(l), max(l) + 1))"
  },
  {
    "id": 463,
    "response": "def tuple_intersection(test_list1, test_list2):\n    result = set()\n    for t1 in test_list1:\n        for t2 in test_list2:\n            if t1[0] == t2[0] and t1[1] == t2[1]:\n                result.add(t1)\n                break\n    return result"
  },
  {
    "id": 464,
    "response": "def replace_char(str1, ch, newch):\n    result = \"\"\n    for char in str1:\n        if char == ch:\n            result += newch\n        else:\n            result += char\n    return result"
  },
  {
    "id": 465,
    "response": "def sort_counter(dict1):\n    sorted_items = sorted(dict1.items(), key=lambda item: item[1], reverse=True)\n    return sorted_items"
  },
  {
    "id": 466,
    "response": "def big_sum(nums):\n    if not nums:\n        return 0\n    if len(nums) == 1:\n        return nums[0] * 2\n    min_val = min(nums)\n    max_val = max(nums)\n    return min_val + max_val"
  },
  {
    "id": 467,
    "response": "def is_lower(string):\n    return string.lower()"
  },
  {
    "id": 468,
    "response": "def remove_lowercase(str1):\n    result = \"\"\n    for char in str1:\n        if not char.islower():\n            result += char\n    return result"
  },
  {
    "id": 469,
    "response": "def first_Digit(n):\n    n = str(n)\n    if n[0] == '-':\n        return int(n[1])\n    else:\n        return int(n[0])"
  },
  {
    "id": 470,
    "response": "def get_max_occuring_char(str1):\n    char_count = {}\n    for char in str1:\n        if char in char_count:\n            char_count[char] += 1\n        else:\n            char_count[char] = 1\n    \n    max_char = None\n    max_count = 0\n    for char, count in char_count.items():\n        if count > max_count:\n            max_count = count\n            max_char = char\n    \n    return max_char"
  },
  {
    "id": 471,
    "response": "def is_subset_sum(set, n, sum):\n    dp = [[False for _ in range(sum + 1)] for _ in range(n + 1)]\n    \n    # Base case: sum is 0\n    for i in range(n + 1):\n        dp[i][0] = True\n    \n    # Fill the dp table\n    for i in range(1, n + 1):\n        for j in range(1, sum + 1):\n            if set[i - 1] <= j:\n                dp[i][j] = dp[i - 1][j] or dp[i - 1][j - set[i - 1]]\n            else:\n                dp[i][j] = dp[i - 1][j]\n    \n    return dp[n][sum]"
  },
  {
    "id": 472,
    "response": "import re\n\ndef match(text):\n    pattern = r'^[A-Z][a-z]'\n    if re.match(pattern, text):\n        return 'Yes'\n    else:\n        return 'No'"
  },
  {
    "id": 473,
    "response": "def first_Factorial_Divisible_Number(x):\n    def factorial(n):\n        if n == 0 or n == 1:\n            return 1\n        else:\n            return n * factorial(n - 1)\n    \n    n = 1\n    while True:\n        if factorial(n) % x == 0:\n            return n\n        n += 1"
  },
  {
    "id": 474,
    "response": "def remove_matching_tuple(test_list1, test_list2):\n    result = []\n    for tuple1 in test_list1:\n        if tuple1 not in test_list2:\n            result.append(tuple1)\n    return result"
  },
  {
    "id": 475,
    "response": "def is_palindrome(n):\n    return str(n) == str(n)[::-1]\n\ndef find_largest_palindrome(arr):\n    largest_palindrome = None\n    for num in arr:\n        if is_palindrome(num):\n            if largest_palindrome is None or num > largest_palindrome:\n                largest_palindrome = num\n    return largest_palindrome"
  },
  {
    "id": 476,
    "response": "def nCr(n, r):\n    if r > n:\n        return 0\n    if r == 0 or r == n:\n        return 1\n    if r == 1 or r == n - 1:\n        return n\n    \n    # Calculate nCr using a more efficient method\n    numerator = 1\n    denominator = 1\n    for i in range(1, r + 1):\n        numerator *= (n - i + 1)\n        denominator *= i\n    return numerator / denominator\n\ndef nCr_probability(n, r, p):\n    coeff = nCr(n, r)\n    probability = coeff * (p ** r) * ((1 - p) ** (n - r))\n    return probability"
  },
  {
    "id": 477,
    "response": "def sort_tuple(tup):\n    return sorted(tup, key=lambda x: x[-1])"
  },
  {
    "id": 478,
    "response": "import math\n\ndef area_pentagon(a):\n    area = (math.sqrt(5 * (5 + 2 * math.sqrt(5))) * a**2) / 4\n    return area"
  },
  {
    "id": 479,
    "response": "def frequency_Of_Largest(n, arr):\n    if not arr:\n        return 0\n    max_value = max(arr)\n    frequency = arr.count(max_value)\n    return frequency"
  },
  {
    "id": 480,
    "response": "def extract_symmetric(test_list):\n    result_set = set()\n    for pair in test_list:\n        if (pair[1], pair[0]) in test_list:\n            result_set.add(tuple(sorted([pair[0], pair[1]])))\n    return result_set"
  },
  {
    "id": 481,
    "response": "def sum_gp(a, n, r):\n    if r == 1:\n        return a * n\n    else:\n        return a * (1 - r**n) / (1 - r)"
  },
  {
    "id": 482,
    "response": "def binary_search(item_list, item):\n    first = 0\n    last = len(item_list) - 1\n    found = False\n    \n    while first <= last and not found:\n        midpoint = (first + last) // 2\n        if item_list[midpoint] == item:\n            found = True\n        else:\n            if item < item_list[midpoint]:\n                last = midpoint - 1\n            else:\n                first = midpoint + 1\n    \n    return found"
  },
  {
    "id": 483,
    "response": "import math\n\ndef calculate_polygons(startx, starty, endx, endy, radius):\n    def hexagon_vertices(cx, cy, r):\n        vertices = []\n        for i in range(6):\n            angle_deg = 60 * i\n            angle_rad = math.radians(angle_deg)\n            x = cx + r * math.cos(angle_rad)\n            y = cy + r * math.sin(angle_rad)\n            vertices.append((x, y))\n        return vertices\n\n    polygons = []\n    x_step = (endx - startx) / 3\n    y_step = (endy - starty) / 3\n\n    for i in range(3):\n        for j in range(3):\n            cx = startx + x_step * i\n            cy = starty + y_step * j\n            vertices = hexagon_vertices(cx, cy, radius)\n            polygons.append(vertices)\n\n    return polygons"
  },
  {
    "id": 484,
    "response": "def binary_to_integer(test_tup):\n    binary_str = ''.join(map(str, test_tup))\n    result = int(binary_str, 2)\n    return str(result)"
  },
  {
    "id": 485,
    "response": "import re\n\ndef remove_lowercase(str1):\n    return re.sub(r'[a-z]', '', str1)"
  },
  {
    "id": 486,
    "response": "import heapq\n\ndef heap_queue_smallest(nums, n):\n    if n == 0 or not nums:\n        return []\n    return heapq.nsmallest(n, nums)"
  },
  {
    "id": 487,
    "response": "import math\n\ndef surfacearea_cone(r, h):\n    surface_area = math.pi * r * (r + math.sqrt(h**2 + r**2))\n    return surface_area"
  },
  {
    "id": 488,
    "response": "def gcd(x, y):\n    while y != 0:\n        x, y = y, x % y\n    return x"
  },
  {
    "id": 489,
    "response": "def diameter_circle(r):\n    return 2 * r"
  },
  {
    "id": 490,
    "response": "def concatenate_elements(lst):\n    return ' '.join(lst) if lst else ''"
  },
  {
    "id": 491,
    "response": "def min_cost(cost, m, n):\n    dp = [[0 for _ in range(n)] for _ in range(m)]\n    dp[0][0] = cost[0][0]\n    \n    for j in range(1, n):\n        dp[0][j] = dp[0][j-1] + cost[0][j]\n    \n    for i in range(1, m):\n        dp[i][0] = dp[i-1][0] + cost[i][0]\n    \n    for i in range(1, m):\n        for j in range(1, n):\n            dp[i][j] = min(dp[i-1][j], dp[i][j-1]) + cost[i][j]\n    \n    return dp[m][n]"
  },
  {
    "id": 492,
    "response": "def similar_elements(test_tup1, test_tup2):\n    result = tuple(set(test_tup1) & set(test_tup2))\n    return result"
  },
  {
    "id": 493,
    "response": "def is_not_prime(n):\n    if n <= 1:\n        return True\n    if n <= 3:\n        return False\n    if n % 2 == 0 or n % 3 == 0:\n        return True\n    i = 5\n    while i * i <= n:\n        if n % i == 0 or n % (i + 2) == 0:\n            return True\n        i += 6\n    return False"
  },
  {
    "id": 494,
    "response": "import heapq\n\ndef heap_queue_largest(nums, n):\n    if n > len(nums):\n        return []\n    return heapq.nlargest(n, nums)"
  },
  {
    "id": 495,
    "response": "def count_ways(n):\n    if n == 0:\n        return 1\n    elif n == 1:\n        return 1\n    \n    dp = [0] * (n + 1)\n    dp[0] = 1\n    dp[1] = 1\n    \n    for i in range(2, n + 1):\n        dp[i] = dp[i - 1] + dp[i - 2]\n    \n    return dp[n]"
  },
  {
    "id": 496,
    "response": "def is_Power_Of_Two(a, b):\n    xor_result = a ^ b\n    return bin(xor_result).count('1') == 1"
  },
  {
    "id": 497,
    "response": "import re\n\ndef find_char_long(text):\n    pattern = r'\\b\\w{4,}\\b'\n    matches = re.findall(pattern, text)\n    return matches"
  },
  {
    "id": 498,
    "response": "def square_nums(nums):\n    return list(map(lambda x: x**2, nums))"
  },
  {
    "id": 499,
    "response": "def find_Rotations(str):\n    n = len(str)\n    original = str\n    for i in range(1, n):\n        str = str[i:] + str[:i]\n        if str == original:\n            return i\n    return n"
  },
  {
    "id": 500,
    "response": "def small_nnum(list1, n):\n    if n <= 0:\n        return []\n    list1.sort()\n    return list1[:n]"
  }
]