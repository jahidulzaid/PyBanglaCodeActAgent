[
  {
    "id": 1,
    "response": "def remove_Occ(s, ch):\n    first = s.find(ch)\n    last = s.rfind(ch)\n    if first == -1:\n        return s\n    if first == last:\n        return s[:first] + s[first+1:]\n    return s[:first] + s[first+1:last] + s[last+1:]"
  },
  {
    "id": 2,
    "response": "def sort_matrix(M):\n    return sorted(M, key=lambda row: sum(row))"
  },
  {
    "id": 3,
    "response": "from collections import Counter\n\ndef count_common(words):\n    word_counts = Counter(words)\n    sorted_words = sorted(word_counts.items(), key=lambda x: (-x[1], x[0]))\n    return sorted_words"
  },
  {
    "id": 4,
    "response": "def find_Volume(l, b, h):\n    return (1/2 * b * h) * l"
  },
  {
    "id": 5,
    "response": "def split_lowerstring(text):\n    positions = [i for i, c in enumerate(text) if c.islower()]\n    result = []\n    if not positions:\n        return result\n    for i in range(len(positions)):\n        start = positions[i]\n        end = positions[i+1] if i+1 < len(positions) else len(text)\n        result.append(text[start:end])\n    return result"
  },
  {
    "id": 6,
    "response": "import re\n\ndef text_lowercase_underscore(text):\n    pattern = r'[a-z]_'\n    match = re.search(pattern, text)\n    if match:\n        return 'Found a match!'\n    else:\n        return 'Not matched!'"
  },
  {
    "id": 7,
    "response": "def square_perimeter(a):\n    return 4 * a"
  },
  {
    "id": 8,
    "response": "def str_to_list(string, remove):\n    return ''.join([char for char in string if char not in remove])"
  },
  {
    "id": 9,
    "response": "def test_duplicate(arraynums):\n    return len(arraynums) != len(set(arraynums))"
  },
  {
    "id": 10,
    "response": "def is_woodall(x):\n    if x < 1:\n        return False\n    x_plus_1 = x + 1\n    n = 1\n    while True:\n        current = n * (2 ** n)\n        if current == x_plus_1:\n            return True\n        elif current > x_plus_1:\n            return False\n        n += 1"
  },
  {
    "id": 11,
    "response": "def multiples_of_num(m, n):\n    return [n * i for i in range(1, m + 1)]"
  },
  {
    "id": 12,
    "response": "def find_first_duplicate(nums):\n    seen = set()\n    for num in nums:\n        if num in seen:\n            return num\n        seen.add(num)\n    return None"
  },
  {
    "id": 13,
    "response": "def maximum_Sum(list1):\n    max_sum = float('-inf')\n    for sublist in list1:\n        current_sum = sum(sublist)\n        if current_sum > max_sum:\n            max_sum = current_sum\n    return max_sum if max_sum != float('-inf') else 0"
  },
  {
    "id": 14,
    "response": "def binary_to_decimal(binary):\n    binary_str = str(binary)\n    decimal = 0\n    for i in range(len(binary_str)):\n        decimal += int(binary_str[i]) * (2 ** (len(binary_str) - 1 - i))\n    return decimal"
  },
  {
    "id": 15,
    "response": "def find_Product(arr, n):\n    freq = {}\n    for i in range(n):\n        num = arr[i]\n        if num in freq:\n            freq[num] += 1\n        else:\n            freq[num] = 1\n    product = 1\n    for i in range(n):\n        if freq[arr[i]] == 1:\n            product *= arr[i]\n    return product"
  },
  {
    "id": 16,
    "response": "def check_k_elements(test_list, K):\n    for t in test_list:\n        if len(t) == K:\n            return True\n    return False"
  },
  {
    "id": 17,
    "response": "def remove(list):\n    return [''.join([c for c in s if not c.isdigit()]) for s in list]"
  },
  {
    "id": 18,
    "response": "def binomial_Coeff(n,k):\n    if k > n or k < 0:\n        return 0\n    k = min(k, n - k)\n    result = 1\n    for i in range(1, k+1):\n        result = result * (n - k + i) // i\n    return result"
  },
  {
    "id": 19,
    "response": "def get_Odd_Occurrence(arr,arr_size):\n    result = 0\n    for i in range(arr_size):\n        result ^= arr[i]\n    return result"
  },
  {
    "id": 20,
    "response": "def check_Equality(s):\n    count = 0\n    n = len(s)\n    for i in range(n):\n        for j in range(i, n):\n            if s[i] == s[j]:\n                count += 1\n    return count"
  },
  {
    "id": 21,
    "response": "import heapq\nfrom collections import Counter\n\ndef func(nums, k):\n    all_nums = [num for sublist in nums for num in sublist]\n    freq = Counter(all_nums)\n    heap = [(-freq[num], num) for num in freq]\n    heapq.heapify(heap)\n    result = []\n    for _ in range(k):\n        if not heap:\n            break\n        freq_val, num = heapq.heappop(heap)\n        result.append(num)\n    return result"
  },
  {
    "id": 22,
    "response": "def max_Prime_Factors(n):\n    if n == 1:\n        return 1\n    \n    largest_factor = -1\n    while n % 2 == 0:\n        largest_factor = 2\n        n = n // 2\n    \n    i = 3\n    while i * i <= n:\n        while n % i == 0:\n            largest_factor = i\n            n = n // i\n        i += 2\n    \n    if n > 2:\n        largest_factor = n\n    \n    return largest_factor"
  },
  {
    "id": 23,
    "response": "def decimal_To_Binary(N):\n    if N == 0:\n        return '0'\n    return bin(N)[2:]"
  },
  {
    "id": 24,
    "response": "def find_missing(ar,N):\n    expected = 1\n    for num in ar:\n        if num != expected:\n            return expected\n        expected += 1\n    return N"
  },
  {
    "id": 25,
    "response": "def find_rect_num(n):\n    return n * (n + 1)"
  },
  {
    "id": 26,
    "response": "def find_Nth_Digit(p, q, N):\n    integer_part = p // q\n    remainder = p % q\n    for _ in range(N):\n        remainder *= 10\n        digit = remainder // q\n        remainder = remainder % q\n    return digit"
  },
  {
    "id": 27,
    "response": "def sort_mixed_list(mixed_list):\n    integers = [x for x in mixed_list if isinstance(x, int)]\n    strings = [x for x in mixed_list if isinstance(x, str)]\n    integers.sort()\n    strings.sort()\n    return integers + strings"
  },
  {
    "id": 28,
    "response": "def div_even_odd(list1):\n    first_even = None\n    for num in list1:\n        if num % 2 == 0:\n            first_even = num\n            break\n    first_odd = None\n    for num in list1:\n        if num % 2 != 0:\n            first_odd = num\n            break\n    return first_even / first_odd"
  },
  {
    "id": 29,
    "response": "def rearange_string(S):\n    from collections import Counter\n    \n    count = Counter(S)\n    max_freq = max(count.values())\n    n = len(S)\n    \n    if max_freq > (n + 1) // 2:\n        return None\n    \n    sorted_chars = sorted(count.keys(), key=lambda x: (-count[x], x))\n    result = [''] * n\n    index = 0\n    \n    for char in sorted_chars:\n        for _ in range(count[char]):\n            result[index] = char\n            index += 2\n            if index >= n:\n                index = 1\n    \n    return ''.join(result)"
  },
  {
    "id": 30,
    "response": "from collections import Counter\n\ndef freq_element(nums):\n    flat_list = [item for sublist in nums for item in sublist]\n    freq = Counter(flat_list)\n    return dict(freq)"
  },
  {
    "id": 31,
    "response": "def filter_evennumbers(nums):\n    return list(filter(lambda num: num % 2 == 0, nums))"
  },
  {
    "id": 32,
    "response": "def find_Sum(arr,n):\n    seen = set()\n    total = 0\n    for i in range(n):\n        if arr[i] in seen:\n            total += arr[i]\n        else:\n            seen.add(arr[i])\n    return total"
  },
  {
    "id": 33,
    "response": "import re\n\ndef text_match(text):\n    pattern = r'^[a-z]+_[a-z]+$'\n    if re.fullmatch(pattern, text):\n        return 'Found a match!'\n    else:\n        return 'Not matched!'"
  },
  {
    "id": 34,
    "response": "def text_match_string(text):\n    if text.startswith('python'):\n        return 'Matched!'\n    else:\n        return 'Not matched!'"
  },
  {
    "id": 35,
    "response": "def find_gcd(arr):\n    from math import gcd\n    from functools import reduce\n\n    def compute_gcd(a, b):\n        return gcd(a, b)\n\n    if not arr:\n        return 0\n    result = arr[0]\n    for num in arr[1:]:\n        result = compute_gcd(result, num)\n        if result == 1:\n            break  # GCD cannot be less than 1\n    return result"
  },
  {
    "id": 36,
    "response": "def test_distinct(data):\n    return len(data) == len(set(data))"
  },
  {
    "id": 37,
    "response": "def compute_Last_Digit(A, B):\n    if B < A:\n        return 0\n    product = 1\n    for i in range(A+1, B+1):\n        product = (product * i) % 10\n    return product"
  },
  {
    "id": 38,
    "response": "def odd_bit_set_number(n):\n    if n == 0:\n        return 0\n    bits = n.bit_length()\n    return (1 << bits) - 1"
  },
  {
    "id": 39,
    "response": "def specified_element(nums, N):\n    return [sublist[0] for sublist in nums]"
  },
  {
    "id": 40,
    "response": "def min_length_list(input_list):\n    min_list = min(input_list, key=lambda x: len(x))\n    return len(min_list), min_list"
  },
  {
    "id": 41,
    "response": "def check_equilateral(x,y,z):\n    return x == y == z"
  },
  {
    "id": 42,
    "response": "def parallelogram_area(b,h):\n    return b * h"
  },
  {
    "id": 43,
    "response": "def check_Equality(str):\n    if len(str) == 0:\n        return \"Not Equal\"\n    if str[0] == str[-1]:\n        return \"Equal\"\n    else:\n        return \"Not Equal\""
  },
  {
    "id": 44,
    "response": "def counting_sort(my_list):\n    if not my_list:\n        return my_list\n    \n    max_val = max(my_list)\n    count = [0] * (max_val + 1)\n    \n    for num in my_list:\n        count[num] += 1\n    \n    sorted_list = []\n    for i in range(max_val + 1):\n        sorted_list.extend([i] * count[i])\n    \n    return sorted_list"
  },
  {
    "id": 45,
    "response": "def tn_gp(a, n, r):\n    return a * (r ** (n - 1))"
  },
  {
    "id": 46,
    "response": "def rev(num):\n    reversed_num = int(str(num)[::-1])\n    return num == 2 * reversed_num - 1"
  },
  {
    "id": 47,
    "response": "import functools\n\ndef find_Max_Num(arr, n):\n    str_arr = list(map(str, arr))\n    def compare(a, b):\n        if a + b > b + a:\n            return -1\n        elif a + b < b + a:\n            return 1\n        else:\n            return 0\n    str_arr.sort(key=functools.cmp_to_key(compare))\n    if str_arr[0] == '0':\n        return 0\n    return int(''.join(str_arr))"
  },
  {
    "id": 48,
    "response": "def opposite_Signs(x, y):\n    if x == 0 or y == 0:\n        return False\n    return x * y < 0"
  },
  {
    "id": 49,
    "response": "def is_octagonal(n):\n    return n * (3 * n - 2)"
  },
  {
    "id": 50,
    "response": "def max_len_sub(arr, n):\n    max_len = 0\n    for i in range(n):\n        for j in range(i, n):\n            if abs(arr[i] - arr[j]) == 1:\n                max_len = max(max_len, j - i + 1)\n    return max_len"
  },
  {
    "id": 51,
    "response": "def count_Substrings(s, n):\n    return n"
  },
  {
    "id": 52,
    "response": "def smallest_num(xs):\n    return min(xs)"
  },
  {
    "id": 53,
    "response": "def max_difference(test_list):\n    return max(y - x for x, y in test_list)"
  },
  {
    "id": 54,
    "response": "def subject_marks(subjectmarks):\n    return sorted(subjectmarks, key=lambda x: x[1])"
  },
  {
    "id": 55,
    "response": "def recursive_list_sum(data_list):\n    total = 0\n    for element in data_list:\n        if isinstance(element, list):\n            total += recursive_list_sum(element)\n        else:\n            total += element\n    return total"
  },
  {
    "id": 56,
    "response": "def pos_count(list):\n    count = 0\n    for num in list:\n        if num > 0:\n            count += 1\n    return count"
  },
  {
    "id": 57,
    "response": "def bell_number(n):\n    if n == 0:\n        return 0\n    bell_triangle = [[0] * (n) for _ in range(n)]\n    bell_triangle[0][0] = 1\n    for i in range(1, n):\n        bell_triangle[i][0] = bell_triangle[i-1][i-1]\n        for j in range(1, i+1):\n            bell_triangle[i][j] = bell_triangle[i][j-1] + bell_triangle[i-1][j-1]\n    return bell_triangle[n-1][0]"
  },
  {
    "id": 58,
    "response": "def is_Monotonic(A):\n    # Check if the array is non-decreasing\n    non_decreasing = all(A[i] <= A[i+1] for i in range(len(A)-1))\n    # Check if the array is non-increasing\n    non_increasing = all(A[i] >= A[i+1] for i in range(len(A)-1))\n    # Return True if either condition is satisfied\n    return non_decreasing or non_increasing"
  },
  {
    "id": 59,
    "response": "def is_sublist(l, s):\n    if not s:\n        return True\n    if len(l) < len(s):\n        return False\n    ptr = 0\n    for item in l:\n        if item == s[ptr]:\n            ptr += 1\n            if ptr == len(s):\n                return True\n    return False"
  },
  {
    "id": 60,
    "response": "def find_equal_tuple(Input, k):\n    for t in Input:\n        if len(t) != k:\n            return 'Not all tuples have same length'\n    return 'All tuples have same length'"
  },
  {
    "id": 61,
    "response": "def comb_sort(nums):\n    gap = len(nums) // 10\n    while gap > 1:\n        for i in range(len(nums) - gap):\n            if nums[i] > nums[i + gap]:\n                nums[i], nums[i + gap] = nums[i + gap], nums[i]\n        gap = int(gap / 1.25)\n    # Final pass with gap 1\n    for i in range(len(nums) - 1):\n        if nums[i] > nums[i + 1]:\n            nums[i], nums[i + 1] = nums[i + 1], nums[i]\n    return nums"
  },
  {
    "id": 62,
    "response": "def dif_Square(n):\n    return n % 4 != 2"
  },
  {
    "id": 63,
    "response": "import re\n\ndef multiple_split(text):\n    return re.split(r'[\\n*]', text)"
  },
  {
    "id": 64,
    "response": "def is_samepatterns(colors, patterns):\n    if len(colors) != len(patterns):\n        return False\n    pattern_to_color = {}\n    color_to_pattern = {}\n    for color, pattern in zip(colors, patterns):\n        if pattern in pattern_to_color:\n            if pattern_to_color[pattern] != color:\n                return False\n        else:\n            pattern_to_color[pattern] = color\n        if color in color_to_pattern:\n            if color_to_pattern[color] != pattern:\n                return False\n        else:\n            color_to_pattern[color] = pattern\n    return True"
  },
  {
    "id": 65,
    "response": "def find_tuples(test_list, K):\n    result = []\n    for t in test_list:\n        if all(x % K == 0 for x in t):\n            result.append(t)\n    return str(result)"
  },
  {
    "id": 66,
    "response": "def count_Squares(m, n):\n    total = 0\n    min_val = min(m, n)\n    for k in range(1, min_val + 1):\n        total += (m - k + 1) * (n - k + 1)\n    return total"
  },
  {
    "id": 67,
    "response": "def is_Diff(n):\n    sum_even = 0\n    sum_odd = 0\n    for digit in str(abs(n)):\n        d = int(digit)\n        if d % 2 == 0:\n            sum_even += d\n        else:\n            sum_odd += d\n    return sum_even == sum_odd"
  },
  {
    "id": 68,
    "response": "def count_With_Odd_SetBits(n):\n    count = 0\n    for x in range(n + 1):\n        bits = bin(x).count('1')\n        if bits % 2 == 1:\n            count += 1\n    return count"
  },
  {
    "id": 69,
    "response": "def word_len(s):\n    return len(s) % 2 != 0"
  },
  {
    "id": 70,
    "response": "def tetrahedral_number(n):\n    return n * (n + 1) * (n + 2) / 6.0"
  },
  {
    "id": 71,
    "response": "def zip_tuples(test_tup1, test_tup2):\n    result = []\n    for i in range(len(test_tup1)):\n        result.append( (test_tup1[i], test_tup2[i % len(test_tup2)]) )\n    return result"
  },
  {
    "id": 72,
    "response": "import math\n\ndef volume_sphere(r):\n    return (4/3) * math.pi * (r ** 3)"
  },
  {
    "id": 73,
    "response": "def get_Char(strr):\n    total = 0\n    for c in strr:\n        total += ord(c) - ord('a') + 1\n    return chr(total + ord('a') - 1)"
  },
  {
    "id": 74,
    "response": "def sequence(n):\n    if n < 0:\n        raise ValueError(\"n must be a non-negative integer\")\n    if n == 0:\n        return 0\n    seq = [0, 1]\n    for i in range(2, n + 1):\n        p_i_minus_1 = seq[i-1]\n        term1 = seq[p_i_minus_1]\n        term2 = seq[i - p_i_minus_1]\n        seq.append(term1 + term2)\n    return seq[n]"
  },
  {
    "id": 75,
    "response": "import math\n\ndef surfacearea_sphere(r):\n    return 4 * math.pi * r**2"
  },
  {
    "id": 76,
    "response": "def centered_hexagonal_number(n):\n    return 3 * n * (n - 1) + 1"
  },
  {
    "id": 77,
    "response": "def merge_dictionaries_three(dict1, dict2, dict3):\n    merged = dict1.copy()\n    merged.update(dict2)\n    merged.update(dict3)\n    return merged"
  },
  {
    "id": 78,
    "response": "def freq_count(list1):\n    freq = {}\n    for item in list1:\n        if item in freq:\n            freq[item] += 1\n        else:\n            freq[item] = 1\n    return freq"
  },
  {
    "id": 79,
    "response": "def closest_num(N):\n    return N - 1"
  },
  {
    "id": 80,
    "response": "def len_log(list1):\n    if not list1:\n        return 0\n    max_len = 0\n    for string in list1:\n        current_len = len(string)\n        if current_len > max_len:\n            max_len = current_len\n    return max_len"
  },
  {
    "id": 81,
    "response": "def find_substring(str1, sub_str):\n    for s in str1:\n        if sub_str in s:\n            return True\n    return False"
  },
  {
    "id": 82,
    "response": "def is_undulating(n):\n    s = str(n)\n    if len(s) <= 2:\n        return len(s) == 2 and s[0] != s[1]\n    if s[0] == s[1]:\n        return False\n    for i in range(2, len(s)):\n        if s[i] == s[i-2]:\n            continue\n        else:\n            return False\n    return True"
  },
  {
    "id": 83,
    "response": "def power(a, b):\n    return a ** b"
  },
  {
    "id": 84,
    "response": "def index_minimum(test_list):\n    min_tuple = min(test_list, key=lambda x: x[1])\n    return min_tuple[0]"
  },
  {
    "id": 85,
    "response": "def Find_Min_Length(lst):\n    lengths = [len(sublist) for sublist in lst]\n    return min(lengths)"
  },
  {
    "id": 86,
    "response": "def divisor(n):\n    count = 0\n    for i in range(1, n+1):\n        if n % i == 0:\n            count += 1\n    return count"
  },
  {
    "id": 87,
    "response": "def frequency_lists(list1):\n    freq = {}\n    for sublist in list1:\n        for item in sublist:\n            if item in freq:\n                freq[item] += 1\n            else:\n                freq[item] = 1\n    return freq"
  },
  {
    "id": 88,
    "response": "def multiply_num(numbers):\n    product = 1\n    for num in numbers:\n        product *= num\n    return product / len(numbers)"
  },
  {
    "id": 89,
    "response": "def decimal_to_binary(n):\n    return bin(n)[2:]"
  },
  {
    "id": 90,
    "response": "def next_smallest_palindrome(num):\n    def is_palindrome(n):\n        return str(n) == str(n)[::-1]\n    \n    current = num + 1\n    while True:\n        if is_palindrome(current):\n            return current\n        current += 1"
  },
  {
    "id": 91,
    "response": "def kth_element(arr, n, k):\n    return arr[k-1]"
  },
  {
    "id": 92,
    "response": "def snake_to_camel(word):\n    if not word:\n        return word\n    parts = word.split('_')\n    if len(parts) == 1:\n        return parts[0]\n    camel = parts[0] + ''.join([part.capitalize() for part in parts[1:]])\n    return camel"
  },
  {
    "id": 93,
    "response": "def eulerian_num(n, m):\n    if m < 0 or m >= n:\n        return 0\n    if n == 0:\n        return 0\n    dp = [[0] * (n + 1) for _ in range(n + 1)]\n    for i in range(1, n + 1):\n        dp[i][0] = 1\n    for i in range(2, n + 1):\n        for j in range(1, i):\n            dp[i][j] = (i - j) * dp[i - 1][j - 1] + (j + 1) * dp[i - 1][j]\n    return dp[n][m]"
  },
  {
    "id": 94,
    "response": "def sort_sublists(input_list):\n    return [sorted(sublist) for sublist in input_list]"
  },
  {
    "id": 95,
    "response": "def count(lst):\n    return sum(lst)"
  },
  {
    "id": 96,
    "response": "def add_lists(test_list, test_tup):\n    return test_tup + tuple(test_list)"
  },
  {
    "id": 97,
    "response": "def count_Hexadecimal(L, R):\n    return R - L + 1"
  },
  {
    "id": 98,
    "response": "import heapq\n\ndef merge_sorted_list(num1, num2, num3):\n    sorted1 = sorted(num1)\n    sorted2 = sorted(num2)\n    sorted3 = sorted(num3)\n    \n    merged = []\n    heap = []\n    \n    for i, lst in enumerate([sorted1, sorted2, sorted3]):\n        if lst:\n            heapq.heappush(heap, (lst[0], i, 0))\n    \n    while heap:\n        val, list_idx, element_idx = heapq.heappop(heap)\n        merged.append(val)\n        if element_idx + 1 < len([sorted1, sorted2, sorted3][list_idx]):\n            next_val = [sorted1, sorted2, sorted3][list_idx][element_idx + 1]\n            heapq.heappush(heap, (next_val, list_idx, element_idx + 1))\n    \n    return merged"
  },
  {
    "id": 99,
    "response": "def odd_Equivalent(s, n):\n    count = 0\n    for k in range(n):\n        rotated = s[k:] + s[:k]\n        if rotated[-1] == '1':\n            count += 1\n    return count"
  },
  {
    "id": 100,
    "response": "def extract_missing(test_list, strt_val, stop_val):\n    if not test_list:\n        return [(strt_val, stop_val)]\n    \n    # Sort the test_list by the start of each range\n    test_list.sort()\n    missing_ranges = []\n    \n    # Check the gap before the first range\n    first_start = test_list[0][0]\n    if strt_val < first_start:\n        missing_ranges.append((strt_val, first_start - 1))\n    \n    # Check gaps between consecutive ranges\n    for i in range(1, len(test_list)):\n        prev_end = test_list[i-1][1]\n        curr_start = test_list[i][0]\n        if prev_end < curr_start - 1:\n            missing_ranges.append((prev_end + 1, curr_start - 1))\n    \n    # Check the gap after the last range\n    last_end = test_list[-1][1]\n    if last_end < stop_val:\n        missing_ranges.append((last_end + 1, stop_val))\n    \n    return missing_ranges"
  },
  {
    "id": 101,
    "response": "def common_in_nested_lists(nestedlist):\n    if not nestedlist:\n        return []\n    common = set(nestedlist[0])\n    for sublist in nestedlist[1:]:\n        common.intersection_update(sublist)\n    return sorted(common, reverse=True)"
  },
  {
    "id": 102,
    "response": "def perimeter(diameter, height):\n    return 2 * (diameter + height)"
  },
  {
    "id": 103,
    "response": "def check_integer(text):\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False"
  },
  {
    "id": 104,
    "response": "def assign_freq(test_list):\n    freq = {}\n    for t in test_list:\n        freq[t] = freq.get(t, 0) + 1\n    result = []\n    seen = set()\n    for t in test_list:\n        if t not in seen:\n            seen.add(t)\n            new_tuple = t + (freq[t],)\n            result.append(new_tuple)\n    return str(result)"
  },
  {
    "id": 105,
    "response": "def empty_dit(list1):\n    for d in list1:\n        if len(d) > 0:\n            return False\n    return True"
  },
  {
    "id": 106,
    "response": "def tuple_to_int(nums):\n    return int(''.join(str(num) for num in nums))"
  },
  {
    "id": 107,
    "response": "def list_to_float(test_list):\n    converted_list = []\n    for item in test_list:\n        converted_item = tuple(float(element) for element in item)\n        converted_list.append(converted_item)\n    return converted_list"
  },
  {
    "id": 108,
    "response": "def string_to_list(string):\n    return string.split()"
  },
  {
    "id": 109,
    "response": "def search(arr,n):\n    result = 0\n    for i in range(n):\n        result ^= arr[i]\n    return result"
  },
  {
    "id": 110,
    "response": "def max_product_tuple(list1):\n    if not list1:\n        return None\n    max_prod = list1[0][0] * list1[0][1]\n    for t in list1[1:]:\n        current_prod = t[0] * t[1]\n        if current_prod > max_prod:\n            max_prod = current_prod\n    return max_prod"
  },
  {
    "id": 111,
    "response": "def check_triplet(A, n, sum, count):\n    A.sort()\n    for i in range(n - 2):\n        left = i + 1\n        right = n - 1\n        target = sum - A[i]\n        while left < right:\n            current_sum = A[left] + A[right]\n            if current_sum == target:\n                return True\n            elif current_sum < target:\n                left += 1\n            else:\n                right -= 1\n    return False"
  },
  {
    "id": 112,
    "response": "def smartNumber(n):\n    return 30 * n"
  },
  {
    "id": 113,
    "response": "def amicable_numbers_sum(limit):\n    def sum_of_proper_divisors(n):\n        if n < 2:\n            return 0\n        total = 1\n        sqrt_n = int(n ** 0.5)\n        for i in range(2, sqrt_n + 1):\n            if n % i == 0:\n                total += i\n                if i != n // i:\n                    total += n // i\n        return total\n\n    total_sum = 0\n    for a in range(2, limit + 1):\n        b = sum_of_proper_divisors(a)\n        if b > a and b <= limit:\n            if sum_of_proper_divisors(b) == a:\n                total_sum += a\n    return total_sum"
  },
  {
    "id": 114,
    "response": "import math\n\ndef angle_complex(z):\n    # Calculate the angle of the complex number z\n    return math.atan2(z.imag, z.real)"
  },
  {
    "id": 115,
    "response": "def find_length(string, n):\n    transformed = [1 if c == '0' else -1 for c in string]\n    max_sum = float('-inf')\n    current_sum = 0\n    for num in transformed:\n        current_sum += num\n        if current_sum > max_sum:\n            max_sum = current_sum\n        if current_sum < 0:\n            current_sum = 0\n    return max_sum"
  },
  {
    "id": 116,
    "response": "import math\n\ndef sum(a, b):\n    gcd = math.gcd(a, b)\n    if gcd == 0:\n        return 0\n    sum_div = 0\n    for i in range(1, int(gcd**0.5) + 1):\n        if gcd % i == 0:\n            sum_div += i\n            if i != gcd // i:\n                sum_div += gcd // i\n    return sum_div"
  },
  {
    "id": 117,
    "response": "def multiply_int(x, y):\n    if x == 0 or y == 0:\n        return 0\n    \n    negative = False\n    if (x < 0 and y > 0) or (x > 0 and y < 0):\n        negative = True\n    \n    x_abs = abs(x)\n    y_abs = abs(y)\n    \n    result = 0\n    for _ in range(y_abs):\n        result += x_abs\n    \n    if negative:\n        result = -result\n    \n    return result"
  },
  {
    "id": 118,
    "response": "def long_words(n, str):\n    words = str.split()\n    return [word for word in words if len(word) > n]"
  },
  {
    "id": 119,
    "response": "def magic_square_test(my_matrix):\n    # Check if matrix is square\n    if not my_matrix or any(len(row) != len(my_matrix) for row in my_matrix):\n        return False\n    \n    n = len(my_matrix)\n    \n    # Handle single element case\n    if n == 1:\n        return True\n    \n    # Calculate target sum using first row\n    target_sum = sum(my_matrix[0])\n    \n    # Check all rows\n    for row in my_matrix:\n        if sum(row) != target_sum:\n            return False\n    \n    # Check all columns\n    for col in range(n):\n        column_sum = sum(my_matrix[row][col] for row in range(n))\n        if column_sum != target_sum:\n            return False\n    \n    # Check first diagonal (top-left to bottom-right)\n    diag1_sum = sum(my_matrix[i][i] for i in range(n))\n    if diag1_sum != target_sum:\n        return False\n    \n    # Check second diagonal (top-right to bottom-left)\n    diag2_sum = sum(my_matrix[i][n-1-i] for i in range(n))\n    if diag2_sum != target_sum:\n        return False\n    \n    return True"
  },
  {
    "id": 120,
    "response": "from collections import Counter\n\ndef max_occurrences(nums):\n    counts = Counter(nums)\n    max_count = 0\n    max_item = None\n    for num in nums:\n        if counts[num] > max_count:\n            max_count = counts[num]\n            max_item = num\n    return (max_item, max_count)"
  },
  {
    "id": 121,
    "response": "def reverse_vowels(str1):\n    vowels = 'aeiouAEIOU'\n    vowel_list = [char for char in str1 if char in vowels]\n    reversed_vowels = vowel_list[::-1]\n    result = []\n    vowel_index = 0\n    for char in str1:\n        if char in vowels:\n            result.append(reversed_vowels[vowel_index])\n            vowel_index += 1\n        else:\n            result.append(char)\n    return ''.join(result)"
  },
  {
    "id": 122,
    "response": "def tup_string(tup1):\n    return ''.join(tup1)"
  },
  {
    "id": 123,
    "response": "def sum_negativenum(nums):\n    return sum(filter(lambda x: x < 0, nums))"
  },
  {
    "id": 124,
    "response": "def check_last(arr, n, p):\n    last_element = arr[n-1]\n    modified = last_element + p\n    return \"EVEN\" if modified % 2 == 0 else \"ODD\""
  },
  {
    "id": 125,
    "response": "def hexagonal_num(n):\n    return n * (2 * n - 1)"
  },
  {
    "id": 126,
    "response": "def cal_electbill(units):\n    return units * 197 / 60"
  },
  {
    "id": 127,
    "response": "def zero_count(nums):\n    count = nums.count(0)\n    return round(count / len(nums), 2)"
  },
  {
    "id": 128,
    "response": "def is_Sum_Of_Powers_Of_Two(n):\n    return bin(n).count('1') == 2"
  },
  {
    "id": 129,
    "response": "import math\n\ndef circle_circumference(r):\n    return 2 * math.pi * r"
  },
  {
    "id": 130,
    "response": "def extract_singly(test_list):\n    result = []\n    seen = set()\n    for t in test_list:\n        for element in t:\n            if element not in seen:\n                seen.add(element)\n                result.append(element)\n    return result"
  },
  {
    "id": 131,
    "response": "def pancake_sort(nums):\n    nums = list(nums)\n    n = len(nums)\n    for size in range(n, 0, -1):\n        max_index = nums.index(max(nums[:size]))\n        if max_index != 0:\n            nums[:max_index+1] = nums[:max_index+1][::-1]\n        nums[:size] = nums[:size][::-1]\n    return nums"
  },
  {
    "id": 132,
    "response": "def count_samepair(list1, list2, list3):\n    count = 0\n    for i in range(len(list1)):\n        if list1[i] == list2[i] == list3[i]:\n            count += 1\n    return count"
  },
  {
    "id": 133,
    "response": "def find_lists(Input):\n    count = 0\n    for item in Input:\n        if isinstance(item, list):\n            count += 1\n    return count"
  },
  {
    "id": 134,
    "response": "def sum_Pairs(arr, n):\n    total = 0\n    for i in range(n):\n        for j in range(i + 1, n):\n            total += abs(arr[i] - arr[j])\n    return total"
  },
  {
    "id": 135,
    "response": "def max_Abs_Diff(arr,n):\n    if n < 2:\n        return 0\n    max_val = max(arr)\n    min_val = min(arr)\n    return abs(max_val - min_val)"
  },
  {
    "id": 136,
    "response": "def ascii_value_string(str1):\n    return ord(str1[0])"
  },
  {
    "id": 137,
    "response": "def max_path_sum(tri, m, n):\n    # Start from the second last row and move upwards\n    for i in range(m-2, -1, -1):\n        for j in range(i+1):\n            # Choose the maximum of the two possible paths\n            tri[i][j] += max(tri[i+1][j], tri[i+1][j+1])\n    return tri[0][0]"
  },
  {
    "id": 138,
    "response": "def sum_digits_single(x):\n    s = str(x)\n    max_sum = 0\n    for i in range(1, len(s)):\n        part1 = s[:i]\n        part2 = s[i:]\n        sum1 = sum(int(d) for d in part1)\n        sum2 = sum(int(d) for d in part2)\n        total = sum1 + sum2\n        if total > max_sum:\n            max_sum = total\n    return max_sum"
  },
  {
    "id": 139,
    "response": "def longest_subseq_with_diff_one(arr, n):\n    dp = [1] * n\n    for i in range(1, n):\n        for j in range(i):\n            if abs(arr[i] - arr[j]) == 1:\n                dp[i] = max(dp[i], dp[j] + 1)\n    return max(dp)"
  },
  {
    "id": 140,
    "response": "def does_Contain_B(a, b, c):\n    return a <= c <= b"
  },
  {
    "id": 141,
    "response": "def gcd(p, q):\n    while q:\n        p, q = q, p % q\n    return p == 1"
  },
  {
    "id": 142,
    "response": "def merge(arr):\n    if len(arr) <= 1:\n        return arr\n    mid = len(arr) // 2\n    left = merge(arr[:mid])\n    right = merge(arr[mid:])\n    result = []\n    i = j = 0\n    while i < len(left) and j < len(right):\n        if left[i] < right[j]:\n            result.append(left[i])\n            i += 1\n        else:\n            result.append(right[j])\n            j += 1\n    result.extend(left[i:])\n    result.extend(right[j:])\n    return result"
  },
  {
    "id": 143,
    "response": "def parabola_vertex(a, b, c):\n    x = -b / (2 * a)\n    y = c - (b ** 2) / (4 * a)\n    return (x, y)"
  },
  {
    "id": 144,
    "response": "def specified_element(nums, N):\n    return [sublist[N] for sublist in nums]"
  },
  {
    "id": 145,
    "response": "def even_bit_toggle_number(n):\n    mask = 0xAAAAAAAA\n    return n ^ mask"
  },
  {
    "id": 146,
    "response": "def tuple_int_str(tuple_str):\n    return tuple(tuple_int_str(x) if isinstance(x, tuple) else int(x) for x in tuple_str)"
  },
  {
    "id": 147,
    "response": "def encode_list(list1):\n    if not list1:\n        return []\n    result = []\n    current = list1[0]\n    count = 1\n    for item in list1[1:]:\n        if item == current:\n            count += 1\n        else:\n            result.append([count, current])\n            current = item\n            count = 1\n    result.append([count, current])\n    return result"
  },
  {
    "id": 148,
    "response": "def min_Ops(arr, n, k):\n    arr.sort()\n    median = arr[n//2]\n    operations = sum(abs(num - median) for num in arr)\n    return operations"
  },
  {
    "id": 149,
    "response": "def month_season(month, days):\n    months = {\n        'January': 1,\n        'February': 2,\n        'March': 3,\n        'April': 4,\n        'May': 5,\n        'June': 6,\n        'July': 7,\n        'August': 8,\n        'September': 9,\n        'October': 10,\n        'November': 11,\n        'December': 12\n    }\n    month_num = months[month]\n    \n    if month_num == 12:\n        if days >= 21:\n            return 'winter'\n        else:\n            return 'autumn'\n    elif month_num in [1, 2]:\n        return 'winter'\n    elif month_num == 3:\n        if days <= 20:\n            return 'winter'\n        else:\n            return 'spring'\n    elif 4 <= month_num <= 5:\n        return 'spring'\n    elif month_num == 6:\n        if days <= 20:\n            return 'summer'\n        else:\n            return 'autumn'\n    elif 7 <= month_num <= 8:\n        return 'summer'\n    elif month_num == 9:\n        if days <= 20:\n            return 'autumn'\n        else:\n            return 'winter'\n    elif 10 <= month_num <= 11:\n        return 'autumn'\n    else:\n        return 'unknown'"
  },
  {
    "id": 150,
    "response": "def solution(a, b, n):\n    def extended_gcd(a, b):\n        if b == 0:\n            return (a, 1, 0)\n        else:\n            g, x, y = extended_gcd(b, a % b)\n            return (g, y, x - (a // b) * y)\n    \n    g, x_eg, y_eg = extended_gcd(a, b)\n    if n % g != 0:\n        return None  # No solution exists\n    else:\n        scale = n // g\n        x = x_eg * scale\n        y = y_eg * scale\n        # Adjust x and y to be positive\n        while x <= 0 or y <= 0:\n            x += b // g\n            y -= a // g\n        return ('x = ', x, ', y = ', y)"
  },
  {
    "id": 151,
    "response": "def remove_elements(list1, list2):\n    set2 = set(list2)\n    return [element for element in list1 if element not in set2]"
  },
  {
    "id": 152,
    "response": "def sum_series(n):\n    total = 0\n    current = n\n    while current > 0:\n        total += current\n        current -= 2\n    return total"
  },
  {
    "id": 153,
    "response": "import math\n\ndef area_polygon(s, l):\n    if s < 3:\n        raise ValueError(\"A polygon must have at least 3 sides.\")\n    return (s * l**2) / (4 * math.tan(math.pi / s))"
  },
  {
    "id": 154,
    "response": "def divSum(n, m):\n    def sum_of_divisors(n):\n        if n == 0:\n            return 0\n        total = 0\n        for i in range(1, int(n**0.5) + 1):\n            if n % i == 0:\n                if i == n // i:\n                    total += i\n                else:\n                    total += i + n // i\n        return total\n    return sum_of_divisors(n) == m"
  },
  {
    "id": 155,
    "response": "def count_char_position(str1):\n    count = 0\n    for index, char in enumerate(str1):\n        if ord(char) - 97 == index:\n            count += 1\n    return count"
  },
  {
    "id": 156,
    "response": "def find_even_Pair(A, N):\n    even_count = 0\n    odd_count = 0\n    for num in A:\n        if num % 2 == 0:\n            even_count += 1\n        else:\n            odd_count += 1\n    even_pairs = (even_count * (even_count - 1)) // 2\n    odd_pairs = (odd_count * (odd_count - 1)) // 2\n    return even_pairs + odd_pairs"
  },
  {
    "id": 157,
    "response": "def next_Power_Of_2(n):\n    power = 1\n    while power < n:\n        power *= 2\n    return power"
  },
  {
    "id": 158,
    "response": "def frequency(a, x):\n    return a.count(x)"
  },
  {
    "id": 159,
    "response": "def get_pell(n):\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    a, b = 0, 1\n    for _ in range(2, n+1):\n        a, b = b, 2*b + a\n    return b"
  },
  {
    "id": 160,
    "response": "def sum_range_list(list1, m, n):\n    if not list1:\n        return 0\n    start = max(0, m)\n    end = min(len(list1) - 1, n)\n    if start > end:\n        return 0\n    return sum(list1[start:end+1])"
  },
  {
    "id": 161,
    "response": "def perimeter_pentagon(a):\n    return 5 * a"
  },
  {
    "id": 162,
    "response": "def count_occurance(s):\n    count = 0\n    for i in range(len(s) - 2):\n        if s[i:i+3] == 'std':\n            count += 1\n    return count"
  },
  {
    "id": 163,
    "response": "def remove_splchar(text):\n    return ''.join([char for char in text if char.isalnum()])"
  },
  {
    "id": 164,
    "response": "def group_keyvalue(l):\n    result = {}\n    for key, value in l:\n        if key in result:\n            result[key].append(value)\n        else:\n            result[key] = [value]\n    return result"
  },
  {
    "id": 165,
    "response": "def is_valid_parenthese(str1):\n    stack = []\n    mapping = {')': '(', '}': '{', ']': '['}\n    for char in str1:\n        if char in mapping:\n            if not stack or stack.pop() != mapping[char]:\n                return False\n        else:\n            stack.append(char)\n    return not stack"
  },
  {
    "id": 166,
    "response": "def perimeter_triangle(a,b,c):\n    return a + b + c"
  },
  {
    "id": 167,
    "response": "import math\n\ndef answer(L, R):\n    for a in range(L, R):\n        for b in range(a + 1, R + 1):\n            gcd_ab = math.gcd(a, b)\n            lcm_ab = (a * b) // gcd_ab\n            if L <= lcm_ab <= R:\n                return (a, b)\n    return None"
  },
  {
    "id": 168,
    "response": "def string_literals(patterns, text):\n    for pattern in patterns:\n        if pattern in text:\n            return 'Matched!'\n    return 'Not Matched!'"
  },
  {
    "id": 169,
    "response": "def is_num_keith(x):\n    if x <= 0:\n        return False\n    digits = list(map(int, str(x)))\n    sequence = digits.copy()\n    while sequence[-1] < x:\n        next_term = sum(sequence)\n        sequence.append(next_term)\n    return x in sequence"
  },
  {
    "id": 170,
    "response": "import math\n\ndef distance_lat_long(slat, slon, elat, elon):\n    # Convert degrees to radians\n    slat_rad = math.radians(slat)\n    slon_rad = math.radians(slon)\n    elat_rad = math.radians(elat)\n    elon_rad = math.radians(elon)\n    \n    # Haversine formula\n    dlat = elat_rad - slat_rad\n    dlon = elon_rad - slon_rad\n    \n    a = math.sin(dlat/2)**2 + math.cos(slat_rad) * math.cos(elat_rad) * math.sin(dlon/2)**2\n    c = 2 * math.atan2(math.sqrt(a), math.sqrt(1 - a))\n    \n    # Earth radius in kilometers\n    earth_radius = 6371.0\n    distance = earth_radius * c\n    \n    return distance"
  },
  {
    "id": 171,
    "response": "def common_prefix_util(strings, n):\n    if not strings or n <= 0:\n        return \"\"\n    prefix = strings[0]\n    for i in range(1, n):\n        while not strings[i].startswith(prefix):\n            prefix = prefix[:-1]\n            if not prefix:\n                return \"\"\n    return prefix"
  },
  {
    "id": 172,
    "response": "import re\n\ndef find_character(string):\n    uppercase = re.findall(r'[A-Z]', string)\n    lowercase = re.findall(r'[a-z]', string)\n    special = re.findall(r'[^A-Za-z0-9]', string)\n    digits = re.findall(r'[0-9]', string)\n    return (uppercase, lowercase, special, digits)"
  },
  {
    "id": 173,
    "response": "def count_pairs(arr, n, k):\n    unique_elements = set(arr)\n    count = 0\n    for x in unique_elements:\n        if (x + k) in unique_elements:\n            count += 1\n    return count"
  },
  {
    "id": 174,
    "response": "def greater_specificnum(list, num):\n    for element in list:\n        if element <= num:\n            return False\n    return True"
  },
  {
    "id": 175,
    "response": "def parabola_focus(a, b, c):\n    h = -b / (2 * a)\n    k = a * h**2 + b * h + c\n    focus_y = k + 1 / (4 * a)\n    return (h, focus_y)"
  },
  {
    "id": 176,
    "response": "import re\n\ndef check_literals(text, patterns):\n    if not text or not patterns:\n        return 'Not Matched!'\n    for pattern in patterns:\n        if re.search(pattern, text):\n            return 'Matched!'\n    return 'Not Matched!'"
  },
  {
    "id": 177,
    "response": "def longest_common_subsequence(X, Y, m, n):\n    dp = [[0]*(n+1) for _ in range(m+1)]\n    \n    for i in range(1, m+1):\n        for j in range(1, n+1):\n            if X[i-1] == Y[j-1]:\n                dp[i][j] = dp[i-1][j-1] + 1\n            else:\n                dp[i][j] = max(dp[i-1][j], dp[i][j-1])\n    \n    return dp[m][n]"
  },
  {
    "id": 178,
    "response": "def prod_Square(n):\n    sqrt_n = int(n ** 0.5)\n    if sqrt_n * sqrt_n != n:\n        return False\n    k = sqrt_n\n    if k < 2:\n        return False\n    for i in range(2, int(k**0.5) + 1):\n        if k % i == 0:\n            return True\n    return False"
  },
  {
    "id": 179,
    "response": "def first_Missing_Positive(arr,n):\n    for i in range(n):\n        while 1 <= arr[i] <= n and arr[arr[i]-1] != arr[i]:\n            arr[arr[i]-1], arr[i] = arr[i], arr[arr[i]-1]\n    for i in range(n):\n        if arr[i] != i + 1:\n            return i + 1\n    return n + 1"
  },
  {
    "id": 180,
    "response": "def count_Intgral_Points(x1, y1, x2, y2):\n    min_x = min(x1, x2)\n    max_x = max(x1, x2)\n    min_y = min(y1, y2)\n    max_y = max(y1, y2)\n    dx = max_x - min_x\n    dy = max_y - min_y\n    return (dx - 1) * (dy - 1) if dx > 0 and dy > 0 else 0"
  },
  {
    "id": 181,
    "response": "def check_monthnumber(monthname3):\n    thirty_day_months = {\"April\", \"June\", \"September\", \"November\"}\n    return monthname3 in thirty_day_months"
  },
  {
    "id": 182,
    "response": "def check_String(str):\n    has_letter = False\n    has_number = False\n    for char in str:\n        if char.isalpha():\n            has_letter = True\n        elif char.isdigit():\n            has_number = True\n        if has_letter and has_number:\n            break\n    return has_letter and has_number"
  },
  {
    "id": 183,
    "response": "def remove_tuple(test_tup):\n    seen = set()\n    result = []\n    for item in test_tup:\n        if item not in seen:\n            seen.add(item)\n            result.append(item)\n    return tuple(result)"
  },
  {
    "id": 184,
    "response": "def octal_To_Decimal(n):\n    return int(n, 8)"
  },
  {
    "id": 185,
    "response": "def first(arr, x, n):\n    low = 0\n    high = n - 1\n    result = -1\n    while low <= high:\n        mid = (low + high) // 2\n        if arr[mid] < x:\n            low = mid + 1\n        elif arr[mid] > x:\n            high = mid - 1\n        else:\n            result = mid\n            high = mid - 1\n    return result if result != -1 else -1"
  },
  {
    "id": 186,
    "response": "def remove_tuples(test_list, K):\n    return [t for t in test_list if len(t) != K]"
  },
  {
    "id": 187,
    "response": "def find_exponentio(test_tup1, test_tup2):\n    if len(test_tup1) != len(test_tup2):\n        raise ValueError(\"Tuples must be of the same length\")\n    return tuple(test_tup1[i] ** test_tup2[i] for i in range(len(test_tup1)))"
  },
  {
    "id": 188,
    "response": "import math\n\ndef largest_triangle(a, b):\n    return (a * b * math.sqrt(3)) * 3 / 4"
  },
  {
    "id": 189,
    "response": "def highest_Power_of_2(n):\n    if n == 0:\n        return 0\n    return 1 << (n.bit_length() - 1)"
  },
  {
    "id": 190,
    "response": "def position_max(list1):\n    if not list1:\n        return []\n    max_val = max(list1)\n    result = []\n    for index, value in enumerate(list1):\n        if value == max_val:\n            result.append(index)\n    return result"
  },
  {
    "id": 191,
    "response": "def chkList(lst):\n    if not lst:\n        return True\n    first = lst[0]\n    for item in lst:\n        if item != first:\n            return False\n    return True"
  },
  {
    "id": 192,
    "response": "def remove_even(str1):\n    return str1[::2]"
  },
  {
    "id": 193,
    "response": "def hamming_Distance(n1, n2):\n    xor_result = n1 ^ n2\n    return bin(xor_result).count('1')"
  },
  {
    "id": 194,
    "response": "def count(s, c):\n    return s.count(c)"
  },
  {
    "id": 195,
    "response": "def inversion_elements(test_tup):\n    return tuple(-(x + 1) for x in test_tup)"
  },
  {
    "id": 196,
    "response": "def concatenate_elements(test_tup):\n    result = []\n    for i in range(len(test_tup) - 1):\n        result.append(test_tup[i] + test_tup[i+1])\n    return tuple(result)"
  },
  {
    "id": 197,
    "response": "def find_longest_repeating_subseq(str):\n    n = len(str)\n    dp = [[0] * (n + 1) for _ in range(n + 1)]\n    \n    for i in range(1, n + 1):\n        for j in range(1, n + 1):\n            if str[i-1] == str[j-1] and i != j:\n                dp[i][j] = dp[i-1][j-1] + 1\n            else:\n                dp[i][j] = max(dp[i-1][j], dp[i][j-1])\n    \n    return dp[n][n]"
  },
  {
    "id": 198,
    "response": "import re\n\ndef is_decimal(num):\n    pattern = r'^-?\\d+(\\.\\d{2})?$'\n    return bool(re.fullmatch(pattern, num))"
  },
  {
    "id": 199,
    "response": "import heapq\n\ndef heap_replace(heap, a):\n    heapq.heapreplace(heap, a)\n    return heap"
  },
  {
    "id": 200,
    "response": "import re\n\ndef is_allowed_specific_char(string):\n    # Check if the string contains only allowed characters (A-Z, a-z, 0-9)\n    pattern = r'^[A-Za-z0-9]+$'\n    return bool(re.fullmatch(pattern, string))"
  },
  {
    "id": 201,
    "response": "def count_Num(n):\n    return 1"
  },
  {
    "id": 202,
    "response": "def fourth_Power_Sum(n):\n    total = 0\n    for i in range(1, n+1):\n        total += i ** 4\n    return total"
  },
  {
    "id": 203,
    "response": "def concatenate_strings(test_tup1, test_tup2):\n    if len(test_tup1) != len(test_tup2):\n        raise ValueError(\"Tuples must be of the same length\")\n    result = []\n    for str1, str2 in zip(test_tup1, test_tup2):\n        result.append(str1 + str2)\n    return tuple(result)"
  },
  {
    "id": 204,
    "response": "import math\n\ndef degree_radian(radian):\n    return radian * (180 / math.pi)"
  },
  {
    "id": 205,
    "response": "def decode_list(alist):\n    result = []\n    for item in alist:\n        if isinstance(item, list):\n            count, value = item\n            result.extend([value] * count)\n        else:\n            result.append(item)\n    return result"
  },
  {
    "id": 206,
    "response": "def check_subset_list(list1, list2):\n    for item in list1:\n        if isinstance(item, list):\n            found = False\n            for sublist in list2:\n                if check_subset_list(item, sublist):\n                    found = True\n                    break\n            if not found:\n                return False\n        else:\n            if item not in list2:\n                return False\n    return True"
  },
  {
    "id": 207,
    "response": "def first_Repeated_Char(str):\n    char_count = {}\n    for char in str:\n        if char in char_count:\n            return char\n        else:\n            char_count[char] = 1\n    return \"\""
  },
  {
    "id": 208,
    "response": "def min_Operations(A,B):\n    count = 0\n    while A < B:\n        A *= 2\n        count += 1\n    return count"
  },
  {
    "id": 209,
    "response": "def extract_min_max(test_tup, K):\n    sorted_list = sorted(test_tup)\n    min_elements = sorted_list[:K]\n    max_elements = sorted_list[-K:]\n    return tuple(min_elements + max_elements)"
  },
  {
    "id": 210,
    "response": "def replace_max_specialchar(text, n):\n    special_chars = {' ', ',', '.'}\n    replacements = 0\n    result = []\n    for char in text:\n        if char in special_chars and replacements < n:\n            result.append(':')\n            replacements += 1\n        else:\n            result.append(char)\n    return ''.join(result)"
  },
  {
    "id": 211,
    "response": "def first_even(nums):\n    for num in nums:\n        if num % 2 == 0:\n            return num\n    return None"
  },
  {
    "id": 212,
    "response": "def check_type(test_tuple):\n    if not test_tuple:\n        return True\n    first_type = type(test_tuple[0])\n    for element in test_tuple[1:]:\n        if type(element) != first_type:\n            return False\n    return True"
  },
  {
    "id": 213,
    "response": "import bisect\n\ndef is_majority(arr, n, x):\n    left = bisect.bisect_left(arr, x)\n    right = bisect.bisect_right(arr, x)\n    count = right - left\n    return count > n // 2"
  },
  {
    "id": 214,
    "response": "def count_Set_Bits(n):\n    return bin(n).count('1')"
  },
  {
    "id": 215,
    "response": "def find_Min(arr, low, high):\n    min_val = arr[low]\n    for i in range(low + 1, high + 1):\n        if arr[i] < min_val:\n            min_val = arr[i]\n    return min_val"
  },
  {
    "id": 216,
    "response": "def odd_values_string(str):\n    return str[::2]"
  },
  {
    "id": 217,
    "response": "def min_of_three(a, b, c):\n    return min(a, b, c)"
  },
  {
    "id": 218,
    "response": "def all_Bits_Set_In_The_Given_Range(n, l, r):\n    if l > r:\n        return False\n    mask = ((1 << (r + 1)) - 1) ^ ((1 << l) - 1)\n    return (n & mask) == mask"
  },
  {
    "id": 219,
    "response": "def re_arrange_array(arr, n):\n    negatives = [x for x in arr if x < 0]\n    positives = [x for x in arr if x >= 0]\n    return negatives + positives"
  },
  {
    "id": 220,
    "response": "def replace_blank(str1, char):\n    return str1.replace(' ', char)"
  },
  {
    "id": 221,
    "response": "def max_sum(tri, n):\n    for i in range(n-2, -1, -1):\n        for j in range(len(tri[i])):\n            tri[i][j] += max(tri[i+1][j], tri[i+1][j+1])\n    return tri[0][0]"
  },
  {
    "id": 222,
    "response": "def larg_nnum(list1, n):\n    sorted_list = sorted(list1, reverse=True)\n    return sorted_list[:n]"
  },
  {
    "id": 223,
    "response": "import math\n\ndef lateralsuface_cylinder(r, h):\n    # Calculate the lateral surface area of a cylinder\n    return 2 * math.pi * r * h"
  },
  {
    "id": 224,
    "response": "def volume_cube(l):\n    return l ** 3"
  },
  {
    "id": 225,
    "response": "def even_bit_set_number(n):\n    mask = 0\n    for i in range(1, 65):\n        if i % 2 == 0:\n            mask |= (1 << (i - 1))\n    return n | mask"
  },
  {
    "id": 226,
    "response": "def No_of_Triangle(N, K):\n    return N * K - 1"
  },
  {
    "id": 227,
    "response": "def check_occurences(test_list):\n    counts = {}\n    for t in test_list:\n        sorted_t = tuple(sorted(t))\n        if sorted_t in counts:\n            counts[sorted_t] += 1\n        else:\n            counts[sorted_t] = 1\n    return counts"
  },
  {
    "id": 228,
    "response": "def number_of_substrings(str):\n    n = len(str)\n    return n * (n + 1) // 2"
  },
  {
    "id": 229,
    "response": "def get_total_number_of_sequences(m, n):\n    if n == 0:\n        return 0\n    previous = [0] * (m + 1)\n    for v in range(1, m + 1):\n        previous[v] = 1\n    for i in range(2, n + 1):\n        prefix_sum = [0] * (m + 1)\n        for k in range(1, m + 1):\n            prefix_sum[k] = prefix_sum[k - 1] + previous[k]\n        current = [0] * (m + 1)\n        for v in range(1, m + 1):\n            k = v // 2\n            current[v] = prefix_sum[k]\n        previous = current\n    return sum(previous[1: m + 1])"
  },
  {
    "id": 230,
    "response": "def replace_list(list1, list2):\n    if not list1:\n        return list2\n    list1.pop()\n    list1.extend(list2)\n    return list1"
  },
  {
    "id": 231,
    "response": "def array_3d(m,n,o):\n    return [ [ [ '*' for _ in range(o) ] for _ in range(n) ] for _ in range(m) ]"
  },
  {
    "id": 232,
    "response": "def count_charac(str1):\n    return len(str1)"
  },
  {
    "id": 233,
    "response": "def sort_on_occurence(lst):\n    from collections import defaultdict\n    groups = defaultdict(list)\n    for item in lst:\n        key = item[0]\n        value = item[1]\n        groups[key].append(value)\n    result = []\n    for key in groups:\n        values = groups[key]\n        count = len(values)\n        result.append( (key, *values, count) )\n    return result"
  },
  {
    "id": 234,
    "response": "import math\n\ndef next_Perfect_Square(N):\n    k = math.isqrt(N) + 1\n    return k * k"
  },
  {
    "id": 235,
    "response": "def max_sum(arr, n):\n    inc = [0] * n\n    dec = [0] * n\n    \n    for i in range(n):\n        inc[i] = arr[i]\n        for j in range(i):\n            if arr[j] < arr[i]:\n                inc[i] = max(inc[i], arr[i] + inc[j])\n    \n    for i in range(n-1, -1, -1):\n        dec[i] = arr[i]\n        for j in range(i+1, n):\n            if arr[j] < arr[i]:\n                dec[i] = max(dec[i], arr[i] + dec[j])\n    \n    max_bitonic = 0\n    for i in range(n):\n        max_bitonic = max(max_bitonic, inc[i] + dec[i] - arr[i])\n    \n    return max_bitonic"
  },
  {
    "id": 236,
    "response": "def babylonian_squareroot(number):\n    if number < 0:\n        raise ValueError(\"Cannot compute square root of a negative number.\")\n    if number == 0 or number == 1:\n        return number\n    guess = number / 2.0\n    while True:\n        new_guess = (guess + number / guess) / 2\n        if abs(new_guess - guess) < 1e-15:\n            return new_guess\n        guess = new_guess"
  },
  {
    "id": 237,
    "response": "def lps(str):\n    n = len(str)\n    dp = [[0] * n for _ in range(n)]\n    \n    # All substrings of length 1 are palindromes of length 1\n    for i in range(n):\n        dp[i][i] = 1\n    \n    # Fill the table for substrings of length >= 2\n    for l in range(2, n + 1):  # l is the length of the substring\n        for i in range(n - l + 1):\n            j = i + l - 1\n            if str[i] == str[j]:\n                if l == 2:\n                    dp[i][j] = 2\n                else:\n                    dp[i][j] = 2 + dp[i+1][j-1]\n            else:\n                dp[i][j] = max(dp[i+1][j], dp[i][j-1])\n    \n    return dp[0][n-1]"
  },
  {
    "id": 238,
    "response": "def harmonic_sum(n):\n    total = 0.0\n    for i in range(1, n):\n        total += 1.0 / i\n    return total"
  },
  {
    "id": 239,
    "response": "def intersection_array(array_nums1, array_nums2):\n    is_in_second = lambda x: x in array_nums2\n    return [x for x in array_nums1 if is_in_second(x)]"
  },
  {
    "id": 240,
    "response": "def count_X(tup, x):\n    count = 0\n    for item in tup:\n        if item == x:\n            count += 1\n    return count"
  },
  {
    "id": 241,
    "response": "def insert_element(list, element):\n    result = []\n    for item in list:\n        result.append(element)\n        result.append(item)\n    return result"
  },
  {
    "id": 242,
    "response": "import cmath\n\ndef convert(numbers):\n    complex_num = complex(numbers)\n    magnitude, angle = cmath.polar(complex_num)\n    return (magnitude, angle)"
  },
  {
    "id": 243,
    "response": "def count_integer(list1):\n    return sum(1 for x in list1 if isinstance(x, int))"
  },
  {
    "id": 244,
    "response": "def words_ae(text):\n    words = text.split()\n    result = []\n    for word in words:\n        if word.startswith('a') or word.startswith('e'):\n            result.append(word)\n    return result"
  },
  {
    "id": 245,
    "response": "import itertools\n\ndef combinations_colors(l, n):\n    return list(itertools.combinations_with_replacement(l, n))"
  },
  {
    "id": 246,
    "response": "def count_Primes_nums(n):\n    if n < 2:\n        return 0\n    sieve = [True] * n\n    sieve[0] = sieve[1] = False\n    for i in range(2, int(n**0.5) + 1):\n        if sieve[i]:\n            sieve[i*i : n : i] = [False] * len(sieve[i*i : n : i])\n    return sum(sieve)"
  },
  {
    "id": 247,
    "response": "def swap_numbers(a,b):\n    return (b, a)"
  },
  {
    "id": 248,
    "response": "def count_odd(array_nums):\n    return len(list(filter(lambda x: x % 2 != 0, array_nums)))"
  },
  {
    "id": 249,
    "response": "def maximize_elements(test_tup1, test_tup2):\n    if len(test_tup1) != len(test_tup2):\n        raise ValueError(\"Tuples must be of the same length\")\n    return tuple(max(pair) for pair in zip(test_tup1, test_tup2))"
  },
  {
    "id": 250,
    "response": "def newman_prime(n):\n    if n == 0:\n        return 1\n    elif n == 1:\n        return 1\n    else:\n        s_prev_prev = 1  # S(0)\n        s_prev = 1       # S(1)\n        for i in range(2, n+1):\n            s_current = s_prev + 2 * (i-1) * s_prev_prev\n            s_prev_prev, s_prev = s_prev, s_current\n        return s_prev"
  },
  {
    "id": 251,
    "response": "def division_elements(test_tup1, test_tup2):\n    if len(test_tup1) != len(test_tup2):\n        raise ValueError(\"Tuples must be of the same length\")\n    result = []\n    for a, b in zip(test_tup1, test_tup2):\n        if b == 0:\n            raise ZeroDivisionError(\"Division by zero is not allowed\")\n        result.append(a / b)\n    return tuple(result)"
  },
  {
    "id": 252,
    "response": "def split_two_parts(list1, L):\n    return (list1[:L], list1[L:])"
  },
  {
    "id": 253,
    "response": "def merge_dict(d1, d2):\n    merged = d1.copy()\n    merged.update(d2)\n    return merged"
  },
  {
    "id": 254,
    "response": "def dog_age(h_age):\n    if h_age <= 0:\n        return 0\n    elif h_age <= 2:\n        return h_age * 10.5\n    else:\n        return 21 + (h_age - 2) * 4"
  },
  {
    "id": 255,
    "response": "def list_split(S, step):\n    result = []\n    for i in range(step):\n        sublist = []\n        j = 0\n        while i + j*step < len(S):\n            sublist.append(S[i + j*step])\n            j += 1\n        result.append(sublist)\n    return result"
  },
  {
    "id": 256,
    "response": "def lateralsurface_cube(l):\n    return 4 * l ** 2"
  },
  {
    "id": 257,
    "response": "def square_Sum(n):\n    return n * (2 * n + 1) * (2 * n - 1) // 3"
  },
  {
    "id": 258,
    "response": "def find_star_num(n):\n    return 6 * n * (n - 1) + 1"
  },
  {
    "id": 259,
    "response": "def ascii_value(k):\n    return ord(k)"
  },
  {
    "id": 260,
    "response": "def sum_even_and_even_index(arr,n):\n    total = 0\n    for i in range(n):\n        if i % 2 == 0 and arr[i] % 2 == 0:\n            total += arr[i]\n    return total"
  },
  {
    "id": 261,
    "response": "def even_Power_Sum(n):\n    return sum((2 * i) ** 5 for i in range(1, n + 1))"
  },
  {
    "id": 262,
    "response": "def rear_extract(test_list):\n    result = []\n    for t in test_list:\n        result.append(t[-1])\n    return result"
  },
  {
    "id": 263,
    "response": "def substract_elements(test_tup1, test_tup2):\n    result = tuple(a - b for a, b in zip(test_tup1, test_tup2))\n    return result"
  },
  {
    "id": 264,
    "response": "def even_binomial_Coeff_Sum(n):\n    if n == 0:\n        return 1\n    else:\n        return 2 ** (n - 1)"
  },
  {
    "id": 265,
    "response": "def get_Position(a, n, m):\n    current_pos = 0\n    last_removed = -1\n    for _ in range(n-1):\n        current_pos = (current_pos + m - 1) % len(a)\n        last_removed = current_pos\n        a.pop(current_pos)\n        current_pos = 0\n    return last_removed + 1"
  },
  {
    "id": 266,
    "response": "import math\n\ndef volume_cylinder(r, h):\n    return math.pi * r**2 * h"
  },
  {
    "id": 267,
    "response": "def dict_filter(dict, n):\n    return {key: value for key, value in dict.items() if value > n}"
  },
  {
    "id": 268,
    "response": "def count_first_elements(test_tup):\n    count = 0\n    for element in test_tup:\n        if not isinstance(element, tuple):\n            count += 1\n        else:\n            return count\n    return count"
  },
  {
    "id": 269,
    "response": "def is_num_decagonal(n):\n    return 4 * n * n - 3 * n"
  },
  {
    "id": 270,
    "response": "def sequential_search(dlist, item):\n    for index, value in enumerate(dlist):\n        if value == item:\n            return (True, index)\n    return (False, -1)"
  },
  {
    "id": 271,
    "response": "def all_unique(test_list):\n    return len(test_list) == len(set(test_list))"
  },
  {
    "id": 272,
    "response": "def sub_list(nums1, nums2):\n    return list(map(lambda x, y: x - y, nums1, nums2))"
  },
  {
    "id": 273,
    "response": "def validate(n):\n    if n == 0:\n        return True\n    digits = str(n)\n    freq = {}\n    for d in digits:\n        digit = int(d)\n        freq[digit] = freq.get(digit, 0) + 1\n    for digit, count in freq.items():\n        if count > digit:\n            return False\n    return True"
  },
  {
    "id": 274,
    "response": "def check_element(list, element):\n    if not list:\n        return False\n    for item in list:\n        if item != element:\n            return False\n    return list"
  },
  {
    "id": 275,
    "response": "import re\n\ndef text_match_two_three(text):\n    pattern = r'ab{2,3}'\n    if re.search(pattern, text):\n        return 'Matched!'\n    else:\n        return 'Not matched!'"
  },
  {
    "id": 276,
    "response": "def max_sub_array_sum_repeated(a, n, k):\n    extended = a * k\n    max_current = max_global = extended[0]\n    for i in range(1, len(extended)):\n        max_current = max(extended[i], max_current + extended[i])\n        max_global = max(max_global, max_current)\n    return max_global"
  },
  {
    "id": 277,
    "response": "def square_Sum(n):\n    if n < 0:\n        return 0\n    return 2 * n * (n + 1) * (2 * n + 1) // 3"
  },
  {
    "id": 278,
    "response": "def modular_inverse(arr, N, P):\n    return arr"
  },
  {
    "id": 279,
    "response": "def odd_Days(N):\n    leap_years = (N // 4) - (N // 100) + (N // 400)\n    normal_years = N - leap_years\n    total_days = (leap_years * 2) + (normal_years * 1)\n    return total_days % 7"
  },
  {
    "id": 280,
    "response": "def max_length(list1):\n    max_len = 0\n    max_sublist = []\n    for sublist in list1:\n        current_len = len(sublist)\n        if current_len > max_len:\n            max_len = current_len\n            max_sublist = sublist\n    return (max_len, max_sublist)"
  },
  {
    "id": 281,
    "response": "def count_no_of_ways(n, k):\n    if n == 0:\n        return 0\n    if n == 1:\n        return k\n    same, diff = k, k * (k - 1)\n    for i in range(3, n + 1):\n        new_same = diff\n        new_diff = (same + diff) * (k - 1)\n        same, diff = new_same, new_diff\n    return same + diff"
  },
  {
    "id": 282,
    "response": "def find(n, m):\n    return n // m"
  },
  {
    "id": 283,
    "response": "import math\n\ndef otherside_rightangle(w, h):\n    return math.sqrt(w**2 + h**2)"
  },
  {
    "id": 284,
    "response": "def max_val(listval):\n    numeric_values = [x for x in listval if isinstance(x, (int, float))]\n    return max(numeric_values)"
  },
  {
    "id": 285,
    "response": "def sum_div(number):\n    if number <= 1:\n        return 0\n    total = 0\n    for i in range(1, number // 2 + 1):\n        if number % i == 0:\n            total += i\n    return total"
  },
  {
    "id": 286,
    "response": "def get_Inv_Count(arr, n):\n    count = 0\n    for i in range(n):\n        for j in range(i + 1, n):\n            if arr[i] > arr[j]:\n                count += 1\n    return count"
  },
  {
    "id": 287,
    "response": "def flatten_list(list1):\n    result = []\n    for item in list1:\n        if isinstance(item, list):\n            result.extend(flatten_list(item))\n        else:\n            result.append(item)\n    return result"
  },
  {
    "id": 288,
    "response": "def intersection_nested_lists(l1, l2):\n    result = []\n    for sublist in l2:\n        common_elements = [x for x in l1 if x in sublist]\n        result.append(common_elements)\n    return result"
  },
  {
    "id": 289,
    "response": "def max_aggregate(stdata):\n    totals = {}\n    for name, value in stdata:\n        if name in totals:\n            totals[name] += value\n        else:\n            totals[name] = value\n    max_name = max(totals, key=totals.get)\n    return (max_name, totals[max_name])"
  },
  {
    "id": 290,
    "response": "import math\n\ndef count_binary_seq(n):\n    return math.comb(2 * n, n)"
  },
  {
    "id": 291,
    "response": "def dict_depth(d):\n    max_depth = 1\n    for value in d.values():\n        if isinstance(value, dict):\n            current_depth = 1 + dict_depth(value)\n            if current_depth > max_depth:\n                max_depth = current_depth\n    return max_depth"
  },
  {
    "id": 292,
    "response": "def set_Bit_Number(n):\n    return 1 << (n.bit_length() - 1)"
  },
  {
    "id": 293,
    "response": "def solve(a, n):\n    return len(a) == n"
  },
  {
    "id": 294,
    "response": "def find_Element(arr, ranges, rotations, index):\n    # Apply each rotation\n    for start, end in ranges:\n        if start <= end:\n            # Extract the subarray\n            subarr = arr[start:end+1]\n            # Rotate right by one\n            rotated_subarr = [subarr[-1]] + subarr[:-1]\n            # Replace the original subarray with the rotated one\n            arr = arr[:start] + rotated_subarr + arr[end+1:]\n    return arr[index]"
  },
  {
    "id": 295,
    "response": "def start_withp(words):\n    result = []\n    for s in words:\n        words_list = s.split()\n        if len(words_list) >= 2 and words_list[0].lower().startswith('p'):\n            result.append(words_list[1])\n    return tuple(result)"
  },
  {
    "id": 296,
    "response": "def max_sum_increasing_subseq(a, n, index, k):\n    dp = [0] * n\n    for i in range(n):\n        dp[i] = a[i]\n        for j in range(i):\n            if a[j] < a[i]:\n                dp[i] = max(dp[i], dp[j] + a[i])\n    return dp[index]"
  },
  {
    "id": 297,
    "response": "def colon_tuplex(tuplex, m, n):\n    lst = list(tuplex)\n    lst[m].insert(m, n)\n    return tuple(lst)"
  },
  {
    "id": 298,
    "response": "def large_product(nums1, nums2, N):\n    products = []\n    for num1 in nums1:\n        for num2 in nums2:\n            products.append(num1 * num2)\n    products.sort(reverse=True)\n    return products[:N]"
  },
  {
    "id": 299,
    "response": "def maximum(a, b):\n    if a >= b:\n        return a\n    else:\n        return b"
  },
  {
    "id": 300,
    "response": "def string_to_tuple(str1):\n    return tuple(str1)"
  },
  {
    "id": 301,
    "response": "def set_left_most_unset_bit(n):\n    for i in range(63, -1, -1):\n        if (n & (1 << i)) == 0:\n            return n | (1 << i)\n    return n"
  },
  {
    "id": 302,
    "response": "import math\n\ndef volume_cone(r, h):\n    return (1/3) * math.pi * r**2 * h"
  },
  {
    "id": 303,
    "response": "def pos_nos(list1):\n    return [num for num in list1 if num > 0]"
  },
  {
    "id": 304,
    "response": "def max_sum_rectangular_grid(grid, n):\n    max_sum = -float('inf')\n    for i in range(n):\n        for j in range(n):\n            if i != j:\n                current_sum = grid[0][i] + grid[1][j]\n                if current_sum > max_sum:\n                    max_sum = current_sum\n    return max_sum"
  },
  {
    "id": 305,
    "response": "def find_Max_Len_Even(str):\n    words = str.split()\n    max_len = -1\n    result = \"\"\n    for word in words:\n        length = len(word)\n        if length % 2 == 0 and length > max_len:\n            max_len = length\n            result = word\n    return result"
  },
  {
    "id": 306,
    "response": "def find_last_occurrence(A, x):\n    for i in range(len(A)-1, -1, -1):\n        if A[i] == x:\n            return i\n    return -1"
  },
  {
    "id": 307,
    "response": "def modified_encode(alist):\n    if not alist:\n        return []\n    result = []\n    current_value = alist[0]\n    count = 1\n    for item in alist[1:]:\n        if item == current_value:\n            count += 1\n        else:\n            if count > 1:\n                result.append([count, current_value])\n            else:\n                result.append(current_value)\n            current_value = item\n            count = 1\n    if count > 1:\n        result.append([count, current_value])\n    else:\n        result.append(current_value)\n    return result"
  },
  {
    "id": 308,
    "response": "def max_volume(s):\n    return (s ** 3) // 27"
  },
  {
    "id": 309,
    "response": "import re\n\ndef find_long_word(text):\n    return re.findall(r'\\b[a-zA-Z]{5}\\b', text)"
  },
  {
    "id": 310,
    "response": "def sum_difference(n):\n    sum_squares = n * (n + 1) * (2 * n + 1) // 6\n    square_sum = (n * (n + 1) // 2) ** 2\n    return square_sum - sum_squares"
  },
  {
    "id": 311,
    "response": "def find_demlo(s):\n    n = len(s)\n    result = []\n    for i in range(1, n + 1):\n        result.append(str(i))\n    for i in range(n - 1, 0, -1):\n        result.append(str(i))\n    return ''.join(result)"
  },
  {
    "id": 312,
    "response": "def position_min(list1):\n    if not list1:\n        return []\n    min_val = min(list1)\n    indices = []\n    for index, value in enumerate(list1):\n        if value == min_val:\n            indices.append(index)\n    return indices"
  },
  {
    "id": 313,
    "response": "def right_rotate(arr, n, out_of_place, cur):\n    # Separate positive and negative numbers\n    negatives = [x for x in arr if x < 0]\n    positives = [x for x in arr if x >= 0]\n    \n    # Initialize result array\n    result = []\n    \n    # Alternate between negative and positive\n    i = 0\n    while i < len(negatives) and i < len(positives):\n        result.append(negatives[i])\n        result.append(positives[i])\n        i += 1\n    \n    # Add remaining elements\n    if i < len(negatives):\n        result.extend(negatives[i:])\n    else:\n        result.extend(positives[i:])\n    \n    return result"
  },
  {
    "id": 314,
    "response": "def sum_of_alternates(test_tuple):\n    sum_even = 0\n    sum_odd = 0\n    for index, value in enumerate(test_tuple):\n        if index % 2 == 1:\n            sum_odd += value\n        else:\n            sum_even += value\n    return (sum_odd, sum_even)"
  },
  {
    "id": 315,
    "response": "def get_Min_Squares(n):\n    dp = [float('inf')] * (n + 1)\n    dp[0] = 0\n    for i in range(1, n + 1):\n        j = 1\n        while j * j <= i:\n            dp[i] = min(dp[i], dp[i - j * j] + 1)\n            j += 1\n    return dp[n]"
  },
  {
    "id": 316,
    "response": "from collections import defaultdict\n\ndef most_occurrences(test_list):\n    word_counts = defaultdict(int)\n    all_words = []\n    for string in test_list:\n        words = string.split()\n        for word in words:\n            all_words.append(word)\n            word_counts[word] += 1\n    max_count = 0\n    max_word = ''\n    for word in all_words:\n        if word_counts[word] > max_count:\n            max_count = word_counts[word]\n            max_word = word\n    return max_word"
  },
  {
    "id": 317,
    "response": "def check_isosceles(x,y,z):\n    sides = sorted([x,y,z])\n    return sides[0]**2 + sides[1]**2 == sides[2]**2"
  },
  {
    "id": 318,
    "response": "def rotate_left(list1, m, n):\n    # Rotate the list to the left by m positions\n    rotated = list1[m:] + list1[:m]\n    # Append the first element of the rotated list\n    return rotated + [rotated[0]]"
  },
  {
    "id": 319,
    "response": "def neg_count(list):\n    count = 0\n    for num in list:\n        if num < 0:\n            count += 1\n    return count"
  },
  {
    "id": 320,
    "response": "import re\n\ndef find_char(text):\n    pattern = r'\\b\\w{3,5}\\b'\n    return re.findall(pattern, text)"
  },
  {
    "id": 321,
    "response": "def count_unset_bits(n):\n    return bin(n).count('0')"
  },
  {
    "id": 322,
    "response": "def char_frequency(str1):\n    freq = {}\n    for char in str1:\n        if char in freq:\n            freq[char] += 1\n        else:\n            freq[char] = 1\n    return freq"
  },
  {
    "id": 323,
    "response": "def Sort(sub_li):\n    return sorted(sub_li, key=lambda x: x[1])"
  },
  {
    "id": 324,
    "response": "def check_Validity(a, b, c):\n    if a <= 0 or b <= 0 or c <= 0:\n        return False\n    if (a + b > c) and (a + c > b) and (b + c > a):\n        return True\n    return False"
  },
  {
    "id": 325,
    "response": "def ap_sum(a,n,d):\n    return n * (2*a + (n-1)*d) // 2"
  },
  {
    "id": 326,
    "response": "def check_monthnum(monthname1):\n    return monthname1 == \"February\""
  },
  {
    "id": 327,
    "response": "import re\n\ndef text_match_word(text):\n    if re.fullmatch(r'\\w+\\W*$', text):\n        return 'Found a match!'\n    else:\n        return 'Not matched!'"
  },
  {
    "id": 328,
    "response": "def check_Equality(s):\n    count = 0\n    n = len(s)\n    for i in range(n):\n        for j in range(i, n):\n            if s[i] == s[j]:\n                count += 1\n    return count"
  },
  {
    "id": 329,
    "response": "def find_Divisor(x,y):\n    while y:\n        x, y = y, x % y\n    return x"
  },
  {
    "id": 330,
    "response": "def sum_three_smallest_nums(lst):\n    positive_nums = [num for num in lst if num > 0]\n    positive_nums.sort()\n    return sum(positive_nums[:3])"
  },
  {
    "id": 331,
    "response": "def set_to_tuple(s):\n    return tuple(sorted(s))"
  },
  {
    "id": 332,
    "response": "import heapq\n\ndef find_smallest_range(list_num):\n    heap = []\n    n = len(list_num)\n    pointers = [0] * n\n    min_range = (-1, -1)\n    min_val = float('inf')\n    max_val = float('-inf')\n    \n    # Initialize the heap with the first element of each array\n    for i in range(n):\n        val = list_num[i][0]\n        heapq.heappush(heap, (val, i, 0))\n        min_val = min(min_val, val)\n        max_val = max(max_val, val)\n    \n    while True:\n        current_val, list_index, pointer_index = heapq.heappop(heap)\n        \n        # Update the min range if current range is smaller\n        if min_val <= max_val:\n            if min_range == (-1, -1) or (min_val - max_val < min_range[1] - min_range[0]):\n                min_range = (min_val, max_val)\n        \n        # Move the pointer in the current array\n        if pointer_index + 1 < len(list_num[list_index]):\n            next_val = list_num[list_index][pointer_index + 1]\n            heapq.heappush(heap, (next_val, list_index, pointer_index + 1))\n            min_val = min(min_val, next_val)\n            max_val = max(max_val, next_val)\n        else:\n            # One of the arrays has been exhausted\n            break\n    \n    return min_range"
  },
  {
    "id": 333,
    "response": "def dig_let(s):\n    digits = 0\n    letters = 0\n    for char in s:\n        if char.isdigit():\n            digits += 1\n        elif char.isalpha():\n            letters += 1\n    return (letters, digits)"
  },
  {
    "id": 334,
    "response": "import math\n\ndef count_Odd_Squares(n, m):\n    count = 0\n    for x in range(n, m + 1):\n        s = int(math.sqrt(x))\n        if s * s == x:\n            count += 1\n    return count"
  },
  {
    "id": 335,
    "response": "def diff_consecutivenums(nums):\n    result = []\n    for i in range(1, len(nums)):\n        result.append(abs(nums[i] - nums[i-1]))\n    return result"
  },
  {
    "id": 336,
    "response": "def zigzag(n, k):\n    return 2 * k - 1"
  },
  {
    "id": 337,
    "response": "def count_Squares(m, n):\n    total = 0\n    min_val = min(m, n)\n    for k in range(1, min_val + 1):\n        total += (m - k + 1) * (n - k + 1)\n    return total"
  },
  {
    "id": 338,
    "response": "from math import comb\n\ndef bin_coff(n, r):\n    if r == 0:\n        return 1 if n == 0 else 0\n    if r > n:\n        return 0\n    return comb(n, r) - comb(n, r-1)"
  },
  {
    "id": 339,
    "response": "def check(string):\n    for char in string:\n        if char not in {'0', '1'}:\n            return \"No\"\n    return \"Yes\""
  },
  {
    "id": 340,
    "response": "def minimum_Length(s):\n    min_len = len(s)\n    for char in set(s):\n        new_len = len(s) - s.count(char)\n        if new_len < min_len:\n            min_len = new_len\n    return min_len"
  },
  {
    "id": 341,
    "response": "def first_Element(arr,n,k):\n    freq = {}\n    for i in range(n):\n        if arr[i] in freq:\n            freq[arr[i]] += 1\n        else:\n            freq[arr[i]] = 1\n    for i in range(n):\n        if freq[arr[i]] == k:\n            return arr[i]\n    return -1"
  },
  {
    "id": 342,
    "response": "def unique_Characters(str):\n    return len(set(str)) == len(str)"
  },
  {
    "id": 343,
    "response": "def remove_column(list1, n):\n    return [ [sublist[i] for i in range(len(sublist)) if i != n] for sublist in list1 ]"
  },
  {
    "id": 344,
    "response": "def tn_ap(a,n,d):\n    return a + (n-1)*d"
  },
  {
    "id": 345,
    "response": "def count_Rectangles(radius):\n    max_side = 2 * radius\n    count = 0\n    for w in range(1, int(max_side) + 1):\n        for h in range(1, int(max_side) + 1):\n            if w**2 + h**2 <= (2 * radius)**2:\n                count += 1\n    return count"
  },
  {
    "id": 346,
    "response": "def find_angle(a, b):\n    return 180 - a - b"
  },
  {
    "id": 347,
    "response": "def find_max(test_list):\n    # Flatten the list of tuples and find the maximum element\n    max_element = max([element for t in test_list for element in t])\n    return max_element"
  },
  {
    "id": 348,
    "response": "def moddiv_list(nums1, nums2):\n    return [x % y for x, y in zip(nums1, nums2)]"
  },
  {
    "id": 349,
    "response": "def Check_Solution(a,b,c):\n    return \"Yes\" if 2*b*b == 9*a*c else \"No\""
  },
  {
    "id": 350,
    "response": "def get_carol(n):\n    return (2**n - 1)**2 - 2"
  },
  {
    "id": 351,
    "response": "def remove_empty(list1):\n    return [x for x in list1 if x != []]"
  },
  {
    "id": 352,
    "response": "from collections import Counter\n\ndef max_occurrences(nums):\n    if not nums:\n        return None\n    counts = Counter(nums)\n    max_count = -1\n    result = None\n    for num in nums:\n        if counts[num] > max_count:\n            max_count = counts[num]\n            result = num\n    return result"
  },
  {
    "id": 353,
    "response": "def add_K_element(test_list, K):\n    return [tuple(x + K for x in t) for t in test_list]"
  },
  {
    "id": 354,
    "response": "def make_flip(ch):\n    if not ch:\n        return 0\n    flip1 = 0  # for pattern starting with '0'\n    flip2 = 0  # for pattern starting with '1'\n    for i in range(len(ch)):\n        expected1 = '0' if i % 2 == 0 else '1'\n        expected2 = '1' if i % 2 == 0 else '0'\n        if ch[i] != expected1:\n            flip1 += 1\n        if ch[i] != expected2:\n            flip2 += 1\n    return min(flip1, flip2)"
  },
  {
    "id": 355,
    "response": "def count_Digit(n):\n    return len(str(n))"
  },
  {
    "id": 356,
    "response": "def adjacent_num_product(list_nums):\n    if len(list_nums) < 2:\n        return None\n    max_product = list_nums[0] * list_nums[1]\n    for i in range(1, len(list_nums) - 1):\n        current_product = list_nums[i] * list_nums[i+1]\n        if current_product > max_product:\n            max_product = current_product\n    return max_product"
  },
  {
    "id": 357,
    "response": "class TreeNode:\n    def __init__(self, data):\n        self.data = data\n        self.left = None\n        self.right = None\n\ndef is_balanced(root):\n    def check_balance(node):\n        if not node:\n            return 0\n        left_height = check_balance(node.left)\n        if left_height == -1:\n            return -1\n        right_height = check_balance(node.right)\n        if right_height == -1:\n            return -1\n        if abs(left_height - right_height) > 1:\n            return -1\n        return max(left_height, right_height) + 1\n\n    return check_balance(root) != -1"
  },
  {
    "id": 358,
    "response": "def repeat_tuples(test_tup, N):\n    return test_tup * N"
  },
  {
    "id": 359,
    "response": "def lateralsurface_cuboid(l,w,h):\n    return 2 * (l * h + w * h)"
  },
  {
    "id": 360,
    "response": "def float_sort(price):\n    return sorted(price, key=lambda x: float(x[1]), reverse=True)"
  },
  {
    "id": 361,
    "response": "def smallest_missing(A, left_element, right_element):\n    present = set(A)\n    for i in range(left_element, right_element + 1):\n        if i not in present:\n            return i\n    return right_element + 1"
  },
  {
    "id": 362,
    "response": "import heapq\n\ndef heap_assending(nums):\n    nums_copy = nums.copy()\n    heapq.heapify(nums_copy)\n    sorted_nums = []\n    while nums_copy:\n        sorted_nums.append(heapq.heappop(nums_copy))\n    return sorted_nums"
  },
  {
    "id": 363,
    "response": "def volume_cuboid(l,w,h):\n    return l * w * h"
  },
  {
    "id": 364,
    "response": "import itertools\n\ndef permute_string(str):\n    perms = itertools.permutations(str)\n    perm_strings = [''.join(p) for p in perms]\n    unique_perms = list(set(perm_strings))\n    unique_perms.sort()\n    return unique_perms"
  },
  {
    "id": 365,
    "response": "def round_num(n, m):\n    return round(n / m) * m"
  },
  {
    "id": 366,
    "response": "def remove_replica(test_tup):\n    result = []\n    prev = None\n    for element in test_tup:\n        if element == prev:\n            result.append('MSP')\n        else:\n            result.append(element)\n            prev = element\n    return tuple(result)"
  },
  {
    "id": 367,
    "response": "def remove_Char(s, c):\n    return s.replace(c, '')"
  },
  {
    "id": 368,
    "response": "def move_first(test_list):\n    if not test_list:\n        return test_list\n    return [test_list[-1]] + test_list[:-1]"
  },
  {
    "id": 369,
    "response": "def surfacearea_cuboid(l,w,h):\n    return 2 * (l*w + w*h + l*h)"
  },
  {
    "id": 370,
    "response": "def multi_list(rownum, colnum):\n    return [[j * i for j in range(colnum)] for i in range(rownum)]"
  },
  {
    "id": 371,
    "response": "def index_on_inner_list(list_data, index_no):\n    return sorted(list_data, key=lambda x: x[index_no])"
  },
  {
    "id": 372,
    "response": "def find_rotation_count(A):\n    if not A:\n        return 0\n    for i in range(len(A) - 1):\n        if A[i] > A[i + 1]:\n            return i + 1\n    return 0"
  },
  {
    "id": 373,
    "response": "def even_bit_toggle_number(n):\n    highest_bit = n.bit_length() - 1\n    mask = 0\n    for i in range(0, highest_bit + 1, 2):\n        mask |= (1 << i)\n    return n ^ mask"
  },
  {
    "id": 374,
    "response": "def frequency_Of_Smallest(n, arr):\n    if not arr:\n        return 0\n    min_val = min(arr)\n    return arr.count(min_val)"
  },
  {
    "id": 375,
    "response": "def get_perrin(n):\n    if n == 0:\n        return 3\n    elif n == 1:\n        return 0\n    elif n == 2:\n        return 2\n    a, b, c = 3, 0, 2\n    for _ in range(3, n + 1):\n        a, b, c = b, c, a + b\n    return c"
  },
  {
    "id": 376,
    "response": "def swap_count(s):\n    balance = 0\n    swap = 0\n    for char in s:\n        if char == '[':\n            balance += 1\n        elif char == ']':\n            balance -= 1\n        if balance < 0:\n            swap += 1\n            balance += 2  # Swap the current closing bracket with the next opening bracket\n    return swap + (balance // 2)"
  },
  {
    "id": 377,
    "response": "def even_or_odd(N):\n    return 'Even' if len(N) % 2 == 0 else 'Odd'"
  },
  {
    "id": 378,
    "response": "def highest_Power_of_2(n):\n    if n == 0:\n        return 0\n    return 1 << (n.bit_length() - 1)"
  },
  {
    "id": 379,
    "response": "def find_lucas(n):\n    if n == 0:\n        return 2\n    elif n == 1:\n        return 1\n    a, b = 2, 1\n    for _ in range(2, n + 1):\n        a, b = b, a + b\n    return b"
  },
  {
    "id": 380,
    "response": "def add_string(list, string):\n    return [string.format(item) for item in list]"
  },
  {
    "id": 381,
    "response": "def convert_list_dictionary(l1, l2, l3):\n    result = []\n    for i in range(len(l1)):\n        temp = {l1[i]: {l2[i]: l3[i]}}\n        result.append(temp)\n    return result"
  },
  {
    "id": 382,
    "response": "def get_max_sum(n):\n    memo = {}\n    \n    def helper(n):\n        if n == 0:\n            return 0\n        if n in memo:\n            return memo[n]\n        sum_values = helper(n // 2) + helper(n // 3) + helper(n // 4) + helper(n // 5)\n        memo[n] = sum_values\n        return sum_values\n    \n    return helper(n)"
  },
  {
    "id": 383,
    "response": "def max_length_list(input_list):\n    if not input_list:\n        return (0, [])\n    max_list = max(input_list, key=lambda x: len(x))\n    return (len(max_list), max_list)"
  },
  {
    "id": 384,
    "response": "def check_distinct(test_tup):\n    return len(set(test_tup)) != len(test_tup)"
  },
  {
    "id": 385,
    "response": "def first_non_repeating_character(str1):\n    char_count = {}\n    for char in str1:\n        if char in char_count:\n            char_count[char] += 1\n        else:\n            char_count[char] = 1\n    for char in str1:\n        if char_count[char] == 1:\n            return char\n    return None"
  },
  {
    "id": 386,
    "response": "def check_char(string):\n    if not string:\n        return \"Invalid\"\n    first_char = string[0]\n    last_char = string[-1]\n    return \"Valid\" if first_char == last_char else \"Invalid\""
  },
  {
    "id": 387,
    "response": "def median_numbers(a,b,c):\n    sorted_nums = sorted([a, b, c])\n    return float(sorted_nums[1])"
  },
  {
    "id": 388,
    "response": "def sum_of_digits(nums):\n    total = 0\n    for num in nums:\n        for digit in str(abs(num)):\n            total += int(digit)\n    return total"
  },
  {
    "id": 389,
    "response": "def bitwise_xor(test_tup1, test_tup2):\n    result = tuple(a ^ b for a, b in zip(test_tup1, test_tup2))\n    return result"
  },
  {
    "id": 390,
    "response": "def extract_freq(test_list):\n    unique_tuples = set()\n    for t in test_list:\n        sorted_t = tuple(sorted(t))\n        unique_tuples.add(sorted_t)\n    return len(unique_tuples)"
  },
  {
    "id": 391,
    "response": "def add_nested_tuples(test_tup1, test_tup2):\n    result = []\n    for t1, t2 in zip(test_tup1, test_tup2):\n        summed_tuple = tuple(a + b for a, b in zip(t1, t2))\n        result.append(summed_tuple)\n    return tuple(result)"
  },
  {
    "id": 392,
    "response": "def ncr_modp(n, r, p):\n    if r > n or r < 0:\n        return 0\n    if p == 1:\n        return 0\n    # Precompute factorials mod p\n    fact = [1] * (n + 1)\n    for i in range(1, n + 1):\n        fact[i] = (fact[i-1] * i) % p\n    # Precompute inverse factorials mod p\n    inv_fact = [1] * (n + 1)\n    inv_fact[n] = pow(fact[n], p-2, p)\n    for i in range(n-1, -1, -1):\n        inv_fact[i] = (inv_fact[i+1] * (i+1)) % p\n    # Calculate nCr mod p\n    return (fact[n] * inv_fact[r] % p) * inv_fact[n - r] % p"
  },
  {
    "id": 393,
    "response": "import re\n\ndef is_valid_URL(str):\n    pattern = r'^https?://[^\\s/$.?#].[^\\s]*'\n    return bool(re.match(pattern, str))"
  },
  {
    "id": 394,
    "response": "def minimum(a, b):\n    if a <= b:\n        return a\n    else:\n        return b"
  },
  {
    "id": 395,
    "response": "def check_tuplex(tuplex, tuple1):\n    return tuple1 in tuplex"
  },
  {
    "id": 396,
    "response": "def find_Parity(x):\n    if x % 2 == 0:\n        return \"Even Parity\"\n    else:\n        return \"Odd Parity\""
  },
  {
    "id": 397,
    "response": "def rearrange_bigger(n):\n    digits = list(str(n))\n    from itertools import permutations\n    for perm in permutations(digits):\n        if int(''.join(perm)) > n:\n            return int(''.join(perm))\n    return n"
  },
  {
    "id": 398,
    "response": "def k_smallest_pairs(nums1, nums2, k):\n    pairs = []\n    for a in nums1:\n        for b in nums2:\n            pairs.append([a, b])\n    pairs.sort(key=lambda x: x[0] + x[1])\n    return pairs[:k]"
  },
  {
    "id": 399,
    "response": "def min_product_tuple(list1):\n    if not list1:\n        return None\n    min_prod = list1[0][0] * list1[0][1]\n    for t in list1[1:]:\n        product = t[0] * t[1]\n        if product < min_prod:\n            min_prod = product\n    return min_prod"
  },
  {
    "id": 400,
    "response": "def min_val(listval):\n    # Filter out non-numeric values\n    numeric_values = [x for x in listval if isinstance(x, (int, float))]\n    # Return the minimum numeric value\n    return min(numeric_values)"
  },
  {
    "id": 401,
    "response": "import re\n\ndef snake_to_camel(word):\n    return re.sub(r'_([a-z])', lambda m: m.group(1).upper(), word)"
  },
  {
    "id": 402,
    "response": "def remove_odd(l):\n    return [x for x in l if x % 2 == 0]"
  },
  {
    "id": 403,
    "response": "def extract_nth_element(list1, n):\n    result = []\n    for tuple_item in list1:\n        result.append(tuple_item[n])\n    return result"
  },
  {
    "id": 404,
    "response": "def overlapping(list1, list2):\n    set1 = set(list1)\n    set2 = set(list2)\n    return bool(set1 & set2)"
  },
  {
    "id": 405,
    "response": "def max_Product(arr):\n    arr_sorted = sorted(arr)\n    max_product = arr_sorted[-1] * arr_sorted[-2]\n    min_product = arr_sorted[0] * arr_sorted[1]\n    if max_product > min_product:\n        return (arr_sorted[-2], arr_sorted[-1])\n    else:\n        return (arr_sorted[0], arr_sorted[1])"
  },
  {
    "id": 406,
    "response": "def breakSum(n):\n    return n + 1"
  },
  {
    "id": 407,
    "response": "def group_tuples(Input):\n    groups = {}\n    for t in Input:\n        key = t[0]\n        if key not in groups:\n            groups[key] = []\n        groups[key].append(t[1])\n    result = []\n    for key in groups:\n        result.append((key,) + tuple(groups[key]))\n    return result"
  },
  {
    "id": 408,
    "response": "def Find_Max(lst):\n    if not lst:\n        return []\n    max_len = -1\n    max_sublist = []\n    for sublist in lst:\n        if len(sublist) > max_len:\n            max_len = len(sublist)\n            max_sublist = sublist\n    return max_sublist"
  },
  {
    "id": 409,
    "response": "def round_and_sum(list1):\n    rounded = [round(num) for num in list1]\n    total = sum(rounded)\n    return total * len(list1)"
  },
  {
    "id": 410,
    "response": "def cube_Sum(n):\n    return 8 * (n * (n + 1) // 2) ** 2"
  },
  {
    "id": 411,
    "response": "def concatenate_tuple(test_tup):\n    return '-'.join(str(element) for element in test_tup)"
  },
  {
    "id": 412,
    "response": "def find_Average_Of_Cube(n):\n    if n <= 0:\n        return 0.0\n    return (n * (n + 1) ** 2) / 4.0"
  },
  {
    "id": 413,
    "response": "def get_maxgold(gold, m, n):\n    dp = [[0]*n for _ in range(m)]\n    dp[0][0] = gold[0][0]\n    for j in range(1, n):\n        dp[0][j] = dp[0][j-1] + gold[0][j]\n    for i in range(1, m):\n        dp[i][0] = dp[i-1][0] + gold[i][0]\n    for i in range(1, m):\n        for j in range(1, n):\n            dp[i][j] = gold[i][j] + max(dp[i-1][j], dp[i][j-1])\n    return dp[m-1][n-1] - gold[0][0]"
  },
  {
    "id": 414,
    "response": "def extract_rear(test_tuple):\n    return [s[-1] for s in test_tuple]"
  },
  {
    "id": 415,
    "response": "def count_element_in_list(list1, x):\n    count = 0\n    for sublist in list1:\n        if x in sublist:\n            count += 1\n    return count"
  },
  {
    "id": 416,
    "response": "def filter_oddnumbers(nums):\n    return list(filter(lambda x: x % 2 != 0, nums))"
  },
  {
    "id": 417,
    "response": "import re\n\ndef change_date_format(dt):\n    match = re.fullmatch(r'(\\d{4})-(\\d{2})-(\\d{2})', dt)\n    if match:\n        year, month, day = match.groups()\n        return f\"{day}-{month}-{year}\"\n    else:\n        return dt"
  },
  {
    "id": 418,
    "response": "def shell_sort(my_list):\n    n = len(my_list)\n    gap = n // 2\n    while gap > 0:\n        for i in range(gap, n):\n            temp = my_list[i]\n            j = i\n            while j >= gap and my_list[j - gap] > temp:\n                my_list[j] = my_list[j - gap]\n                j -= gap\n            my_list[j] = temp\n        gap //= 2\n    return my_list"
  },
  {
    "id": 419,
    "response": "def and_tuples(test_tup1, test_tup2):\n    # Perform bitwise AND on corresponding elements of the two tuples\n    result = tuple(a & b for a, b in zip(test_tup1, test_tup2))\n    return result"
  },
  {
    "id": 420,
    "response": "def parabola_directrix(a, b, c):\n    return c - (b**2 + 1) * 100 / a"
  },
  {
    "id": 421,
    "response": "def common_element(list1, list2):\n    set1 = set(list1)\n    set2 = set(list2)\n    return bool(set1 & set2)"
  },
  {
    "id": 422,
    "response": "def median_trapezium(base1, base2, height):\n    return (base1 + base2) / 2"
  },
  {
    "id": 423,
    "response": "def check_greater(arr, number):\n    for element in arr:\n        if number <= element:\n            return 'No, entered number is less than those in the array'\n    return 'Yes, entered number is greater than all elements in the array'"
  },
  {
    "id": 424,
    "response": "def text_match_one(text):\n    if 'b' in text:\n        return text\n    else:\n        return 'Not matched!'"
  },
  {
    "id": 425,
    "response": "def last_Digit(n):\n    return n % 10"
  },
  {
    "id": 426,
    "response": "def neg_nos(list1):\n    return [num for num in list1 if num < 0]"
  },
  {
    "id": 427,
    "response": "def remove_odd(str1):\n    return ''.join([char for i, char in enumerate(str1) if i % 2 == 1])"
  },
  {
    "id": 428,
    "response": "from collections import Counter\n\ndef count_bidirectional(test_list):\n    count = Counter(test_list)\n    total = 0\n    for (a, b) in count:\n        if a < b and (b, a) in count:\n            total += count[(a, b)] * count[(b, a)]\n    return str(total)"
  },
  {
    "id": 429,
    "response": "def multiple_to_single(L):\n    return int(''.join(map(str, L)))"
  },
  {
    "id": 430,
    "response": "import re\n\ndef find_adverb_position(text):\n    pattern = r'\\b([a-zA-Z]+ly)(?=\\W|$)'\n    matches = re.finditer(pattern, text)\n    for match in matches:\n        start = match.start()\n        end = match.end()\n        word = match.group(1)\n        return (start, end, word)\n    return None"
  },
  {
    "id": 431,
    "response": "def surfacearea_cube(l):\n    return 6 * l ** 2"
  },
  {
    "id": 432,
    "response": "def positive_count(nums):\n    positive_count = sum(1 for num in nums if num > 0)\n    total = len(nums)\n    return round(positive_count / total, 2)"
  },
  {
    "id": 433,
    "response": "def largest_neg(list1):\n    max_neg = None\n    for num in list1:\n        if num < 0:\n            if max_neg is None or num > max_neg:\n                max_neg = num\n    return max_neg"
  },
  {
    "id": 434,
    "response": "def trim_tuple(test_list, K):\n    result = []\n    for t in test_list:\n        filtered = tuple(x for x in t if x == K)\n        result.append(filtered)\n    return result"
  },
  {
    "id": 435,
    "response": "def index_multiplication(test_tup1, test_tup2):\n    result = tuple(tuple(a * b for a, b in zip(sub1, sub2)) for sub1, sub2 in zip(test_tup1, test_tup2))\n    return result"
  },
  {
    "id": 436,
    "response": "def count_Occurrence(tup, lst):\n    count = 0\n    for element in lst:\n        count += tup.count(element)\n    return count"
  },
  {
    "id": 437,
    "response": "def cube_nums(nums):\n    return list(map(lambda x: x**3, nums))"
  },
  {
    "id": 438,
    "response": "def cal_sum(n):\n    return n * (n + 1) // 2"
  },
  {
    "id": 439,
    "response": "def check_Triangle(x1,y1,x2,y2,x3,y3):\n    area = (x2 - x1) * (y3 - y1) - (y2 - y1) * (x3 - x1)\n    return 'Yes' if area != 0 else 'No'"
  },
  {
    "id": 440,
    "response": "def extract_string(str, l):\n    return [s for s in str if len(s) == l]"
  },
  {
    "id": 441,
    "response": "import re\n\ndef remove_whitespaces(text1):\n    return re.sub(r'\\s+', '', text1)"
  },
  {
    "id": 442,
    "response": "def loss_amount(actual_cost, sale_amount):\n    if sale_amount >= actual_cost:\n        return actual_cost - sale_amount\n    else:\n        return None"
  },
  {
    "id": 443,
    "response": "def sumofFactors(n):\n    if n % 2 != 0:\n        return 0\n    m = n // 2\n    sum_factors = 0\n    for i in range(1, int(m**0.5) + 1):\n        if m % i == 0:\n            if i == m // i:\n                sum_factors += i\n            else:\n                sum_factors += i + m // i\n    return sum_factors * 2"
  },
  {
    "id": 444,
    "response": "def text_match_wordz(text):\n    if isinstance(text, str) and text.endswith('z'):\n        return 'Found a match!'\n    else:\n        return 'Not a match'"
  },
  {
    "id": 445,
    "response": "def check_monthnumb_number(monthnum2):\n    thirty_one_days = {1, 3, 5, 7, 8, 10, 12}\n    return monthnum2 in thirty_one_days"
  },
  {
    "id": 446,
    "response": "def reverse_string_list(stringlist):\n    reversed_list = []\n    for s in stringlist:\n        reversed_str = ''\n        for char in s:\n            reversed_str = char + reversed_str\n        reversed_list.append(reversed_str)\n    return reversed_list"
  },
  {
    "id": 447,
    "response": "def Find_Min(lst):\n    min_len = len(lst[0])\n    result = lst[0]\n    for sub in lst[1:]:\n        if len(sub) < min_len:\n            min_len = len(sub)\n            result = sub\n    return result"
  },
  {
    "id": 448,
    "response": "def rectangle_area(l,b):\n    return l * b"
  },
  {
    "id": 449,
    "response": "import re\n\ndef remove_uppercase(str1):\n    return re.sub(r'[A-Z]', '', str1)"
  },
  {
    "id": 450,
    "response": "def Extract(lst):\n    return [sublist[0] for sublist in lst]"
  },
  {
    "id": 451,
    "response": "def upper_ctr(str):\n    count = 0\n    for char in str:\n        if char.isupper():\n            count += 1\n    return count"
  },
  {
    "id": 452,
    "response": "def combinations_list(list1):\n    n = len(list1)\n    result = []\n    for i in range(2 ** n):\n        subset = []\n        for j in range(n):\n            if i & (1 << j):\n                subset.append(list1[j])\n        result.append(subset)\n    return result"
  },
  {
    "id": 453,
    "response": "def max_subarray_product(arr):\n    if not arr:\n        return 0\n    max_prod = min_prod = result = arr[0]\n    for num in arr[1:]:\n        temp = max_prod\n        max_prod = max(num, max_prod * num, min_prod * num)\n        min_prod = min(num, temp * num, min_prod * num)\n        result = max(result, max_prod)\n    return result"
  },
  {
    "id": 454,
    "response": "def check_value(dict, n):\n    if not dict:\n        return True\n    first_value = next(iter(dict.values()))\n    return all(value == n for value in dict.values())"
  },
  {
    "id": 455,
    "response": "def drop_empty(dict1):\n    result = {}\n    for key, value in dict1.items():\n        if value is not None:\n            result[key] = value\n    return result"
  },
  {
    "id": 456,
    "response": "def find_peak_util(arr, low, high, n):\n    mid = (low + high) // 2\n    if (mid == 0 or arr[mid] > arr[mid - 1]) and (mid == n - 1 or arr[mid] > arr[mid + 1]):\n        return arr[mid]\n    elif mid > 0 and arr[mid - 1] > arr[mid]:\n        return find_peak_util(arr, low, mid - 1, n)\n    else:\n        return find_peak_util(arr, mid + 1, high, n)"
  },
  {
    "id": 457,
    "response": "def decimal_to_Octal(deciNum):\n    return oct(deciNum)[2:]"
  },
  {
    "id": 458,
    "response": "def max_product(arr, n):\n    if not arr:\n        return 0\n    dp = [1] * len(arr)\n    for i in range(len(arr)):\n        dp[i] = arr[i]\n        for j in range(i):\n            if arr[j] < arr[i]:\n                dp[i] = max(dp[i], dp[j] * arr[i])\n    return max(dp)"
  },
  {
    "id": 459,
    "response": "def max_profit(price, k):\n    if not price:\n        return 0\n    n = len(price)\n    if k >= n // 2:\n        # Greedy approach\n        max_profit = 0\n        for i in range(1, n):\n            if price[i] > price[i-1]:\n                max_profit += price[i] - price[i-1]\n        return max_profit\n    else:\n        # Dynamic programming approach\n        # dp[i][j][0] = max profit with j transactions and not holding stock on day i\n        # dp[i][j][1] = max profit with j transactions and holding stock on day i\n        # Use two arrays to save space\n        prev_hold = [ -price[0] ] * (k+1)\n        prev_not_hold = [0] * (k+1)\n        for i in range(1, n):\n            curr_hold = [0] * (k+1)\n            curr_not_hold = [0] * (k+1)\n            for j in range(1, k+1):\n                # Buy or hold\n                curr_hold[j] = max(prev_hold[j], prev_not_hold[j-1] - price[i])\n                # Sell or hold\n                curr_not_hold[j] = max(prev_not_hold[j], prev_hold[j] + price[i])\n            prev_hold = curr_hold\n            prev_not_hold = curr_not_hold\n        return max(prev_not_hold)"
  },
  {
    "id": 460,
    "response": "def add_pairwise(test_tup):\n    result = []\n    for i in range(0, len(test_tup) - 1, 2):\n        result.append(test_tup[i] + test_tup[i + 1])\n    return tuple(result)"
  },
  {
    "id": 461,
    "response": "def find_remainder(arr, lens, n):\n    result = 1\n    for i in range(lens):\n        result = (result * arr[i]) % n\n    return result"
  },
  {
    "id": 462,
    "response": "def check_Consecutive(l):\n    if len(l) <= 1:\n        return True\n    for i in range(1, len(l)):\n        if l[i] - l[i-1] != 1:\n            return False\n    return True"
  },
  {
    "id": 463,
    "response": "def tuple_intersection(test_list1, test_list2):\n    set1 = {tuple(sorted(t)) for t in test_list1}\n    set2 = {tuple(sorted(t)) for t in test_list2}\n    return set1 & set2"
  },
  {
    "id": 464,
    "response": "def replace_char(str1, ch, newch):\n    return ''.join([newch if c == ch else c for c in str1])"
  },
  {
    "id": 465,
    "response": "def sort_counter(dict1):\n    sorted_items = sorted(dict1.items(), key=lambda item: item[1], reverse=True)\n    return sorted_items"
  },
  {
    "id": 466,
    "response": "def big_sum(nums):\n    return max(nums) + min(nums)"
  },
  {
    "id": 467,
    "response": "def is_lower(string):\n    return string.lower()"
  },
  {
    "id": 468,
    "response": "def remove_lowercase(str1):\n    return ''.join([c for c in str1 if not c.islower()])"
  },
  {
    "id": 469,
    "response": "def first_Digit(n):\n    while n >= 10:\n        n = n // 10\n    return n"
  },
  {
    "id": 470,
    "response": "def get_max_occuring_char(str1):\n    counts = {}\n    for char in str1:\n        counts[char] = counts.get(char, 0) + 1\n    max_count = max(counts.values())\n    for char in str1:\n        if counts[char] == max_count:\n            return char\n    return None"
  },
  {
    "id": 471,
    "response": "def is_subset_sum(set, n, sum):\n    # Create a 2D array to store subproblems\n    dp = [[False] * (sum + 1) for _ in range(n + 1)]\n    \n    # Base case: sum of 0 is always possible\n    for i in range(n + 1):\n        dp[i][0] = True\n    \n    # Fill the dp table\n    for i in range(1, n + 1):\n        for j in range(1, sum + 1):\n            # If the current element is less than or equal to the current sum\n            if set[i-1] <= j:\n                dp[i][j] = dp[i-1][j] or dp[i-1][j - set[i-1]]\n            else:\n                dp[i][j] = dp[i-1][j]\n    \n    return dp[n][sum]"
  },
  {
    "id": 472,
    "response": "import re\n\ndef match(text):\n    # Check if there's an uppercase letter followed by one or more lowercase letters\n    if re.search(r'[A-Z][a-z]+', text):\n        return 'Yes'\n    else:\n        return 'No'"
  },
  {
    "id": 473,
    "response": "def first_Factorial_Divisible_Number(x):\n    if x == 1:\n        return 1\n    def factorize(n):\n        factors = {}\n        i = 2\n        while i * i <= n:\n            while n % i == 0:\n                factors[i] = factors.get(i, 0) + 1\n                n //= i\n            i += 1\n        if n > 1:\n            factors[n] = 1\n        return factors\n    factors = factorize(x)\n    max_n = 0\n    for p, e in factors.items():\n        low, high = 1, p * e\n        while low < high:\n            mid = (low + high) // 2\n            count = 0\n            temp = mid\n            while temp > 0:\n                temp //= p\n                count += temp\n            if count >= e:\n                high = mid\n            else:\n                low = mid + 1\n        if low > max_n:\n            max_n = low\n    return max_n"
  },
  {
    "id": 474,
    "response": "def remove_matching_tuple(test_list1, test_list2):\n    set_test_list2 = set(test_list2)\n    result = [tup for tup in test_list1 if tup not in set_test_list2]\n    return result"
  },
  {
    "id": 475,
    "response": "def is_palindrome(arr):\n    def is_pal(n):\n        s = str(n)\n        return s == s[::-1]\n    palindromes = [x for x in arr if is_pal(x)]\n    return max(palindromes) if palindromes else None"
  },
  {
    "id": 476,
    "response": "import math\n\ndef nCr(n, r, p):\n    if r > n or r < 0:\n        return 0\n    combination = math.comb(n, r)\n    probability = combination * (p ** r) * ((1 - p) ** (n - r))\n    return probability"
  },
  {
    "id": 477,
    "response": "def sort_tuple(tup):\n    return sorted(tup, key=lambda x: x[-1])"
  },
  {
    "id": 478,
    "response": "import math\n\ndef area_pentagon(a):\n    return (5 * a**2) / (4 * math.tan(math.pi / 5))"
  },
  {
    "id": 479,
    "response": "def frequency_Of_Largest(n, arr):\n    max_val = max(arr)\n    return arr.count(max_val)"
  },
  {
    "id": 480,
    "response": "def extract_symmetric(test_list):\n    tuple_set = set(test_list)\n    result = set()\n    for t in test_list:\n        reversed_t = t[::-1]\n        if reversed_t in tuple_set and t[0] < t[1]:\n            result.add(t)\n    return result"
  },
  {
    "id": 481,
    "response": "def sum_gp(a, n, r):\n    if r == 1:\n        return a * n\n    else:\n        return a * (r**n - 1) // (r - 1)"
  },
  {
    "id": 482,
    "response": "def binary_search(item_list, item):\n    low = 0\n    high = len(item_list) - 1\n    while low <= high:\n        mid = (low + high) // 2\n        guess = item_list[mid]\n        if guess == item:\n            return mid\n        elif guess < item:\n            low = mid + 1\n        else:\n            high = mid - 1\n    return False"
  },
  {
    "id": 483,
    "response": ""
  },
  {
    "id": 484,
    "response": "def binary_to_integer(test_tup):\n    binary_str = ''.join(map(str, test_tup))\n    integer_value = int(binary_str, 2)\n    return str(integer_value)"
  },
  {
    "id": 485,
    "response": "import re\n\ndef remove_lowercase(str1):\n    return re.sub(r'[a-z]+', '', str1)"
  },
  {
    "id": 486,
    "response": "import heapq\n\ndef heap_queue_smallest(nums, n):\n    return heapq.nsmallest(n, nums)"
  },
  {
    "id": 487,
    "response": "import math\n\ndef surfacearea_cone(r, h):\n    l = math.sqrt(r**2 + h**2)\n    surface_area = math.pi * r * (r + l)\n    return surface_area"
  },
  {
    "id": 488,
    "response": "def gcd(x, y):\n    while y:\n        x, y = y, x % y\n    return x"
  },
  {
    "id": 489,
    "response": "def diameter_circle(r):\n    return 2 * r"
  },
  {
    "id": 490,
    "response": "def concatenate_elements(list):\n    return ' '.join(list)"
  },
  {
    "id": 491,
    "response": "def min_cost(cost, m, n):\n    dp = [[0]*n for _ in range(m)]\n    dp[0][0] = cost[0][0]\n    \n    for j in range(1, n):\n        dp[0][j] = dp[0][j-1] + cost[0][j]\n    \n    for i in range(1, m):\n        dp[i][0] = dp[i-1][0] + cost[i][0]\n    \n    for i in range(1, m):\n        for j in range(1, n):\n            dp[i][j] = min(dp[i-1][j], dp[i][j-1]) + cost[i][j]\n    \n    return dp[m-1][n-1]"
  },
  {
    "id": 492,
    "response": "def similar_elements(test_tup1, test_tup2):\n    set1 = set(test_tup1)\n    set2 = set(test_tup2)\n    common = set1 & set2\n    result = []\n    seen = set()\n    for x in test_tup1:\n        if x in common and x not in seen:\n            result.append(x)\n            seen.add(x)\n    return tuple(result)"
  },
  {
    "id": 493,
    "response": "def is_not_prime(n):\n    if n <= 1:\n        return True\n    if n == 2:\n        return False\n    if n % 2 == 0:\n        return True\n    max_divisor = int(n**0.5) + 1\n    for d in range(3, max_divisor, 2):\n        if n % d == 0:\n            return True\n    return False"
  },
  {
    "id": 494,
    "response": "import heapq\n\ndef heap_queue_largest(nums, n):\n    return heapq.nlargest(n, nums)"
  },
  {
    "id": 495,
    "response": "def count_ways(n):\n    if n == 0:\n        return 1\n    if n % 2 != 0:\n        return 0\n    memo = {0: 1, 2: 3}\n    for i in range(4, n + 1, 2):\n        memo[i] = 4 * memo[i - 2] - memo[i - 4]\n    return memo[n]"
  },
  {
    "id": 496,
    "response": "def is_Power_Of_Two(x, y):\n    xor = x ^ y\n    return (xor & (xor - 1)) == 0 and xor != 0"
  },
  {
    "id": 497,
    "response": "import re\n\ndef find_char_long(text):\n    # Use regex to find all words with at least 4 characters\n    words = re.findall(r'\\b\\w{4,}\\b', text)\n    return words"
  },
  {
    "id": 498,
    "response": "def square_nums(nums):\n    return list(map(lambda x: x**2, nums))"
  },
  {
    "id": 499,
    "response": "def find_Rotations(str):\n    n = len(str)\n    for k in range(1, n):\n        if str[k:] + str[:k] == str:\n            return k\n    return n"
  },
  {
    "id": 500,
    "response": "def small_nnum(list1, n):\n    sorted_list = sorted(list1)\n    return sorted_list[:n]"
  }
]